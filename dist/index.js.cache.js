(() => {
    var __webpack_modules__ = {
        7351: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__createBinding) ||
                (Object.create
                    ? function (e, t, r, A) {
                          if (A === undefined) A = r;
                          Object.defineProperty(e, A, {
                              enumerable: true,
                              get: function () {
                                  return t[r];
                              },
                          });
                      }
                    : function (e, t, r, A) {
                          if (A === undefined) A = r;
                          e[A] = t[r];
                      });
            var i =
                (this && this.__setModuleDefault) ||
                (Object.create
                    ? function (e, t) {
                          Object.defineProperty(e, 'default', {enumerable: true, value: t});
                      }
                    : function (e, t) {
                          e['default'] = t;
                      });
            var s =
                (this && this.__importStar) ||
                function (e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (e != null) for (var r in e) if (r !== 'default' && Object.hasOwnProperty.call(e, r)) A(t, e, r);
                    i(t, e);
                    return t;
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.issue = t.issueCommand = void 0;
            const a = s(r(2037));
            const o = r(5278);
            function issueCommand(e, t, r) {
                const A = new Command(e, t, r);
                process.stdout.write(A.toString() + a.EOL);
            }
            t.issueCommand = issueCommand;
            function issue(e, t = '') {
                issueCommand(e, {}, t);
            }
            t.issue = issue;
            const n = '::';
            class Command {
                constructor(e, t, r) {
                    if (!e) {
                        e = 'missing.command';
                    }
                    this.command = e;
                    this.properties = t;
                    this.message = r;
                }
                toString() {
                    let e = n + this.command;
                    if (this.properties && Object.keys(this.properties).length > 0) {
                        e += ' ';
                        let t = true;
                        for (const r in this.properties) {
                            if (this.properties.hasOwnProperty(r)) {
                                const A = this.properties[r];
                                if (A) {
                                    if (t) {
                                        t = false;
                                    } else {
                                        e += ',';
                                    }
                                    e += `${r}=${escapeProperty(A)}`;
                                }
                            }
                        }
                    }
                    e += `${n}${escapeData(this.message)}`;
                    return e;
                }
            }
            function escapeData(e) {
                return o.toCommandValue(e).replace(/%/g, '%25').replace(/\r/g, '%0D').replace(/\n/g, '%0A');
            }
            function escapeProperty(e) {
                return o
                    .toCommandValue(e)
                    .replace(/%/g, '%25')
                    .replace(/\r/g, '%0D')
                    .replace(/\n/g, '%0A')
                    .replace(/:/g, '%3A')
                    .replace(/,/g, '%2C');
            }
        },
        2186: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__createBinding) ||
                (Object.create
                    ? function (e, t, r, A) {
                          if (A === undefined) A = r;
                          Object.defineProperty(e, A, {
                              enumerable: true,
                              get: function () {
                                  return t[r];
                              },
                          });
                      }
                    : function (e, t, r, A) {
                          if (A === undefined) A = r;
                          e[A] = t[r];
                      });
            var i =
                (this && this.__setModuleDefault) ||
                (Object.create
                    ? function (e, t) {
                          Object.defineProperty(e, 'default', {enumerable: true, value: t});
                      }
                    : function (e, t) {
                          e['default'] = t;
                      });
            var s =
                (this && this.__importStar) ||
                function (e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (e != null) for (var r in e) if (r !== 'default' && Object.hasOwnProperty.call(e, r)) A(t, e, r);
                    i(t, e);
                    return t;
                };
            var a =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    function adopt(e) {
                        return e instanceof r
                            ? e
                            : new r(function (t) {
                                  t(e);
                              });
                    }
                    return new (r || (r = Promise))(function (r, i) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function step(e) {
                            e.done ? r(e.value) : adopt(e.value).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.getIDToken = t.getState = t.saveState = t.group = t.endGroup = t.startGroup = t.info = t.notice = t.warning = t.error = t.debug = t.isDebug = t.setFailed = t.setCommandEcho = t.setOutput = t.getBooleanInput = t.getMultilineInput = t.getInput = t.addPath = t.setSecret = t.exportVariable = t.ExitCode = void 0;
            const o = r(7351);
            const n = r(717);
            const p = r(5278);
            const d = s(r(2037));
            const l = s(r(1017));
            const u = r(8041);
            var c;
            (function (e) {
                e[(e['Success'] = 0)] = 'Success';
                e[(e['Failure'] = 1)] = 'Failure';
            })((c = t.ExitCode || (t.ExitCode = {})));
            function exportVariable(e, t) {
                const r = p.toCommandValue(t);
                process.env[e] = r;
                const A = process.env['GITHUB_ENV'] || '';
                if (A) {
                    return n.issueFileCommand('ENV', n.prepareKeyValueMessage(e, t));
                }
                o.issueCommand('set-env', {name: e}, r);
            }
            t.exportVariable = exportVariable;
            function setSecret(e) {
                o.issueCommand('add-mask', {}, e);
            }
            t.setSecret = setSecret;
            function addPath(e) {
                const t = process.env['GITHUB_PATH'] || '';
                if (t) {
                    n.issueFileCommand('PATH', e);
                } else {
                    o.issueCommand('add-path', {}, e);
                }
                process.env['PATH'] = `${e}${l.delimiter}${process.env['PATH']}`;
            }
            t.addPath = addPath;
            function getInput(e, t) {
                const r = process.env[`INPUT_${e.replace(/ /g, '_').toUpperCase()}`] || '';
                if (t && t.required && !r) {
                    throw new Error(`Input required and not supplied: ${e}`);
                }
                if (t && t.trimWhitespace === false) {
                    return r;
                }
                return r.trim();
            }
            t.getInput = getInput;
            function getMultilineInput(e, t) {
                const r = getInput(e, t)
                    .split('\n')
                    .filter((e) => e !== '');
                if (t && t.trimWhitespace === false) {
                    return r;
                }
                return r.map((e) => e.trim());
            }
            t.getMultilineInput = getMultilineInput;
            function getBooleanInput(e, t) {
                const r = ['true', 'True', 'TRUE'];
                const A = ['false', 'False', 'FALSE'];
                const i = getInput(e, t);
                if (r.includes(i)) return true;
                if (A.includes(i)) return false;
                throw new TypeError(
                    `Input does not meet YAML 1.2 "Core Schema" specification: ${e}\n` +
                        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``,
                );
            }
            t.getBooleanInput = getBooleanInput;
            function setOutput(e, t) {
                const r = process.env['GITHUB_OUTPUT'] || '';
                if (r) {
                    return n.issueFileCommand('OUTPUT', n.prepareKeyValueMessage(e, t));
                }
                process.stdout.write(d.EOL);
                o.issueCommand('set-output', {name: e}, p.toCommandValue(t));
            }
            t.setOutput = setOutput;
            function setCommandEcho(e) {
                o.issue('echo', e ? 'on' : 'off');
            }
            t.setCommandEcho = setCommandEcho;
            function setFailed(e) {
                process.exitCode = c.Failure;
                error(e);
            }
            t.setFailed = setFailed;
            function isDebug() {
                return process.env['RUNNER_DEBUG'] === '1';
            }
            t.isDebug = isDebug;
            function debug(e) {
                o.issueCommand('debug', {}, e);
            }
            t.debug = debug;
            function error(e, t = {}) {
                o.issueCommand('error', p.toCommandProperties(t), e instanceof Error ? e.toString() : e);
            }
            t.error = error;
            function warning(e, t = {}) {
                o.issueCommand('warning', p.toCommandProperties(t), e instanceof Error ? e.toString() : e);
            }
            t.warning = warning;
            function notice(e, t = {}) {
                o.issueCommand('notice', p.toCommandProperties(t), e instanceof Error ? e.toString() : e);
            }
            t.notice = notice;
            function info(e) {
                process.stdout.write(e + d.EOL);
            }
            t.info = info;
            function startGroup(e) {
                o.issue('group', e);
            }
            t.startGroup = startGroup;
            function endGroup() {
                o.issue('endgroup');
            }
            t.endGroup = endGroup;
            function group(e, t) {
                return a(this, void 0, void 0, function* () {
                    startGroup(e);
                    let r;
                    try {
                        r = yield t();
                    } finally {
                        endGroup();
                    }
                    return r;
                });
            }
            t.group = group;
            function saveState(e, t) {
                const r = process.env['GITHUB_STATE'] || '';
                if (r) {
                    return n.issueFileCommand('STATE', n.prepareKeyValueMessage(e, t));
                }
                o.issueCommand('save-state', {name: e}, p.toCommandValue(t));
            }
            t.saveState = saveState;
            function getState(e) {
                return process.env[`STATE_${e}`] || '';
            }
            t.getState = getState;
            function getIDToken(e) {
                return a(this, void 0, void 0, function* () {
                    return yield u.OidcClient.getIDToken(e);
                });
            }
            t.getIDToken = getIDToken;
            var g = r(1327);
            Object.defineProperty(t, 'summary', {
                enumerable: true,
                get: function () {
                    return g.summary;
                },
            });
            var m = r(1327);
            Object.defineProperty(t, 'markdownSummary', {
                enumerable: true,
                get: function () {
                    return m.markdownSummary;
                },
            });
            var h = r(2981);
            Object.defineProperty(t, 'toPosixPath', {
                enumerable: true,
                get: function () {
                    return h.toPosixPath;
                },
            });
            Object.defineProperty(t, 'toWin32Path', {
                enumerable: true,
                get: function () {
                    return h.toWin32Path;
                },
            });
            Object.defineProperty(t, 'toPlatformPath', {
                enumerable: true,
                get: function () {
                    return h.toPlatformPath;
                },
            });
        },
        717: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__createBinding) ||
                (Object.create
                    ? function (e, t, r, A) {
                          if (A === undefined) A = r;
                          Object.defineProperty(e, A, {
                              enumerable: true,
                              get: function () {
                                  return t[r];
                              },
                          });
                      }
                    : function (e, t, r, A) {
                          if (A === undefined) A = r;
                          e[A] = t[r];
                      });
            var i =
                (this && this.__setModuleDefault) ||
                (Object.create
                    ? function (e, t) {
                          Object.defineProperty(e, 'default', {enumerable: true, value: t});
                      }
                    : function (e, t) {
                          e['default'] = t;
                      });
            var s =
                (this && this.__importStar) ||
                function (e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (e != null) for (var r in e) if (r !== 'default' && Object.hasOwnProperty.call(e, r)) A(t, e, r);
                    i(t, e);
                    return t;
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.prepareKeyValueMessage = t.issueFileCommand = void 0;
            const a = s(r(7147));
            const o = s(r(2037));
            const n = r(5840);
            const p = r(5278);
            function issueFileCommand(e, t) {
                const r = process.env[`GITHUB_${e}`];
                if (!r) {
                    throw new Error(`Unable to find environment variable for file command ${e}`);
                }
                if (!a.existsSync(r)) {
                    throw new Error(`Missing file at path: ${r}`);
                }
                a.appendFileSync(r, `${p.toCommandValue(t)}${o.EOL}`, {encoding: 'utf8'});
            }
            t.issueFileCommand = issueFileCommand;
            function prepareKeyValueMessage(e, t) {
                const r = `ghadelimiter_${n.v4()}`;
                const A = p.toCommandValue(t);
                if (e.includes(r)) {
                    throw new Error(`Unexpected input: name should not contain the delimiter "${r}"`);
                }
                if (A.includes(r)) {
                    throw new Error(`Unexpected input: value should not contain the delimiter "${r}"`);
                }
                return `${e}<<${r}${o.EOL}${A}${o.EOL}${r}`;
            }
            t.prepareKeyValueMessage = prepareKeyValueMessage;
        },
        8041: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    function adopt(e) {
                        return e instanceof r
                            ? e
                            : new r(function (t) {
                                  t(e);
                              });
                    }
                    return new (r || (r = Promise))(function (r, i) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function step(e) {
                            e.done ? r(e.value) : adopt(e.value).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.OidcClient = void 0;
            const i = r(1404);
            const s = r(6758);
            const a = r(2186);
            class OidcClient {
                static createHttpClient(e = true, t = 10) {
                    const r = {allowRetries: e, maxRetries: t};
                    return new i.HttpClient(
                        'actions/oidc-client',
                        [new s.BearerCredentialHandler(OidcClient.getRequestToken())],
                        r,
                    );
                }
                static getRequestToken() {
                    const e = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
                    if (!e) {
                        throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
                    }
                    return e;
                }
                static getIDTokenUrl() {
                    const e = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
                    if (!e) {
                        throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
                    }
                    return e;
                }
                static getCall(e) {
                    var t;
                    return A(this, void 0, void 0, function* () {
                        const r = OidcClient.createHttpClient();
                        const A = yield r.getJson(e).catch((e) => {
                            throw new Error(
                                `Failed to get ID Token. \n \n        Error Code : ${e.statusCode}\n \n        Error Message: ${e.message}`,
                            );
                        });
                        const i = (t = A.result) === null || t === void 0 ? void 0 : t.value;
                        if (!i) {
                            throw new Error('Response json body do not have ID Token field');
                        }
                        return i;
                    });
                }
                static getIDToken(e) {
                    return A(this, void 0, void 0, function* () {
                        try {
                            let t = OidcClient.getIDTokenUrl();
                            if (e) {
                                const r = encodeURIComponent(e);
                                t = `${t}&audience=${r}`;
                            }
                            a.debug(`ID token url is ${t}`);
                            const r = yield OidcClient.getCall(t);
                            a.setSecret(r);
                            return r;
                        } catch (e) {
                            throw new Error(`Error message: ${e.message}`);
                        }
                    });
                }
            }
            t.OidcClient = OidcClient;
        },
        2981: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__createBinding) ||
                (Object.create
                    ? function (e, t, r, A) {
                          if (A === undefined) A = r;
                          Object.defineProperty(e, A, {
                              enumerable: true,
                              get: function () {
                                  return t[r];
                              },
                          });
                      }
                    : function (e, t, r, A) {
                          if (A === undefined) A = r;
                          e[A] = t[r];
                      });
            var i =
                (this && this.__setModuleDefault) ||
                (Object.create
                    ? function (e, t) {
                          Object.defineProperty(e, 'default', {enumerable: true, value: t});
                      }
                    : function (e, t) {
                          e['default'] = t;
                      });
            var s =
                (this && this.__importStar) ||
                function (e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (e != null) for (var r in e) if (r !== 'default' && Object.hasOwnProperty.call(e, r)) A(t, e, r);
                    i(t, e);
                    return t;
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.toPlatformPath = t.toWin32Path = t.toPosixPath = void 0;
            const a = s(r(1017));
            function toPosixPath(e) {
                return e.replace(/[\\]/g, '/');
            }
            t.toPosixPath = toPosixPath;
            function toWin32Path(e) {
                return e.replace(/[/]/g, '\\');
            }
            t.toWin32Path = toWin32Path;
            function toPlatformPath(e) {
                return e.replace(/[/\\]/g, a.sep);
            }
            t.toPlatformPath = toPlatformPath;
        },
        1327: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    function adopt(e) {
                        return e instanceof r
                            ? e
                            : new r(function (t) {
                                  t(e);
                              });
                    }
                    return new (r || (r = Promise))(function (r, i) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function step(e) {
                            e.done ? r(e.value) : adopt(e.value).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.summary = t.markdownSummary = t.SUMMARY_DOCS_URL = t.SUMMARY_ENV_VAR = void 0;
            const i = r(2037);
            const s = r(7147);
            const {access: a, appendFile: o, writeFile: n} = s.promises;
            t.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
            t.SUMMARY_DOCS_URL =
                'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
            class Summary {
                constructor() {
                    this._buffer = '';
                }
                filePath() {
                    return A(this, void 0, void 0, function* () {
                        if (this._filePath) {
                            return this._filePath;
                        }
                        const e = process.env[t.SUMMARY_ENV_VAR];
                        if (!e) {
                            throw new Error(
                                `Unable to find environment variable for $${t.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`,
                            );
                        }
                        try {
                            yield a(e, s.constants.R_OK | s.constants.W_OK);
                        } catch (t) {
                            throw new Error(
                                `Unable to access summary file: '${e}'. Check if the file has correct read/write permissions.`,
                            );
                        }
                        this._filePath = e;
                        return this._filePath;
                    });
                }
                wrap(e, t, r = {}) {
                    const A = Object.entries(r)
                        .map(([e, t]) => ` ${e}="${t}"`)
                        .join('');
                    if (!t) {
                        return `<${e}${A}>`;
                    }
                    return `<${e}${A}>${t}</${e}>`;
                }
                write(e) {
                    return A(this, void 0, void 0, function* () {
                        const t = !!(e === null || e === void 0 ? void 0 : e.overwrite);
                        const r = yield this.filePath();
                        const A = t ? n : o;
                        yield A(r, this._buffer, {encoding: 'utf8'});
                        return this.emptyBuffer();
                    });
                }
                clear() {
                    return A(this, void 0, void 0, function* () {
                        return this.emptyBuffer().write({overwrite: true});
                    });
                }
                stringify() {
                    return this._buffer;
                }
                isEmptyBuffer() {
                    return this._buffer.length === 0;
                }
                emptyBuffer() {
                    this._buffer = '';
                    return this;
                }
                addRaw(e, t = false) {
                    this._buffer += e;
                    return t ? this.addEOL() : this;
                }
                addEOL() {
                    return this.addRaw(i.EOL);
                }
                addCodeBlock(e, t) {
                    const r = Object.assign({}, t && {lang: t});
                    const A = this.wrap('pre', this.wrap('code', e), r);
                    return this.addRaw(A).addEOL();
                }
                addList(e, t = false) {
                    const r = t ? 'ol' : 'ul';
                    const A = e.map((e) => this.wrap('li', e)).join('');
                    const i = this.wrap(r, A);
                    return this.addRaw(i).addEOL();
                }
                addTable(e) {
                    const t = e
                        .map((e) => {
                            const t = e
                                .map((e) => {
                                    if (typeof e === 'string') {
                                        return this.wrap('td', e);
                                    }
                                    const {header: t, data: r, colspan: A, rowspan: i} = e;
                                    const s = t ? 'th' : 'td';
                                    const a = Object.assign(Object.assign({}, A && {colspan: A}), i && {rowspan: i});
                                    return this.wrap(s, r, a);
                                })
                                .join('');
                            return this.wrap('tr', t);
                        })
                        .join('');
                    const r = this.wrap('table', t);
                    return this.addRaw(r).addEOL();
                }
                addDetails(e, t) {
                    const r = this.wrap('details', this.wrap('summary', e) + t);
                    return this.addRaw(r).addEOL();
                }
                addImage(e, t, r) {
                    const {width: A, height: i} = r || {};
                    const s = Object.assign(Object.assign({}, A && {width: A}), i && {height: i});
                    const a = this.wrap('img', null, Object.assign({src: e, alt: t}, s));
                    return this.addRaw(a).addEOL();
                }
                addHeading(e, t) {
                    const r = `h${t}`;
                    const A = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(r) ? r : 'h1';
                    const i = this.wrap(A, e);
                    return this.addRaw(i).addEOL();
                }
                addSeparator() {
                    const e = this.wrap('hr', null);
                    return this.addRaw(e).addEOL();
                }
                addBreak() {
                    const e = this.wrap('br', null);
                    return this.addRaw(e).addEOL();
                }
                addQuote(e, t) {
                    const r = Object.assign({}, t && {cite: t});
                    const A = this.wrap('blockquote', e, r);
                    return this.addRaw(A).addEOL();
                }
                addLink(e, t) {
                    const r = this.wrap('a', e, {href: t});
                    return this.addRaw(r).addEOL();
                }
            }
            const p = new Summary();
            t.markdownSummary = p;
            t.summary = p;
        },
        5278: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t.toCommandProperties = t.toCommandValue = void 0;
            function toCommandValue(e) {
                if (e === null || e === undefined) {
                    return '';
                } else if (typeof e === 'string' || e instanceof String) {
                    return e;
                }
                return JSON.stringify(e);
            }
            t.toCommandValue = toCommandValue;
            function toCommandProperties(e) {
                if (!Object.keys(e).length) {
                    return {};
                }
                return {
                    title: e.title,
                    file: e.file,
                    line: e.startLine,
                    endLine: e.endLine,
                    col: e.startColumn,
                    endColumn: e.endColumn,
                };
            }
            t.toCommandProperties = toCommandProperties;
        },
        6758: function (e, t) {
            'use strict';
            var r =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    function adopt(e) {
                        return e instanceof r
                            ? e
                            : new r(function (t) {
                                  t(e);
                              });
                    }
                    return new (r || (r = Promise))(function (r, i) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function step(e) {
                            e.done ? r(e.value) : adopt(e.value).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.PersonalAccessTokenCredentialHandler = t.BearerCredentialHandler = t.BasicCredentialHandler = void 0;
            class BasicCredentialHandler {
                constructor(e, t) {
                    this.username = e;
                    this.password = t;
                }
                prepareRequest(e) {
                    if (!e.headers) {
                        throw Error('The request has no headers');
                    }
                    e.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString(
                        'base64',
                    )}`;
                }
                canHandleAuthentication() {
                    return false;
                }
                handleAuthentication() {
                    return r(this, void 0, void 0, function* () {
                        throw new Error('not implemented');
                    });
                }
            }
            t.BasicCredentialHandler = BasicCredentialHandler;
            class BearerCredentialHandler {
                constructor(e) {
                    this.token = e;
                }
                prepareRequest(e) {
                    if (!e.headers) {
                        throw Error('The request has no headers');
                    }
                    e.headers['Authorization'] = `Bearer ${this.token}`;
                }
                canHandleAuthentication() {
                    return false;
                }
                handleAuthentication() {
                    return r(this, void 0, void 0, function* () {
                        throw new Error('not implemented');
                    });
                }
            }
            t.BearerCredentialHandler = BearerCredentialHandler;
            class PersonalAccessTokenCredentialHandler {
                constructor(e) {
                    this.token = e;
                }
                prepareRequest(e) {
                    if (!e.headers) {
                        throw Error('The request has no headers');
                    }
                    e.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
                }
                canHandleAuthentication() {
                    return false;
                }
                handleAuthentication() {
                    return r(this, void 0, void 0, function* () {
                        throw new Error('not implemented');
                    });
                }
            }
            t.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
        },
        1404: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__createBinding) ||
                (Object.create
                    ? function (e, t, r, A) {
                          if (A === undefined) A = r;
                          var i = Object.getOwnPropertyDescriptor(t, r);
                          if (!i || ('get' in i ? !t.__esModule : i.writable || i.configurable)) {
                              i = {
                                  enumerable: true,
                                  get: function () {
                                      return t[r];
                                  },
                              };
                          }
                          Object.defineProperty(e, A, i);
                      }
                    : function (e, t, r, A) {
                          if (A === undefined) A = r;
                          e[A] = t[r];
                      });
            var i =
                (this && this.__setModuleDefault) ||
                (Object.create
                    ? function (e, t) {
                          Object.defineProperty(e, 'default', {enumerable: true, value: t});
                      }
                    : function (e, t) {
                          e['default'] = t;
                      });
            var s =
                (this && this.__importStar) ||
                function (e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (e != null)
                        for (var r in e) if (r !== 'default' && Object.prototype.hasOwnProperty.call(e, r)) A(t, e, r);
                    i(t, e);
                    return t;
                };
            var a =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    function adopt(e) {
                        return e instanceof r
                            ? e
                            : new r(function (t) {
                                  t(e);
                              });
                    }
                    return new (r || (r = Promise))(function (r, i) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                i(e);
                            }
                        }
                        function step(e) {
                            e.done ? r(e.value) : adopt(e.value).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            t.HttpClient = t.isHttps = t.HttpClientResponse = t.HttpClientError = t.getProxyUrl = t.MediaTypes = t.Headers = t.HttpCodes = void 0;
            const o = s(r(3685));
            const n = s(r(5687));
            const p = s(r(2843));
            const d = s(r(4294));
            const l = r(1773);
            var u;
            (function (e) {
                e[(e['OK'] = 200)] = 'OK';
                e[(e['MultipleChoices'] = 300)] = 'MultipleChoices';
                e[(e['MovedPermanently'] = 301)] = 'MovedPermanently';
                e[(e['ResourceMoved'] = 302)] = 'ResourceMoved';
                e[(e['SeeOther'] = 303)] = 'SeeOther';
                e[(e['NotModified'] = 304)] = 'NotModified';
                e[(e['UseProxy'] = 305)] = 'UseProxy';
                e[(e['SwitchProxy'] = 306)] = 'SwitchProxy';
                e[(e['TemporaryRedirect'] = 307)] = 'TemporaryRedirect';
                e[(e['PermanentRedirect'] = 308)] = 'PermanentRedirect';
                e[(e['BadRequest'] = 400)] = 'BadRequest';
                e[(e['Unauthorized'] = 401)] = 'Unauthorized';
                e[(e['PaymentRequired'] = 402)] = 'PaymentRequired';
                e[(e['Forbidden'] = 403)] = 'Forbidden';
                e[(e['NotFound'] = 404)] = 'NotFound';
                e[(e['MethodNotAllowed'] = 405)] = 'MethodNotAllowed';
                e[(e['NotAcceptable'] = 406)] = 'NotAcceptable';
                e[(e['ProxyAuthenticationRequired'] = 407)] = 'ProxyAuthenticationRequired';
                e[(e['RequestTimeout'] = 408)] = 'RequestTimeout';
                e[(e['Conflict'] = 409)] = 'Conflict';
                e[(e['Gone'] = 410)] = 'Gone';
                e[(e['TooManyRequests'] = 429)] = 'TooManyRequests';
                e[(e['InternalServerError'] = 500)] = 'InternalServerError';
                e[(e['NotImplemented'] = 501)] = 'NotImplemented';
                e[(e['BadGateway'] = 502)] = 'BadGateway';
                e[(e['ServiceUnavailable'] = 503)] = 'ServiceUnavailable';
                e[(e['GatewayTimeout'] = 504)] = 'GatewayTimeout';
            })(u || (t.HttpCodes = u = {}));
            var c;
            (function (e) {
                e['Accept'] = 'accept';
                e['ContentType'] = 'content-type';
            })(c || (t.Headers = c = {}));
            var g;
            (function (e) {
                e['ApplicationJson'] = 'application/json';
            })(g || (t.MediaTypes = g = {}));
            function getProxyUrl(e) {
                const t = p.getProxyUrl(new URL(e));
                return t ? t.href : '';
            }
            t.getProxyUrl = getProxyUrl;
            const m = [u.MovedPermanently, u.ResourceMoved, u.SeeOther, u.TemporaryRedirect, u.PermanentRedirect];
            const h = [u.BadGateway, u.ServiceUnavailable, u.GatewayTimeout];
            const C = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
            const Q = 10;
            const B = 5;
            class HttpClientError extends Error {
                constructor(e, t) {
                    super(e);
                    this.name = 'HttpClientError';
                    this.statusCode = t;
                    Object.setPrototypeOf(this, HttpClientError.prototype);
                }
            }
            t.HttpClientError = HttpClientError;
            class HttpClientResponse {
                constructor(e) {
                    this.message = e;
                }
                readBody() {
                    return a(this, void 0, void 0, function* () {
                        return new Promise((e) =>
                            a(this, void 0, void 0, function* () {
                                let t = Buffer.alloc(0);
                                this.message.on('data', (e) => {
                                    t = Buffer.concat([t, e]);
                                });
                                this.message.on('end', () => {
                                    e(t.toString());
                                });
                            }),
                        );
                    });
                }
                readBodyBuffer() {
                    return a(this, void 0, void 0, function* () {
                        return new Promise((e) =>
                            a(this, void 0, void 0, function* () {
                                const t = [];
                                this.message.on('data', (e) => {
                                    t.push(e);
                                });
                                this.message.on('end', () => {
                                    e(Buffer.concat(t));
                                });
                            }),
                        );
                    });
                }
            }
            t.HttpClientResponse = HttpClientResponse;
            function isHttps(e) {
                const t = new URL(e);
                return t.protocol === 'https:';
            }
            t.isHttps = isHttps;
            class HttpClient {
                constructor(e, t, r) {
                    this._ignoreSslError = false;
                    this._allowRedirects = true;
                    this._allowRedirectDowngrade = false;
                    this._maxRedirects = 50;
                    this._allowRetries = false;
                    this._maxRetries = 1;
                    this._keepAlive = false;
                    this._disposed = false;
                    this.userAgent = e;
                    this.handlers = t || [];
                    this.requestOptions = r;
                    if (r) {
                        if (r.ignoreSslError != null) {
                            this._ignoreSslError = r.ignoreSslError;
                        }
                        this._socketTimeout = r.socketTimeout;
                        if (r.allowRedirects != null) {
                            this._allowRedirects = r.allowRedirects;
                        }
                        if (r.allowRedirectDowngrade != null) {
                            this._allowRedirectDowngrade = r.allowRedirectDowngrade;
                        }
                        if (r.maxRedirects != null) {
                            this._maxRedirects = Math.max(r.maxRedirects, 0);
                        }
                        if (r.keepAlive != null) {
                            this._keepAlive = r.keepAlive;
                        }
                        if (r.allowRetries != null) {
                            this._allowRetries = r.allowRetries;
                        }
                        if (r.maxRetries != null) {
                            this._maxRetries = r.maxRetries;
                        }
                    }
                }
                options(e, t) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('OPTIONS', e, null, t || {});
                    });
                }
                get(e, t) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('GET', e, null, t || {});
                    });
                }
                del(e, t) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('DELETE', e, null, t || {});
                    });
                }
                post(e, t, r) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('POST', e, t, r || {});
                    });
                }
                patch(e, t, r) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('PATCH', e, t, r || {});
                    });
                }
                put(e, t, r) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('PUT', e, t, r || {});
                    });
                }
                head(e, t) {
                    return a(this, void 0, void 0, function* () {
                        return this.request('HEAD', e, null, t || {});
                    });
                }
                sendStream(e, t, r, A) {
                    return a(this, void 0, void 0, function* () {
                        return this.request(e, t, r, A);
                    });
                }
                getJson(e, t = {}) {
                    return a(this, void 0, void 0, function* () {
                        t[c.Accept] = this._getExistingOrDefaultHeader(t, c.Accept, g.ApplicationJson);
                        const r = yield this.get(e, t);
                        return this._processResponse(r, this.requestOptions);
                    });
                }
                postJson(e, t, r = {}) {
                    return a(this, void 0, void 0, function* () {
                        const A = JSON.stringify(t, null, 2);
                        r[c.Accept] = this._getExistingOrDefaultHeader(r, c.Accept, g.ApplicationJson);
                        r[c.ContentType] = this._getExistingOrDefaultHeader(r, c.ContentType, g.ApplicationJson);
                        const i = yield this.post(e, A, r);
                        return this._processResponse(i, this.requestOptions);
                    });
                }
                putJson(e, t, r = {}) {
                    return a(this, void 0, void 0, function* () {
                        const A = JSON.stringify(t, null, 2);
                        r[c.Accept] = this._getExistingOrDefaultHeader(r, c.Accept, g.ApplicationJson);
                        r[c.ContentType] = this._getExistingOrDefaultHeader(r, c.ContentType, g.ApplicationJson);
                        const i = yield this.put(e, A, r);
                        return this._processResponse(i, this.requestOptions);
                    });
                }
                patchJson(e, t, r = {}) {
                    return a(this, void 0, void 0, function* () {
                        const A = JSON.stringify(t, null, 2);
                        r[c.Accept] = this._getExistingOrDefaultHeader(r, c.Accept, g.ApplicationJson);
                        r[c.ContentType] = this._getExistingOrDefaultHeader(r, c.ContentType, g.ApplicationJson);
                        const i = yield this.patch(e, A, r);
                        return this._processResponse(i, this.requestOptions);
                    });
                }
                request(e, t, r, A) {
                    return a(this, void 0, void 0, function* () {
                        if (this._disposed) {
                            throw new Error('Client has already been disposed.');
                        }
                        const i = new URL(t);
                        let s = this._prepareRequest(e, i, A);
                        const a = this._allowRetries && C.includes(e) ? this._maxRetries + 1 : 1;
                        let o = 0;
                        let n;
                        do {
                            n = yield this.requestRaw(s, r);
                            if (n && n.message && n.message.statusCode === u.Unauthorized) {
                                let e;
                                for (const t of this.handlers) {
                                    if (t.canHandleAuthentication(n)) {
                                        e = t;
                                        break;
                                    }
                                }
                                if (e) {
                                    return e.handleAuthentication(this, s, r);
                                } else {
                                    return n;
                                }
                            }
                            let t = this._maxRedirects;
                            while (
                                n.message.statusCode &&
                                m.includes(n.message.statusCode) &&
                                this._allowRedirects &&
                                t > 0
                            ) {
                                const a = n.message.headers['location'];
                                if (!a) {
                                    break;
                                }
                                const o = new URL(a);
                                if (
                                    i.protocol === 'https:' &&
                                    i.protocol !== o.protocol &&
                                    !this._allowRedirectDowngrade
                                ) {
                                    throw new Error(
                                        'Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.',
                                    );
                                }
                                yield n.readBody();
                                if (o.hostname !== i.hostname) {
                                    for (const e in A) {
                                        if (e.toLowerCase() === 'authorization') {
                                            delete A[e];
                                        }
                                    }
                                }
                                s = this._prepareRequest(e, o, A);
                                n = yield this.requestRaw(s, r);
                                t--;
                            }
                            if (!n.message.statusCode || !h.includes(n.message.statusCode)) {
                                return n;
                            }
                            o += 1;
                            if (o < a) {
                                yield n.readBody();
                                yield this._performExponentialBackoff(o);
                            }
                        } while (o < a);
                        return n;
                    });
                }
                dispose() {
                    if (this._agent) {
                        this._agent.destroy();
                    }
                    this._disposed = true;
                }
                requestRaw(e, t) {
                    return a(this, void 0, void 0, function* () {
                        return new Promise((r, A) => {
                            function callbackForResult(e, t) {
                                if (e) {
                                    A(e);
                                } else if (!t) {
                                    A(new Error('Unknown error'));
                                } else {
                                    r(t);
                                }
                            }
                            this.requestRawWithCallback(e, t, callbackForResult);
                        });
                    });
                }
                requestRawWithCallback(e, t, r) {
                    if (typeof t === 'string') {
                        if (!e.options.headers) {
                            e.options.headers = {};
                        }
                        e.options.headers['Content-Length'] = Buffer.byteLength(t, 'utf8');
                    }
                    let A = false;
                    function handleResult(e, t) {
                        if (!A) {
                            A = true;
                            r(e, t);
                        }
                    }
                    const i = e.httpModule.request(e.options, (e) => {
                        const t = new HttpClientResponse(e);
                        handleResult(undefined, t);
                    });
                    let s;
                    i.on('socket', (e) => {
                        s = e;
                    });
                    i.setTimeout(this._socketTimeout || 3 * 6e4, () => {
                        if (s) {
                            s.end();
                        }
                        handleResult(new Error(`Request timeout: ${e.options.path}`));
                    });
                    i.on('error', function (e) {
                        handleResult(e);
                    });
                    if (t && typeof t === 'string') {
                        i.write(t, 'utf8');
                    }
                    if (t && typeof t !== 'string') {
                        t.on('close', function () {
                            i.end();
                        });
                        t.pipe(i);
                    } else {
                        i.end();
                    }
                }
                getAgent(e) {
                    const t = new URL(e);
                    return this._getAgent(t);
                }
                getAgentDispatcher(e) {
                    const t = new URL(e);
                    const r = p.getProxyUrl(t);
                    const A = r && r.hostname;
                    if (!A) {
                        return;
                    }
                    return this._getProxyAgentDispatcher(t, r);
                }
                _prepareRequest(e, t, r) {
                    const A = {};
                    A.parsedUrl = t;
                    const i = A.parsedUrl.protocol === 'https:';
                    A.httpModule = i ? n : o;
                    const s = i ? 443 : 80;
                    A.options = {};
                    A.options.host = A.parsedUrl.hostname;
                    A.options.port = A.parsedUrl.port ? parseInt(A.parsedUrl.port) : s;
                    A.options.path = (A.parsedUrl.pathname || '') + (A.parsedUrl.search || '');
                    A.options.method = e;
                    A.options.headers = this._mergeHeaders(r);
                    if (this.userAgent != null) {
                        A.options.headers['user-agent'] = this.userAgent;
                    }
                    A.options.agent = this._getAgent(A.parsedUrl);
                    if (this.handlers) {
                        for (const e of this.handlers) {
                            e.prepareRequest(A.options);
                        }
                    }
                    return A;
                }
                _mergeHeaders(e) {
                    if (this.requestOptions && this.requestOptions.headers) {
                        return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(e || {}));
                    }
                    return lowercaseKeys(e || {});
                }
                _getExistingOrDefaultHeader(e, t, r) {
                    let A;
                    if (this.requestOptions && this.requestOptions.headers) {
                        A = lowercaseKeys(this.requestOptions.headers)[t];
                    }
                    return e[t] || A || r;
                }
                _getAgent(e) {
                    let t;
                    const r = p.getProxyUrl(e);
                    const A = r && r.hostname;
                    if (this._keepAlive && A) {
                        t = this._proxyAgent;
                    }
                    if (this._keepAlive && !A) {
                        t = this._agent;
                    }
                    if (t) {
                        return t;
                    }
                    const i = e.protocol === 'https:';
                    let s = 100;
                    if (this.requestOptions) {
                        s = this.requestOptions.maxSockets || o.globalAgent.maxSockets;
                    }
                    if (r && r.hostname) {
                        const e = {
                            maxSockets: s,
                            keepAlive: this._keepAlive,
                            proxy: Object.assign(
                                Object.assign(
                                    {},
                                    (r.username || r.password) && {proxyAuth: `${r.username}:${r.password}`},
                                ),
                                {host: r.hostname, port: r.port},
                            ),
                        };
                        let A;
                        const a = r.protocol === 'https:';
                        if (i) {
                            A = a ? d.httpsOverHttps : d.httpsOverHttp;
                        } else {
                            A = a ? d.httpOverHttps : d.httpOverHttp;
                        }
                        t = A(e);
                        this._proxyAgent = t;
                    }
                    if (this._keepAlive && !t) {
                        const e = {keepAlive: this._keepAlive, maxSockets: s};
                        t = i ? new n.Agent(e) : new o.Agent(e);
                        this._agent = t;
                    }
                    if (!t) {
                        t = i ? n.globalAgent : o.globalAgent;
                    }
                    if (i && this._ignoreSslError) {
                        t.options = Object.assign(t.options || {}, {rejectUnauthorized: false});
                    }
                    return t;
                }
                _getProxyAgentDispatcher(e, t) {
                    let r;
                    if (this._keepAlive) {
                        r = this._proxyAgentDispatcher;
                    }
                    if (r) {
                        return r;
                    }
                    const A = e.protocol === 'https:';
                    r = new l.ProxyAgent(
                        Object.assign(
                            {uri: t.href, pipelining: !this._keepAlive ? 0 : 1},
                            (t.username || t.password) && {token: `${t.username}:${t.password}`},
                        ),
                    );
                    this._proxyAgentDispatcher = r;
                    if (A && this._ignoreSslError) {
                        r.options = Object.assign(r.options.requestTls || {}, {rejectUnauthorized: false});
                    }
                    return r;
                }
                _performExponentialBackoff(e) {
                    return a(this, void 0, void 0, function* () {
                        e = Math.min(Q, e);
                        const t = B * Math.pow(2, e);
                        return new Promise((e) => setTimeout(() => e(), t));
                    });
                }
                _processResponse(e, t) {
                    return a(this, void 0, void 0, function* () {
                        return new Promise((r, A) =>
                            a(this, void 0, void 0, function* () {
                                const i = e.message.statusCode || 0;
                                const s = {statusCode: i, result: null, headers: {}};
                                if (i === u.NotFound) {
                                    r(s);
                                }
                                function dateTimeDeserializer(e, t) {
                                    if (typeof t === 'string') {
                                        const e = new Date(t);
                                        if (!isNaN(e.valueOf())) {
                                            return e;
                                        }
                                    }
                                    return t;
                                }
                                let a;
                                let o;
                                try {
                                    o = yield e.readBody();
                                    if (o && o.length > 0) {
                                        if (t && t.deserializeDates) {
                                            a = JSON.parse(o, dateTimeDeserializer);
                                        } else {
                                            a = JSON.parse(o);
                                        }
                                        s.result = a;
                                    }
                                    s.headers = e.message.headers;
                                } catch (e) {}
                                if (i > 299) {
                                    let e;
                                    if (a && a.message) {
                                        e = a.message;
                                    } else if (o && o.length > 0) {
                                        e = o;
                                    } else {
                                        e = `Failed request: (${i})`;
                                    }
                                    const t = new HttpClientError(e, i);
                                    t.result = s.result;
                                    A(t);
                                } else {
                                    r(s);
                                }
                            }),
                        );
                    });
                }
            }
            t.HttpClient = HttpClient;
            const lowercaseKeys = (e) => Object.keys(e).reduce((t, r) => ((t[r.toLowerCase()] = e[r]), t), {});
        },
        2843: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t.checkBypass = t.getProxyUrl = void 0;
            function getProxyUrl(e) {
                const t = e.protocol === 'https:';
                if (checkBypass(e)) {
                    return undefined;
                }
                const r = (() => {
                    if (t) {
                        return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
                    } else {
                        return process.env['http_proxy'] || process.env['HTTP_PROXY'];
                    }
                })();
                if (r) {
                    try {
                        return new URL(r);
                    } catch (e) {
                        if (!r.startsWith('http://') && !r.startsWith('https://')) return new URL(`http://${r}`);
                    }
                } else {
                    return undefined;
                }
            }
            t.getProxyUrl = getProxyUrl;
            function checkBypass(e) {
                if (!e.hostname) {
                    return false;
                }
                const t = e.hostname;
                if (isLoopbackAddress(t)) {
                    return true;
                }
                const r = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
                if (!r) {
                    return false;
                }
                let A;
                if (e.port) {
                    A = Number(e.port);
                } else if (e.protocol === 'http:') {
                    A = 80;
                } else if (e.protocol === 'https:') {
                    A = 443;
                }
                const i = [e.hostname.toUpperCase()];
                if (typeof A === 'number') {
                    i.push(`${i[0]}:${A}`);
                }
                for (const e of r
                    .split(',')
                    .map((e) => e.trim().toUpperCase())
                    .filter((e) => e)) {
                    if (
                        e === '*' ||
                        i.some((t) => t === e || t.endsWith(`.${e}`) || (e.startsWith('.') && t.endsWith(`${e}`)))
                    ) {
                        return true;
                    }
                }
                return false;
            }
            t.checkBypass = checkBypass;
            function isLoopbackAddress(e) {
                const t = e.toLowerCase();
                return (
                    t === 'localhost' ||
                    t.startsWith('127.') ||
                    t.startsWith('[::1]') ||
                    t.startsWith('[0:0:0:0:0:0:0:1]')
                );
            }
        },
        4087: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            const A = r(7147);
            const i = r(2037);
            class Context {
                constructor() {
                    this.payload = {};
                    if (process.env.GITHUB_EVENT_PATH) {
                        if (A.existsSync(process.env.GITHUB_EVENT_PATH)) {
                            this.payload = JSON.parse(
                                A.readFileSync(process.env.GITHUB_EVENT_PATH, {encoding: 'utf8'}),
                            );
                        } else {
                            const e = process.env.GITHUB_EVENT_PATH;
                            process.stdout.write(`GITHUB_EVENT_PATH ${e} does not exist${i.EOL}`);
                        }
                    }
                    this.eventName = process.env.GITHUB_EVENT_NAME;
                    this.sha = process.env.GITHUB_SHA;
                    this.ref = process.env.GITHUB_REF;
                    this.workflow = process.env.GITHUB_WORKFLOW;
                    this.action = process.env.GITHUB_ACTION;
                    this.actor = process.env.GITHUB_ACTOR;
                }
                get issue() {
                    const e = this.payload;
                    return Object.assign(Object.assign({}, this.repo), {
                        number: (e.issue || e.pull_request || e).number,
                    });
                }
                get repo() {
                    if (process.env.GITHUB_REPOSITORY) {
                        const [e, t] = process.env.GITHUB_REPOSITORY.split('/');
                        return {owner: e, repo: t};
                    }
                    if (this.payload.repository) {
                        return {owner: this.payload.repository.owner.login, repo: this.payload.repository.name};
                    }
                    throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
                }
            }
            t.Context = Context;
        },
        5438: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__importStar) ||
                function (e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (e != null) for (var r in e) if (Object.hasOwnProperty.call(e, r)) t[r] = e[r];
                    t['default'] = e;
                    return t;
                };
            Object.defineProperty(t, '__esModule', {value: true});
            const i = r(8467);
            const s = r(9351);
            const a = A(r(4087));
            const o = A(r(9925));
            s.Octokit.prototype = new s.Octokit();
            t.context = new a.Context();
            class GitHub extends s.Octokit {
                constructor(e, t) {
                    super(GitHub.getOctokitOptions(GitHub.disambiguate(e, t)));
                    this.graphql = GitHub.getGraphQL(GitHub.disambiguate(e, t));
                }
                static disambiguate(e, t) {
                    return [typeof e === 'string' ? e : '', typeof e === 'object' ? e : t || {}];
                }
                static getOctokitOptions(e) {
                    const t = e[0];
                    const r = Object.assign({}, e[1]);
                    r.baseUrl = r.baseUrl || this.getApiBaseUrl();
                    const A = GitHub.getAuthString(t, r);
                    if (A) {
                        r.auth = A;
                    }
                    const i = GitHub.getProxyAgent(r.baseUrl, r);
                    if (i) {
                        r.request = r.request ? Object.assign({}, r.request) : {};
                        r.request.agent = i;
                    }
                    return r;
                }
                static getGraphQL(e) {
                    const t = {};
                    t.baseUrl = this.getGraphQLBaseUrl();
                    const r = e[0];
                    const A = e[1];
                    const s = this.getAuthString(r, A);
                    if (s) {
                        t.headers = {authorization: s};
                    }
                    const a = GitHub.getProxyAgent(t.baseUrl, A);
                    if (a) {
                        t.request = {agent: a};
                    }
                    return i.graphql.defaults(t);
                }
                static getAuthString(e, t) {
                    if (!e && !t.auth) {
                        throw new Error('Parameter token or opts.auth is required');
                    } else if (e && t.auth) {
                        throw new Error('Parameters token and opts.auth may not both be specified');
                    }
                    return typeof t.auth === 'string' ? t.auth : `token ${e}`;
                }
                static getProxyAgent(e, t) {
                    var r;
                    if (!((r = t.request) === null || r === void 0 ? void 0 : r.agent)) {
                        if (o.getProxyUrl(e)) {
                            const t = new o.HttpClient();
                            return t.getAgent(e);
                        }
                    }
                    return undefined;
                }
                static getApiBaseUrl() {
                    return process.env['GITHUB_API_URL'] || 'https://api.github.com';
                }
                static getGraphQLBaseUrl() {
                    let e = process.env['GITHUB_GRAPHQL_URL'] || 'https://api.github.com/graphql';
                    if (e.endsWith('/')) {
                        e = e.substr(0, e.length - 1);
                    }
                    if (e.toUpperCase().endsWith('/GRAPHQL')) {
                        e = e.substr(0, e.length - '/graphql'.length);
                    }
                    return e;
                }
            }
            t.GitHub = GitHub;
        },
        9925: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            const A = r(7310);
            const i = r(3685);
            const s = r(5687);
            const a = r(6443);
            let o;
            var n;
            (function (e) {
                e[(e['OK'] = 200)] = 'OK';
                e[(e['MultipleChoices'] = 300)] = 'MultipleChoices';
                e[(e['MovedPermanently'] = 301)] = 'MovedPermanently';
                e[(e['ResourceMoved'] = 302)] = 'ResourceMoved';
                e[(e['SeeOther'] = 303)] = 'SeeOther';
                e[(e['NotModified'] = 304)] = 'NotModified';
                e[(e['UseProxy'] = 305)] = 'UseProxy';
                e[(e['SwitchProxy'] = 306)] = 'SwitchProxy';
                e[(e['TemporaryRedirect'] = 307)] = 'TemporaryRedirect';
                e[(e['PermanentRedirect'] = 308)] = 'PermanentRedirect';
                e[(e['BadRequest'] = 400)] = 'BadRequest';
                e[(e['Unauthorized'] = 401)] = 'Unauthorized';
                e[(e['PaymentRequired'] = 402)] = 'PaymentRequired';
                e[(e['Forbidden'] = 403)] = 'Forbidden';
                e[(e['NotFound'] = 404)] = 'NotFound';
                e[(e['MethodNotAllowed'] = 405)] = 'MethodNotAllowed';
                e[(e['NotAcceptable'] = 406)] = 'NotAcceptable';
                e[(e['ProxyAuthenticationRequired'] = 407)] = 'ProxyAuthenticationRequired';
                e[(e['RequestTimeout'] = 408)] = 'RequestTimeout';
                e[(e['Conflict'] = 409)] = 'Conflict';
                e[(e['Gone'] = 410)] = 'Gone';
                e[(e['TooManyRequests'] = 429)] = 'TooManyRequests';
                e[(e['InternalServerError'] = 500)] = 'InternalServerError';
                e[(e['NotImplemented'] = 501)] = 'NotImplemented';
                e[(e['BadGateway'] = 502)] = 'BadGateway';
                e[(e['ServiceUnavailable'] = 503)] = 'ServiceUnavailable';
                e[(e['GatewayTimeout'] = 504)] = 'GatewayTimeout';
            })((n = t.HttpCodes || (t.HttpCodes = {})));
            var p;
            (function (e) {
                e['Accept'] = 'accept';
                e['ContentType'] = 'content-type';
            })((p = t.Headers || (t.Headers = {})));
            var d;
            (function (e) {
                e['ApplicationJson'] = 'application/json';
            })((d = t.MediaTypes || (t.MediaTypes = {})));
            function getProxyUrl(e) {
                let t = a.getProxyUrl(A.parse(e));
                return t ? t.href : '';
            }
            t.getProxyUrl = getProxyUrl;
            const l = [n.MovedPermanently, n.ResourceMoved, n.SeeOther, n.TemporaryRedirect, n.PermanentRedirect];
            const u = [n.BadGateway, n.ServiceUnavailable, n.GatewayTimeout];
            const c = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
            const g = 10;
            const m = 5;
            class HttpClientResponse {
                constructor(e) {
                    this.message = e;
                }
                readBody() {
                    return new Promise(async (e, t) => {
                        let r = Buffer.alloc(0);
                        this.message.on('data', (e) => {
                            r = Buffer.concat([r, e]);
                        });
                        this.message.on('end', () => {
                            e(r.toString());
                        });
                    });
                }
            }
            t.HttpClientResponse = HttpClientResponse;
            function isHttps(e) {
                let t = A.parse(e);
                return t.protocol === 'https:';
            }
            t.isHttps = isHttps;
            class HttpClient {
                constructor(e, t, r) {
                    this._ignoreSslError = false;
                    this._allowRedirects = true;
                    this._allowRedirectDowngrade = false;
                    this._maxRedirects = 50;
                    this._allowRetries = false;
                    this._maxRetries = 1;
                    this._keepAlive = false;
                    this._disposed = false;
                    this.userAgent = e;
                    this.handlers = t || [];
                    this.requestOptions = r;
                    if (r) {
                        if (r.ignoreSslError != null) {
                            this._ignoreSslError = r.ignoreSslError;
                        }
                        this._socketTimeout = r.socketTimeout;
                        if (r.allowRedirects != null) {
                            this._allowRedirects = r.allowRedirects;
                        }
                        if (r.allowRedirectDowngrade != null) {
                            this._allowRedirectDowngrade = r.allowRedirectDowngrade;
                        }
                        if (r.maxRedirects != null) {
                            this._maxRedirects = Math.max(r.maxRedirects, 0);
                        }
                        if (r.keepAlive != null) {
                            this._keepAlive = r.keepAlive;
                        }
                        if (r.allowRetries != null) {
                            this._allowRetries = r.allowRetries;
                        }
                        if (r.maxRetries != null) {
                            this._maxRetries = r.maxRetries;
                        }
                    }
                }
                options(e, t) {
                    return this.request('OPTIONS', e, null, t || {});
                }
                get(e, t) {
                    return this.request('GET', e, null, t || {});
                }
                del(e, t) {
                    return this.request('DELETE', e, null, t || {});
                }
                post(e, t, r) {
                    return this.request('POST', e, t, r || {});
                }
                patch(e, t, r) {
                    return this.request('PATCH', e, t, r || {});
                }
                put(e, t, r) {
                    return this.request('PUT', e, t, r || {});
                }
                head(e, t) {
                    return this.request('HEAD', e, null, t || {});
                }
                sendStream(e, t, r, A) {
                    return this.request(e, t, r, A);
                }
                async getJson(e, t = {}) {
                    t[p.Accept] = this._getExistingOrDefaultHeader(t, p.Accept, d.ApplicationJson);
                    let r = await this.get(e, t);
                    return this._processResponse(r, this.requestOptions);
                }
                async postJson(e, t, r = {}) {
                    let A = JSON.stringify(t, null, 2);
                    r[p.Accept] = this._getExistingOrDefaultHeader(r, p.Accept, d.ApplicationJson);
                    r[p.ContentType] = this._getExistingOrDefaultHeader(r, p.ContentType, d.ApplicationJson);
                    let i = await this.post(e, A, r);
                    return this._processResponse(i, this.requestOptions);
                }
                async putJson(e, t, r = {}) {
                    let A = JSON.stringify(t, null, 2);
                    r[p.Accept] = this._getExistingOrDefaultHeader(r, p.Accept, d.ApplicationJson);
                    r[p.ContentType] = this._getExistingOrDefaultHeader(r, p.ContentType, d.ApplicationJson);
                    let i = await this.put(e, A, r);
                    return this._processResponse(i, this.requestOptions);
                }
                async patchJson(e, t, r = {}) {
                    let A = JSON.stringify(t, null, 2);
                    r[p.Accept] = this._getExistingOrDefaultHeader(r, p.Accept, d.ApplicationJson);
                    r[p.ContentType] = this._getExistingOrDefaultHeader(r, p.ContentType, d.ApplicationJson);
                    let i = await this.patch(e, A, r);
                    return this._processResponse(i, this.requestOptions);
                }
                async request(e, t, r, i) {
                    if (this._disposed) {
                        throw new Error('Client has already been disposed.');
                    }
                    let s = A.parse(t);
                    let a = this._prepareRequest(e, s, i);
                    let o = this._allowRetries && c.indexOf(e) != -1 ? this._maxRetries + 1 : 1;
                    let p = 0;
                    let d;
                    while (p < o) {
                        d = await this.requestRaw(a, r);
                        if (d && d.message && d.message.statusCode === n.Unauthorized) {
                            let e;
                            for (let t = 0; t < this.handlers.length; t++) {
                                if (this.handlers[t].canHandleAuthentication(d)) {
                                    e = this.handlers[t];
                                    break;
                                }
                            }
                            if (e) {
                                return e.handleAuthentication(this, a, r);
                            } else {
                                return d;
                            }
                        }
                        let t = this._maxRedirects;
                        while (l.indexOf(d.message.statusCode) != -1 && this._allowRedirects && t > 0) {
                            const o = d.message.headers['location'];
                            if (!o) {
                                break;
                            }
                            let n = A.parse(o);
                            if (s.protocol == 'https:' && s.protocol != n.protocol && !this._allowRedirectDowngrade) {
                                throw new Error(
                                    'Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.',
                                );
                            }
                            await d.readBody();
                            if (n.hostname !== s.hostname) {
                                for (let e in i) {
                                    if (e.toLowerCase() === 'authorization') {
                                        delete i[e];
                                    }
                                }
                            }
                            a = this._prepareRequest(e, n, i);
                            d = await this.requestRaw(a, r);
                            t--;
                        }
                        if (u.indexOf(d.message.statusCode) == -1) {
                            return d;
                        }
                        p += 1;
                        if (p < o) {
                            await d.readBody();
                            await this._performExponentialBackoff(p);
                        }
                    }
                    return d;
                }
                dispose() {
                    if (this._agent) {
                        this._agent.destroy();
                    }
                    this._disposed = true;
                }
                requestRaw(e, t) {
                    return new Promise((r, A) => {
                        let callbackForResult = function (e, t) {
                            if (e) {
                                A(e);
                            }
                            r(t);
                        };
                        this.requestRawWithCallback(e, t, callbackForResult);
                    });
                }
                requestRawWithCallback(e, t, r) {
                    let A;
                    if (typeof t === 'string') {
                        e.options.headers['Content-Length'] = Buffer.byteLength(t, 'utf8');
                    }
                    let i = false;
                    let handleResult = (e, t) => {
                        if (!i) {
                            i = true;
                            r(e, t);
                        }
                    };
                    let s = e.httpModule.request(e.options, (e) => {
                        let t = new HttpClientResponse(e);
                        handleResult(null, t);
                    });
                    s.on('socket', (e) => {
                        A = e;
                    });
                    s.setTimeout(this._socketTimeout || 3 * 6e4, () => {
                        if (A) {
                            A.end();
                        }
                        handleResult(new Error('Request timeout: ' + e.options.path), null);
                    });
                    s.on('error', function (e) {
                        handleResult(e, null);
                    });
                    if (t && typeof t === 'string') {
                        s.write(t, 'utf8');
                    }
                    if (t && typeof t !== 'string') {
                        t.on('close', function () {
                            s.end();
                        });
                        t.pipe(s);
                    } else {
                        s.end();
                    }
                }
                getAgent(e) {
                    let t = A.parse(e);
                    return this._getAgent(t);
                }
                _prepareRequest(e, t, r) {
                    const A = {};
                    A.parsedUrl = t;
                    const a = A.parsedUrl.protocol === 'https:';
                    A.httpModule = a ? s : i;
                    const o = a ? 443 : 80;
                    A.options = {};
                    A.options.host = A.parsedUrl.hostname;
                    A.options.port = A.parsedUrl.port ? parseInt(A.parsedUrl.port) : o;
                    A.options.path = (A.parsedUrl.pathname || '') + (A.parsedUrl.search || '');
                    A.options.method = e;
                    A.options.headers = this._mergeHeaders(r);
                    if (this.userAgent != null) {
                        A.options.headers['user-agent'] = this.userAgent;
                    }
                    A.options.agent = this._getAgent(A.parsedUrl);
                    if (this.handlers) {
                        this.handlers.forEach((e) => {
                            e.prepareRequest(A.options);
                        });
                    }
                    return A;
                }
                _mergeHeaders(e) {
                    const lowercaseKeys = (e) => Object.keys(e).reduce((t, r) => ((t[r.toLowerCase()] = e[r]), t), {});
                    if (this.requestOptions && this.requestOptions.headers) {
                        return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(e));
                    }
                    return lowercaseKeys(e || {});
                }
                _getExistingOrDefaultHeader(e, t, r) {
                    const lowercaseKeys = (e) => Object.keys(e).reduce((t, r) => ((t[r.toLowerCase()] = e[r]), t), {});
                    let A;
                    if (this.requestOptions && this.requestOptions.headers) {
                        A = lowercaseKeys(this.requestOptions.headers)[t];
                    }
                    return e[t] || A || r;
                }
                _getAgent(e) {
                    let t;
                    let A = a.getProxyUrl(e);
                    let n = A && A.hostname;
                    if (this._keepAlive && n) {
                        t = this._proxyAgent;
                    }
                    if (this._keepAlive && !n) {
                        t = this._agent;
                    }
                    if (!!t) {
                        return t;
                    }
                    const p = e.protocol === 'https:';
                    let d = 100;
                    if (!!this.requestOptions) {
                        d = this.requestOptions.maxSockets || i.globalAgent.maxSockets;
                    }
                    if (n) {
                        if (!o) {
                            o = r(4294);
                        }
                        const e = {
                            maxSockets: d,
                            keepAlive: this._keepAlive,
                            proxy: {proxyAuth: A.auth, host: A.hostname, port: A.port},
                        };
                        let i;
                        const s = A.protocol === 'https:';
                        if (p) {
                            i = s ? o.httpsOverHttps : o.httpsOverHttp;
                        } else {
                            i = s ? o.httpOverHttps : o.httpOverHttp;
                        }
                        t = i(e);
                        this._proxyAgent = t;
                    }
                    if (this._keepAlive && !t) {
                        const e = {keepAlive: this._keepAlive, maxSockets: d};
                        t = p ? new s.Agent(e) : new i.Agent(e);
                        this._agent = t;
                    }
                    if (!t) {
                        t = p ? s.globalAgent : i.globalAgent;
                    }
                    if (p && this._ignoreSslError) {
                        t.options = Object.assign(t.options || {}, {rejectUnauthorized: false});
                    }
                    return t;
                }
                _performExponentialBackoff(e) {
                    e = Math.min(g, e);
                    const t = m * Math.pow(2, e);
                    return new Promise((e) => setTimeout(() => e(), t));
                }
                static dateTimeDeserializer(e, t) {
                    if (typeof t === 'string') {
                        let e = new Date(t);
                        if (!isNaN(e.valueOf())) {
                            return e;
                        }
                    }
                    return t;
                }
                async _processResponse(e, t) {
                    return new Promise(async (r, A) => {
                        const i = e.message.statusCode;
                        const s = {statusCode: i, result: null, headers: {}};
                        if (i == n.NotFound) {
                            r(s);
                        }
                        let a;
                        let o;
                        try {
                            o = await e.readBody();
                            if (o && o.length > 0) {
                                if (t && t.deserializeDates) {
                                    a = JSON.parse(o, HttpClient.dateTimeDeserializer);
                                } else {
                                    a = JSON.parse(o);
                                }
                                s.result = a;
                            }
                            s.headers = e.message.headers;
                        } catch (e) {}
                        if (i > 299) {
                            let e;
                            if (a && a.message) {
                                e = a.message;
                            } else if (o && o.length > 0) {
                                e = o;
                            } else {
                                e = 'Failed request: (' + i + ')';
                            }
                            let t = new Error(e);
                            t['statusCode'] = i;
                            if (s.result) {
                                t['result'] = s.result;
                            }
                            A(t);
                        } else {
                            r(s);
                        }
                    });
                }
            }
            t.HttpClient = HttpClient;
        },
        6443: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            const A = r(7310);
            function getProxyUrl(e) {
                let t = e.protocol === 'https:';
                let r;
                if (checkBypass(e)) {
                    return r;
                }
                let i;
                if (t) {
                    i = process.env['https_proxy'] || process.env['HTTPS_PROXY'];
                } else {
                    i = process.env['http_proxy'] || process.env['HTTP_PROXY'];
                }
                if (i) {
                    r = A.parse(i);
                }
                return r;
            }
            t.getProxyUrl = getProxyUrl;
            function checkBypass(e) {
                if (!e.hostname) {
                    return false;
                }
                let t = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
                if (!t) {
                    return false;
                }
                let r;
                if (e.port) {
                    r = Number(e.port);
                } else if (e.protocol === 'http:') {
                    r = 80;
                } else if (e.protocol === 'https:') {
                    r = 443;
                }
                let A = [e.hostname.toUpperCase()];
                if (typeof r === 'number') {
                    A.push(`${A[0]}:${r}`);
                }
                for (let e of t
                    .split(',')
                    .map((e) => e.trim().toUpperCase())
                    .filter((e) => e)) {
                    if (A.some((t) => t === e)) {
                        return true;
                    }
                }
                return false;
            }
            t.checkBypass = checkBypass;
        },
        334: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            async function auth(e) {
                const t = e.split(/\./).length === 3 ? 'app' : /^v\d+\./.test(e) ? 'installation' : 'oauth';
                return {type: 'token', token: e, tokenType: t};
            }
            function withAuthorizationPrefix(e) {
                if (e.split(/\./).length === 3) {
                    return `bearer ${e}`;
                }
                return `token ${e}`;
            }
            async function hook(e, t, r, A) {
                const i = t.endpoint.merge(r, A);
                i.headers.authorization = withAuthorizationPrefix(e);
                return t(i);
            }
            const r = function createTokenAuth(e) {
                if (!e) {
                    throw new Error('[@octokit/auth-token] No token passed to createTokenAuth');
                }
                if (typeof e !== 'string') {
                    throw new Error('[@octokit/auth-token] Token passed to createTokenAuth is not a string');
                }
                e = e.replace(/^(token|bearer) +/i, '');
                return Object.assign(auth.bind(null, e), {hook: hook.bind(null, e)});
            };
            t.createTokenAuth = r;
        },
        9440: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = _interopDefault(r(4038));
            var i = r(5030);
            function lowercaseKeys(e) {
                if (!e) {
                    return {};
                }
                return Object.keys(e).reduce((t, r) => {
                    t[r.toLowerCase()] = e[r];
                    return t;
                }, {});
            }
            function mergeDeep(e, t) {
                const r = Object.assign({}, e);
                Object.keys(t).forEach((i) => {
                    if (A(t[i])) {
                        if (!(i in e)) Object.assign(r, {[i]: t[i]});
                        else r[i] = mergeDeep(e[i], t[i]);
                    } else {
                        Object.assign(r, {[i]: t[i]});
                    }
                });
                return r;
            }
            function merge(e, t, r) {
                if (typeof t === 'string') {
                    let [e, A] = t.split(' ');
                    r = Object.assign(A ? {method: e, url: A} : {url: e}, r);
                } else {
                    r = Object.assign({}, t);
                }
                r.headers = lowercaseKeys(r.headers);
                const A = mergeDeep(e || {}, r);
                if (e && e.mediaType.previews.length) {
                    A.mediaType.previews = e.mediaType.previews
                        .filter((e) => !A.mediaType.previews.includes(e))
                        .concat(A.mediaType.previews);
                }
                A.mediaType.previews = A.mediaType.previews.map((e) => e.replace(/-preview/, ''));
                return A;
            }
            function addQueryParameters(e, t) {
                const r = /\?/.test(e) ? '&' : '?';
                const A = Object.keys(t);
                if (A.length === 0) {
                    return e;
                }
                return (
                    e +
                    r +
                    A.map((e) => {
                        if (e === 'q') {
                            return 'q=' + t.q.split('+').map(encodeURIComponent).join('+');
                        }
                        return `${e}=${encodeURIComponent(t[e])}`;
                    }).join('&')
                );
            }
            const s = /\{[^}]+\}/g;
            function removeNonChars(e) {
                return e.replace(/^\W+|\W+$/g, '').split(/,/);
            }
            function extractUrlVariableNames(e) {
                const t = e.match(s);
                if (!t) {
                    return [];
                }
                return t.map(removeNonChars).reduce((e, t) => e.concat(t), []);
            }
            function omit(e, t) {
                return Object.keys(e)
                    .filter((e) => !t.includes(e))
                    .reduce((t, r) => {
                        t[r] = e[r];
                        return t;
                    }, {});
            }
            function encodeReserved(e) {
                return e
                    .split(/(%[0-9A-Fa-f]{2})/g)
                    .map(function (e) {
                        if (!/%[0-9A-Fa-f]/.test(e)) {
                            e = encodeURI(e).replace(/%5B/g, '[').replace(/%5D/g, ']');
                        }
                        return e;
                    })
                    .join('');
            }
            function encodeUnreserved(e) {
                return encodeURIComponent(e).replace(/[!'()*]/g, function (e) {
                    return '%' + e.charCodeAt(0).toString(16).toUpperCase();
                });
            }
            function encodeValue(e, t, r) {
                t = e === '+' || e === '#' ? encodeReserved(t) : encodeUnreserved(t);
                if (r) {
                    return encodeUnreserved(r) + '=' + t;
                } else {
                    return t;
                }
            }
            function isDefined(e) {
                return e !== undefined && e !== null;
            }
            function isKeyOperator(e) {
                return e === ';' || e === '&' || e === '?';
            }
            function getValues(e, t, r, A) {
                var i = e[r],
                    s = [];
                if (isDefined(i) && i !== '') {
                    if (typeof i === 'string' || typeof i === 'number' || typeof i === 'boolean') {
                        i = i.toString();
                        if (A && A !== '*') {
                            i = i.substring(0, parseInt(A, 10));
                        }
                        s.push(encodeValue(t, i, isKeyOperator(t) ? r : ''));
                    } else {
                        if (A === '*') {
                            if (Array.isArray(i)) {
                                i.filter(isDefined).forEach(function (e) {
                                    s.push(encodeValue(t, e, isKeyOperator(t) ? r : ''));
                                });
                            } else {
                                Object.keys(i).forEach(function (e) {
                                    if (isDefined(i[e])) {
                                        s.push(encodeValue(t, i[e], e));
                                    }
                                });
                            }
                        } else {
                            const e = [];
                            if (Array.isArray(i)) {
                                i.filter(isDefined).forEach(function (r) {
                                    e.push(encodeValue(t, r));
                                });
                            } else {
                                Object.keys(i).forEach(function (r) {
                                    if (isDefined(i[r])) {
                                        e.push(encodeUnreserved(r));
                                        e.push(encodeValue(t, i[r].toString()));
                                    }
                                });
                            }
                            if (isKeyOperator(t)) {
                                s.push(encodeUnreserved(r) + '=' + e.join(','));
                            } else if (e.length !== 0) {
                                s.push(e.join(','));
                            }
                        }
                    }
                } else {
                    if (t === ';') {
                        if (isDefined(i)) {
                            s.push(encodeUnreserved(r));
                        }
                    } else if (i === '' && (t === '&' || t === '?')) {
                        s.push(encodeUnreserved(r) + '=');
                    } else if (i === '') {
                        s.push('');
                    }
                }
                return s;
            }
            function parseUrl(e) {
                return {expand: expand.bind(null, e)};
            }
            function expand(e, t) {
                var r = ['+', '#', '.', '/', ';', '?', '&'];
                return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (e, A, i) {
                    if (A) {
                        let e = '';
                        const i = [];
                        if (r.indexOf(A.charAt(0)) !== -1) {
                            e = A.charAt(0);
                            A = A.substr(1);
                        }
                        A.split(/,/g).forEach(function (r) {
                            var A = /([^:\*]*)(?::(\d+)|(\*))?/.exec(r);
                            i.push(getValues(t, e, A[1], A[2] || A[3]));
                        });
                        if (e && e !== '+') {
                            var s = ',';
                            if (e === '?') {
                                s = '&';
                            } else if (e !== '#') {
                                s = e;
                            }
                            return (i.length !== 0 ? e : '') + i.join(s);
                        } else {
                            return i.join(',');
                        }
                    } else {
                        return encodeReserved(i);
                    }
                });
            }
            function parse(e) {
                let t = e.method.toUpperCase();
                let r = (e.url || '/').replace(/:([a-z]\w+)/g, '{+$1}');
                let A = Object.assign({}, e.headers);
                let i;
                let s = omit(e, ['method', 'baseUrl', 'url', 'headers', 'request', 'mediaType']);
                const a = extractUrlVariableNames(r);
                r = parseUrl(r).expand(s);
                if (!/^http/.test(r)) {
                    r = e.baseUrl + r;
                }
                const o = Object.keys(e)
                    .filter((e) => a.includes(e))
                    .concat('baseUrl');
                const n = omit(s, o);
                const p = /application\/octet-stream/i.test(A.accept);
                if (!p) {
                    if (e.mediaType.format) {
                        A.accept = A.accept
                            .split(/,/)
                            .map((t) =>
                                t.replace(
                                    /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
                                    `application/vnd$1$2.${e.mediaType.format}`,
                                ),
                            )
                            .join(',');
                    }
                    if (e.mediaType.previews.length) {
                        const t = A.accept.match(/[\w-]+(?=-preview)/g) || [];
                        A.accept = t
                            .concat(e.mediaType.previews)
                            .map((t) => {
                                const r = e.mediaType.format ? `.${e.mediaType.format}` : '+json';
                                return `application/vnd.github.${t}-preview${r}`;
                            })
                            .join(',');
                    }
                }
                if (['GET', 'HEAD'].includes(t)) {
                    r = addQueryParameters(r, n);
                } else {
                    if ('data' in n) {
                        i = n.data;
                    } else {
                        if (Object.keys(n).length) {
                            i = n;
                        } else {
                            A['content-length'] = 0;
                        }
                    }
                }
                if (!A['content-type'] && typeof i !== 'undefined') {
                    A['content-type'] = 'application/json; charset=utf-8';
                }
                if (['PATCH', 'PUT'].includes(t) && typeof i === 'undefined') {
                    i = '';
                }
                return Object.assign(
                    {method: t, url: r, headers: A},
                    typeof i !== 'undefined' ? {body: i} : null,
                    e.request ? {request: e.request} : null,
                );
            }
            function endpointWithDefaults(e, t, r) {
                return parse(merge(e, t, r));
            }
            function withDefaults(e, t) {
                const r = merge(e, t);
                const A = endpointWithDefaults.bind(null, r);
                return Object.assign(A, {
                    DEFAULTS: r,
                    defaults: withDefaults.bind(null, r),
                    merge: merge.bind(null, r),
                    parse: parse,
                });
            }
            const a = '6.0.2';
            const o = `octokit-endpoint.js/${a} ${i.getUserAgent()}`;
            const n = {
                method: 'GET',
                baseUrl: 'https://api.github.com',
                headers: {accept: 'application/vnd.github.v3+json', 'user-agent': o},
                mediaType: {format: '', previews: []},
            };
            const p = withDefaults(null, n);
            t.endpoint = p;
        },
        4038: (e) => {
            'use strict';
            /*!
             * isobject <https://github.com/jonschlinkert/isobject>
             *
             * Copyright (c) 2014-2017, Jon Schlinkert.
             * Released under the MIT License.
             */ function isObject(e) {
                return e != null && typeof e === 'object' && Array.isArray(e) === false;
            }
            /*!
             * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
             *
             * Copyright (c) 2014-2017, Jon Schlinkert.
             * Released under the MIT License.
             */ function isObjectObject(e) {
                return isObject(e) === true && Object.prototype.toString.call(e) === '[object Object]';
            }
            function isPlainObject(e) {
                var t, r;
                if (isObjectObject(e) === false) return false;
                t = e.constructor;
                if (typeof t !== 'function') return false;
                r = t.prototype;
                if (isObjectObject(r) === false) return false;
                if (r.hasOwnProperty('isPrototypeOf') === false) {
                    return false;
                }
                return true;
            }
            e.exports = isPlainObject;
        },
        8467: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            var A = r(6234);
            var i = r(5030);
            const s = '4.5.0';
            class GraphqlError extends Error {
                constructor(e, t) {
                    const r = t.data.errors[0].message;
                    super(r);
                    Object.assign(this, t.data);
                    this.name = 'GraphqlError';
                    this.request = e;
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    }
                }
            }
            const a = ['method', 'baseUrl', 'url', 'headers', 'request', 'query', 'mediaType'];
            function graphql(e, t, r) {
                r = typeof t === 'string' ? (r = Object.assign({query: t}, r)) : (r = t);
                const A = Object.keys(r).reduce((e, t) => {
                    if (a.includes(t)) {
                        e[t] = r[t];
                        return e;
                    }
                    if (!e.variables) {
                        e.variables = {};
                    }
                    e.variables[t] = r[t];
                    return e;
                }, {});
                return e(A).then((e) => {
                    if (e.data.errors) {
                        throw new GraphqlError(A, {data: e.data});
                    }
                    return e.data.data;
                });
            }
            function withDefaults(e, t) {
                const r = e.defaults(t);
                const newApi = (e, t) => graphql(r, e, t);
                return Object.assign(newApi, {defaults: withDefaults.bind(null, r), endpoint: A.request.endpoint});
            }
            const o = withDefaults(A.request, {
                headers: {'user-agent': `octokit-graphql.js/${s} ${i.getUserAgent()}`},
                method: 'POST',
                url: '/graphql',
            });
            function withCustomRequest(e) {
                return withDefaults(e, {method: 'POST', url: '/graphql'});
            }
            t.graphql = o;
            t.withCustomRequest = withCustomRequest;
        },
        4193: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            const r = '1.1.2';
            const A = [
                /^\/search\//,
                /^\/repos\/[^/]+\/[^/]+\/commits\/[^/]+\/(check-runs|check-suites)([^/]|$)/,
                /^\/installation\/repositories([^/]|$)/,
                /^\/user\/installations([^/]|$)/,
                /^\/repos\/[^/]+\/[^/]+\/actions\/secrets([^/]|$)/,
                /^\/repos\/[^/]+\/[^/]+\/actions\/workflows(\/[^/]+\/runs)?([^/]|$)/,
                /^\/repos\/[^/]+\/[^/]+\/actions\/runs(\/[^/]+\/(artifacts|jobs))?([^/]|$)/,
            ];
            function normalizePaginatedListResponse(e, t, r) {
                const i = t.replace(e.request.endpoint.DEFAULTS.baseUrl, '');
                const s = A.find((e) => e.test(i));
                if (!s) return;
                const a = r.data.incomplete_results;
                const o = r.data.repository_selection;
                const n = r.data.total_count;
                delete r.data.incomplete_results;
                delete r.data.repository_selection;
                delete r.data.total_count;
                const p = Object.keys(r.data)[0];
                const d = r.data[p];
                r.data = d;
                if (typeof a !== 'undefined') {
                    r.data.incomplete_results = a;
                }
                if (typeof o !== 'undefined') {
                    r.data.repository_selection = o;
                }
                r.data.total_count = n;
                Object.defineProperty(r.data, p, {
                    get() {
                        e.log.warn(
                            `[@octokit/paginate-rest] "response.data.${p}" is deprecated for "GET ${i}". Get the results directly from "response.data"`,
                        );
                        return Array.from(d);
                    },
                });
            }
            function iterator(e, t, r) {
                const A = e.request.endpoint(t, r);
                const i = A.method;
                const s = A.headers;
                let a = A.url;
                return {
                    [Symbol.asyncIterator]: () => ({
                        next() {
                            if (!a) {
                                return Promise.resolve({done: true});
                            }
                            return e.request({method: i, url: a, headers: s}).then((t) => {
                                normalizePaginatedListResponse(e, a, t);
                                a = ((t.headers.link || '').match(/<([^>]+)>;\s*rel="next"/) || [])[1];
                                return {value: t};
                            });
                        },
                    }),
                };
            }
            function paginate(e, t, r, A) {
                if (typeof r === 'function') {
                    A = r;
                    r = undefined;
                }
                return gather(e, [], iterator(e, t, r)[Symbol.asyncIterator](), A);
            }
            function gather(e, t, r, A) {
                return r.next().then((i) => {
                    if (i.done) {
                        return t;
                    }
                    let s = false;
                    function done() {
                        s = true;
                    }
                    t = t.concat(A ? A(i.value, done) : i.value.data);
                    if (s) {
                        return t;
                    }
                    return gather(e, t, r, A);
                });
            }
            function paginateRest(e) {
                return {paginate: Object.assign(paginate.bind(null, e), {iterator: iterator.bind(null, e)})};
            }
            paginateRest.VERSION = r;
            t.paginateRest = paginateRest;
        },
        8883: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            const r = '1.0.0';
            function requestLog(e) {
                e.hook.wrap('request', (t, r) => {
                    e.log.debug('request', r);
                    const A = Date.now();
                    const i = e.request.endpoint.parse(r);
                    const s = i.url.replace(r.baseUrl, '');
                    return t(r)
                        .then((t) => {
                            e.log.info(`${i.method} ${s} - ${t.status} in ${Date.now() - A}ms`);
                            return t;
                        })
                        .catch((t) => {
                            e.log.info(`${i.method} ${s} - ${t.status} in ${Date.now() - A}ms`);
                            throw t;
                        });
                });
            }
            requestLog.VERSION = r;
            t.requestLog = requestLog;
        },
        3044: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            var A = r(8932);
            var i = {
                actions: {
                    cancelWorkflowRun: {
                        method: 'POST',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            run_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runs/:run_id/cancel',
                    },
                    createOrUpdateSecretForRepo: {
                        method: 'PUT',
                        params: {
                            encrypted_value: {type: 'string'},
                            key_id: {type: 'string'},
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/secrets/:name',
                    },
                    createRegistrationToken: {
                        method: 'POST',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/actions/runners/registration-token',
                    },
                    createRemoveToken: {
                        method: 'POST',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/actions/runners/remove-token',
                    },
                    deleteArtifact: {
                        method: 'DELETE',
                        params: {
                            artifact_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/artifacts/:artifact_id',
                    },
                    deleteSecretFromRepo: {
                        method: 'DELETE',
                        params: {
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/secrets/:name',
                    },
                    downloadArtifact: {
                        method: 'GET',
                        params: {
                            archive_format: {required: true, type: 'string'},
                            artifact_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format',
                    },
                    getArtifact: {
                        method: 'GET',
                        params: {
                            artifact_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/artifacts/:artifact_id',
                    },
                    getPublicKey: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/actions/secrets/public-key',
                    },
                    getSecret: {
                        method: 'GET',
                        params: {
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/secrets/:name',
                    },
                    getSelfHostedRunner: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            runner_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runners/:runner_id',
                    },
                    getWorkflow: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            workflow_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/workflows/:workflow_id',
                    },
                    getWorkflowJob: {
                        method: 'GET',
                        params: {
                            job_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/jobs/:job_id',
                    },
                    getWorkflowRun: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            run_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runs/:run_id',
                    },
                    listDownloadsForSelfHostedRunnerApplication: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/actions/runners/downloads',
                    },
                    listJobsForWorkflowRun: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            run_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runs/:run_id/jobs',
                    },
                    listRepoWorkflowRuns: {
                        method: 'GET',
                        params: {
                            actor: {type: 'string'},
                            branch: {type: 'string'},
                            event: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            status: {enum: ['completed', 'status', 'conclusion'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/runs',
                    },
                    listRepoWorkflows: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/workflows',
                    },
                    listSecretsForRepo: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/secrets',
                    },
                    listSelfHostedRunnersForRepo: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/runners',
                    },
                    listWorkflowJobLogs: {
                        method: 'GET',
                        params: {
                            job_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/actions/jobs/:job_id/logs',
                    },
                    listWorkflowRunArtifacts: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            run_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runs/:run_id/artifacts',
                    },
                    listWorkflowRunLogs: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            run_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runs/:run_id/logs',
                    },
                    listWorkflowRuns: {
                        method: 'GET',
                        params: {
                            actor: {type: 'string'},
                            branch: {type: 'string'},
                            event: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            status: {enum: ['completed', 'status', 'conclusion'], type: 'string'},
                            workflow_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/workflows/:workflow_id/runs',
                    },
                    reRunWorkflow: {
                        method: 'POST',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            run_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runs/:run_id/rerun',
                    },
                    removeSelfHostedRunner: {
                        method: 'DELETE',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            runner_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/actions/runners/:runner_id',
                    },
                },
                activity: {
                    checkStarringRepo: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/user/starred/:owner/:repo',
                    },
                    deleteRepoSubscription: {
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/subscription',
                    },
                    deleteThreadSubscription: {
                        method: 'DELETE',
                        params: {thread_id: {required: true, type: 'integer'}},
                        url: '/notifications/threads/:thread_id/subscription',
                    },
                    getRepoSubscription: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/subscription',
                    },
                    getThread: {
                        method: 'GET',
                        params: {thread_id: {required: true, type: 'integer'}},
                        url: '/notifications/threads/:thread_id',
                    },
                    getThreadSubscription: {
                        method: 'GET',
                        params: {thread_id: {required: true, type: 'integer'}},
                        url: '/notifications/threads/:thread_id/subscription',
                    },
                    listEventsForOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/events/orgs/:org',
                    },
                    listEventsForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/events',
                    },
                    listFeeds: {method: 'GET', params: {}, url: '/feeds'},
                    listNotifications: {
                        method: 'GET',
                        params: {
                            all: {type: 'boolean'},
                            before: {type: 'string'},
                            page: {type: 'integer'},
                            participating: {type: 'boolean'},
                            per_page: {type: 'integer'},
                            since: {type: 'string'},
                        },
                        url: '/notifications',
                    },
                    listNotificationsForRepo: {
                        method: 'GET',
                        params: {
                            all: {type: 'boolean'},
                            before: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            participating: {type: 'boolean'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/notifications',
                    },
                    listPublicEvents: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/events',
                    },
                    listPublicEventsForOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/events',
                    },
                    listPublicEventsForRepoNetwork: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/networks/:owner/:repo/events',
                    },
                    listPublicEventsForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/events/public',
                    },
                    listReceivedEventsForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/received_events',
                    },
                    listReceivedPublicEventsForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/received_events/public',
                    },
                    listRepoEvents: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/events',
                    },
                    listReposStarredByAuthenticatedUser: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/user/starred',
                    },
                    listReposStarredByUser: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/starred',
                    },
                    listReposWatchedByUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/subscriptions',
                    },
                    listStargazersForRepo: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/stargazers',
                    },
                    listWatchedReposForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/subscriptions',
                    },
                    listWatchersForRepo: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/subscribers',
                    },
                    markAsRead: {method: 'PUT', params: {last_read_at: {type: 'string'}}, url: '/notifications'},
                    markNotificationsAsReadForRepo: {
                        method: 'PUT',
                        params: {
                            last_read_at: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/notifications',
                    },
                    markThreadAsRead: {
                        method: 'PATCH',
                        params: {thread_id: {required: true, type: 'integer'}},
                        url: '/notifications/threads/:thread_id',
                    },
                    setRepoSubscription: {
                        method: 'PUT',
                        params: {
                            ignored: {type: 'boolean'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            subscribed: {type: 'boolean'},
                        },
                        url: '/repos/:owner/:repo/subscription',
                    },
                    setThreadSubscription: {
                        method: 'PUT',
                        params: {ignored: {type: 'boolean'}, thread_id: {required: true, type: 'integer'}},
                        url: '/notifications/threads/:thread_id/subscription',
                    },
                    starRepo: {
                        method: 'PUT',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/user/starred/:owner/:repo',
                    },
                    unstarRepo: {
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/user/starred/:owner/:repo',
                    },
                },
                apps: {
                    addRepoToInstallation: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'PUT',
                        params: {
                            installation_id: {required: true, type: 'integer'},
                            repository_id: {required: true, type: 'integer'},
                        },
                        url: '/user/installations/:installation_id/repositories/:repository_id',
                    },
                    checkAccountIsAssociatedWithAny: {
                        method: 'GET',
                        params: {account_id: {required: true, type: 'integer'}},
                        url: '/marketplace_listing/accounts/:account_id',
                    },
                    checkAccountIsAssociatedWithAnyStubbed: {
                        method: 'GET',
                        params: {account_id: {required: true, type: 'integer'}},
                        url: '/marketplace_listing/stubbed/accounts/:account_id',
                    },
                    checkAuthorization: {
                        deprecated:
                            'octokit.apps.checkAuthorization() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization',
                        method: 'GET',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/tokens/:access_token',
                    },
                    checkToken: {
                        headers: {accept: 'application/vnd.github.doctor-strange-preview+json'},
                        method: 'POST',
                        params: {access_token: {type: 'string'}, client_id: {required: true, type: 'string'}},
                        url: '/applications/:client_id/token',
                    },
                    createContentAttachment: {
                        headers: {accept: 'application/vnd.github.corsair-preview+json'},
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            content_reference_id: {required: true, type: 'integer'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/content_references/:content_reference_id/attachments',
                    },
                    createFromManifest: {
                        headers: {accept: 'application/vnd.github.fury-preview+json'},
                        method: 'POST',
                        params: {code: {required: true, type: 'string'}},
                        url: '/app-manifests/:code/conversions',
                    },
                    createInstallationToken: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'POST',
                        params: {
                            installation_id: {required: true, type: 'integer'},
                            permissions: {type: 'object'},
                            repository_ids: {type: 'integer[]'},
                        },
                        url: '/app/installations/:installation_id/access_tokens',
                    },
                    deleteAuthorization: {
                        headers: {accept: 'application/vnd.github.doctor-strange-preview+json'},
                        method: 'DELETE',
                        params: {access_token: {type: 'string'}, client_id: {required: true, type: 'string'}},
                        url: '/applications/:client_id/grant',
                    },
                    deleteInstallation: {
                        headers: {
                            accept:
                                'application/vnd.github.gambit-preview+json,application/vnd.github.machine-man-preview+json',
                        },
                        method: 'DELETE',
                        params: {installation_id: {required: true, type: 'integer'}},
                        url: '/app/installations/:installation_id',
                    },
                    deleteToken: {
                        headers: {accept: 'application/vnd.github.doctor-strange-preview+json'},
                        method: 'DELETE',
                        params: {access_token: {type: 'string'}, client_id: {required: true, type: 'string'}},
                        url: '/applications/:client_id/token',
                    },
                    findOrgInstallation: {
                        deprecated:
                            'octokit.apps.findOrgInstallation() has been renamed to octokit.apps.getOrgInstallation() (2019-04-10)',
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}},
                        url: '/orgs/:org/installation',
                    },
                    findRepoInstallation: {
                        deprecated:
                            'octokit.apps.findRepoInstallation() has been renamed to octokit.apps.getRepoInstallation() (2019-04-10)',
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/installation',
                    },
                    findUserInstallation: {
                        deprecated:
                            'octokit.apps.findUserInstallation() has been renamed to octokit.apps.getUserInstallation() (2019-04-10)',
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {username: {required: true, type: 'string'}},
                        url: '/users/:username/installation',
                    },
                    getAuthenticated: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {},
                        url: '/app',
                    },
                    getBySlug: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {app_slug: {required: true, type: 'string'}},
                        url: '/apps/:app_slug',
                    },
                    getInstallation: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {installation_id: {required: true, type: 'integer'}},
                        url: '/app/installations/:installation_id',
                    },
                    getOrgInstallation: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}},
                        url: '/orgs/:org/installation',
                    },
                    getRepoInstallation: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/installation',
                    },
                    getUserInstallation: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {username: {required: true, type: 'string'}},
                        url: '/users/:username/installation',
                    },
                    listAccountsUserOrOrgOnPlan: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            plan_id: {required: true, type: 'integer'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/marketplace_listing/plans/:plan_id/accounts',
                    },
                    listAccountsUserOrOrgOnPlanStubbed: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            plan_id: {required: true, type: 'integer'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/marketplace_listing/stubbed/plans/:plan_id/accounts',
                    },
                    listInstallationReposForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {
                            installation_id: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/user/installations/:installation_id/repositories',
                    },
                    listInstallations: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/app/installations',
                    },
                    listInstallationsForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/installations',
                    },
                    listMarketplacePurchasesForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/marketplace_purchases',
                    },
                    listMarketplacePurchasesForAuthenticatedUserStubbed: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/marketplace_purchases/stubbed',
                    },
                    listPlans: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/marketplace_listing/plans',
                    },
                    listPlansStubbed: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/marketplace_listing/stubbed/plans',
                    },
                    listRepos: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/installation/repositories',
                    },
                    removeRepoFromInstallation: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'DELETE',
                        params: {
                            installation_id: {required: true, type: 'integer'},
                            repository_id: {required: true, type: 'integer'},
                        },
                        url: '/user/installations/:installation_id/repositories/:repository_id',
                    },
                    resetAuthorization: {
                        deprecated:
                            'octokit.apps.resetAuthorization() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization',
                        method: 'POST',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/tokens/:access_token',
                    },
                    resetToken: {
                        headers: {accept: 'application/vnd.github.doctor-strange-preview+json'},
                        method: 'PATCH',
                        params: {access_token: {type: 'string'}, client_id: {required: true, type: 'string'}},
                        url: '/applications/:client_id/token',
                    },
                    revokeAuthorizationForApplication: {
                        deprecated:
                            'octokit.apps.revokeAuthorizationForApplication() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application',
                        method: 'DELETE',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/tokens/:access_token',
                    },
                    revokeGrantForApplication: {
                        deprecated:
                            'octokit.apps.revokeGrantForApplication() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application',
                        method: 'DELETE',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/grants/:access_token',
                    },
                    revokeInstallationToken: {
                        headers: {accept: 'application/vnd.github.gambit-preview+json'},
                        method: 'DELETE',
                        params: {},
                        url: '/installation/token',
                    },
                },
                checks: {
                    create: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'POST',
                        params: {
                            actions: {type: 'object[]'},
                            'actions[].description': {required: true, type: 'string'},
                            'actions[].identifier': {required: true, type: 'string'},
                            'actions[].label': {required: true, type: 'string'},
                            completed_at: {type: 'string'},
                            conclusion: {
                                enum: ['success', 'failure', 'neutral', 'cancelled', 'timed_out', 'action_required'],
                                type: 'string',
                            },
                            details_url: {type: 'string'},
                            external_id: {type: 'string'},
                            head_sha: {required: true, type: 'string'},
                            name: {required: true, type: 'string'},
                            output: {type: 'object'},
                            'output.annotations': {type: 'object[]'},
                            'output.annotations[].annotation_level': {
                                enum: ['notice', 'warning', 'failure'],
                                required: true,
                                type: 'string',
                            },
                            'output.annotations[].end_column': {type: 'integer'},
                            'output.annotations[].end_line': {required: true, type: 'integer'},
                            'output.annotations[].message': {required: true, type: 'string'},
                            'output.annotations[].path': {required: true, type: 'string'},
                            'output.annotations[].raw_details': {type: 'string'},
                            'output.annotations[].start_column': {type: 'integer'},
                            'output.annotations[].start_line': {required: true, type: 'integer'},
                            'output.annotations[].title': {type: 'string'},
                            'output.images': {type: 'object[]'},
                            'output.images[].alt': {required: true, type: 'string'},
                            'output.images[].caption': {type: 'string'},
                            'output.images[].image_url': {required: true, type: 'string'},
                            'output.summary': {required: true, type: 'string'},
                            'output.text': {type: 'string'},
                            'output.title': {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            started_at: {type: 'string'},
                            status: {enum: ['queued', 'in_progress', 'completed'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-runs',
                    },
                    createSuite: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'POST',
                        params: {
                            head_sha: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-suites',
                    },
                    get: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'GET',
                        params: {
                            check_run_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-runs/:check_run_id',
                    },
                    getSuite: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'GET',
                        params: {
                            check_suite_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-suites/:check_suite_id',
                    },
                    listAnnotations: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'GET',
                        params: {
                            check_run_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-runs/:check_run_id/annotations',
                    },
                    listForRef: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'GET',
                        params: {
                            check_name: {type: 'string'},
                            filter: {enum: ['latest', 'all'], type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            status: {enum: ['queued', 'in_progress', 'completed'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:ref/check-runs',
                    },
                    listForSuite: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'GET',
                        params: {
                            check_name: {type: 'string'},
                            check_suite_id: {required: true, type: 'integer'},
                            filter: {enum: ['latest', 'all'], type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            status: {enum: ['queued', 'in_progress', 'completed'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-suites/:check_suite_id/check-runs',
                    },
                    listSuitesForRef: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'GET',
                        params: {
                            app_id: {type: 'integer'},
                            check_name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:ref/check-suites',
                    },
                    rerequestSuite: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'POST',
                        params: {
                            check_suite_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-suites/:check_suite_id/rerequest',
                    },
                    setSuitesPreferences: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'PATCH',
                        params: {
                            auto_trigger_checks: {type: 'object[]'},
                            'auto_trigger_checks[].app_id': {required: true, type: 'integer'},
                            'auto_trigger_checks[].setting': {required: true, type: 'boolean'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-suites/preferences',
                    },
                    update: {
                        headers: {accept: 'application/vnd.github.antiope-preview+json'},
                        method: 'PATCH',
                        params: {
                            actions: {type: 'object[]'},
                            'actions[].description': {required: true, type: 'string'},
                            'actions[].identifier': {required: true, type: 'string'},
                            'actions[].label': {required: true, type: 'string'},
                            check_run_id: {required: true, type: 'integer'},
                            completed_at: {type: 'string'},
                            conclusion: {
                                enum: ['success', 'failure', 'neutral', 'cancelled', 'timed_out', 'action_required'],
                                type: 'string',
                            },
                            details_url: {type: 'string'},
                            external_id: {type: 'string'},
                            name: {type: 'string'},
                            output: {type: 'object'},
                            'output.annotations': {type: 'object[]'},
                            'output.annotations[].annotation_level': {
                                enum: ['notice', 'warning', 'failure'],
                                required: true,
                                type: 'string',
                            },
                            'output.annotations[].end_column': {type: 'integer'},
                            'output.annotations[].end_line': {required: true, type: 'integer'},
                            'output.annotations[].message': {required: true, type: 'string'},
                            'output.annotations[].path': {required: true, type: 'string'},
                            'output.annotations[].raw_details': {type: 'string'},
                            'output.annotations[].start_column': {type: 'integer'},
                            'output.annotations[].start_line': {required: true, type: 'integer'},
                            'output.annotations[].title': {type: 'string'},
                            'output.images': {type: 'object[]'},
                            'output.images[].alt': {required: true, type: 'string'},
                            'output.images[].caption': {type: 'string'},
                            'output.images[].image_url': {required: true, type: 'string'},
                            'output.summary': {required: true, type: 'string'},
                            'output.text': {type: 'string'},
                            'output.title': {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            started_at: {type: 'string'},
                            status: {enum: ['queued', 'in_progress', 'completed'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/check-runs/:check_run_id',
                    },
                },
                codesOfConduct: {
                    getConductCode: {
                        headers: {accept: 'application/vnd.github.scarlet-witch-preview+json'},
                        method: 'GET',
                        params: {key: {required: true, type: 'string'}},
                        url: '/codes_of_conduct/:key',
                    },
                    getForRepo: {
                        headers: {accept: 'application/vnd.github.scarlet-witch-preview+json'},
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/community/code_of_conduct',
                    },
                    listConductCodes: {
                        headers: {accept: 'application/vnd.github.scarlet-witch-preview+json'},
                        method: 'GET',
                        params: {},
                        url: '/codes_of_conduct',
                    },
                },
                emojis: {get: {method: 'GET', params: {}, url: '/emojis'}},
                gists: {
                    checkIsStarred: {
                        method: 'GET',
                        params: {gist_id: {required: true, type: 'string'}},
                        url: '/gists/:gist_id/star',
                    },
                    create: {
                        method: 'POST',
                        params: {
                            description: {type: 'string'},
                            files: {required: true, type: 'object'},
                            'files.content': {type: 'string'},
                            public: {type: 'boolean'},
                        },
                        url: '/gists',
                    },
                    createComment: {
                        method: 'POST',
                        params: {body: {required: true, type: 'string'}, gist_id: {required: true, type: 'string'}},
                        url: '/gists/:gist_id/comments',
                    },
                    delete: {
                        method: 'DELETE',
                        params: {gist_id: {required: true, type: 'string'}},
                        url: '/gists/:gist_id',
                    },
                    deleteComment: {
                        method: 'DELETE',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            gist_id: {required: true, type: 'string'},
                        },
                        url: '/gists/:gist_id/comments/:comment_id',
                    },
                    fork: {
                        method: 'POST',
                        params: {gist_id: {required: true, type: 'string'}},
                        url: '/gists/:gist_id/forks',
                    },
                    get: {method: 'GET', params: {gist_id: {required: true, type: 'string'}}, url: '/gists/:gist_id'},
                    getComment: {
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            gist_id: {required: true, type: 'string'},
                        },
                        url: '/gists/:gist_id/comments/:comment_id',
                    },
                    getRevision: {
                        method: 'GET',
                        params: {gist_id: {required: true, type: 'string'}, sha: {required: true, type: 'string'}},
                        url: '/gists/:gist_id/:sha',
                    },
                    list: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}, since: {type: 'string'}},
                        url: '/gists',
                    },
                    listComments: {
                        method: 'GET',
                        params: {
                            gist_id: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/gists/:gist_id/comments',
                    },
                    listCommits: {
                        method: 'GET',
                        params: {
                            gist_id: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/gists/:gist_id/commits',
                    },
                    listForks: {
                        method: 'GET',
                        params: {
                            gist_id: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/gists/:gist_id/forks',
                    },
                    listPublic: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}, since: {type: 'string'}},
                        url: '/gists/public',
                    },
                    listPublicForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            since: {type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/gists',
                    },
                    listStarred: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}, since: {type: 'string'}},
                        url: '/gists/starred',
                    },
                    star: {
                        method: 'PUT',
                        params: {gist_id: {required: true, type: 'string'}},
                        url: '/gists/:gist_id/star',
                    },
                    unstar: {
                        method: 'DELETE',
                        params: {gist_id: {required: true, type: 'string'}},
                        url: '/gists/:gist_id/star',
                    },
                    update: {
                        method: 'PATCH',
                        params: {
                            description: {type: 'string'},
                            files: {type: 'object'},
                            'files.content': {type: 'string'},
                            'files.filename': {type: 'string'},
                            gist_id: {required: true, type: 'string'},
                        },
                        url: '/gists/:gist_id',
                    },
                    updateComment: {
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_id: {required: true, type: 'integer'},
                            gist_id: {required: true, type: 'string'},
                        },
                        url: '/gists/:gist_id/comments/:comment_id',
                    },
                },
                git: {
                    createBlob: {
                        method: 'POST',
                        params: {
                            content: {required: true, type: 'string'},
                            encoding: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/blobs',
                    },
                    createCommit: {
                        method: 'POST',
                        params: {
                            author: {type: 'object'},
                            'author.date': {type: 'string'},
                            'author.email': {type: 'string'},
                            'author.name': {type: 'string'},
                            committer: {type: 'object'},
                            'committer.date': {type: 'string'},
                            'committer.email': {type: 'string'},
                            'committer.name': {type: 'string'},
                            message: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            parents: {required: true, type: 'string[]'},
                            repo: {required: true, type: 'string'},
                            signature: {type: 'string'},
                            tree: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/commits',
                    },
                    createRef: {
                        method: 'POST',
                        params: {
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/refs',
                    },
                    createTag: {
                        method: 'POST',
                        params: {
                            message: {required: true, type: 'string'},
                            object: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            tag: {required: true, type: 'string'},
                            tagger: {type: 'object'},
                            'tagger.date': {type: 'string'},
                            'tagger.email': {type: 'string'},
                            'tagger.name': {type: 'string'},
                            type: {enum: ['commit', 'tree', 'blob'], required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/tags',
                    },
                    createTree: {
                        method: 'POST',
                        params: {
                            base_tree: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            tree: {required: true, type: 'object[]'},
                            'tree[].content': {type: 'string'},
                            'tree[].mode': {enum: ['100644', '100755', '040000', '160000', '120000'], type: 'string'},
                            'tree[].path': {type: 'string'},
                            'tree[].sha': {allowNull: true, type: 'string'},
                            'tree[].type': {enum: ['blob', 'tree', 'commit'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/trees',
                    },
                    deleteRef: {
                        method: 'DELETE',
                        params: {
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/refs/:ref',
                    },
                    getBlob: {
                        method: 'GET',
                        params: {
                            file_sha: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/blobs/:file_sha',
                    },
                    getCommit: {
                        method: 'GET',
                        params: {
                            commit_sha: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/commits/:commit_sha',
                    },
                    getRef: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/ref/:ref',
                    },
                    getTag: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            tag_sha: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/tags/:tag_sha',
                    },
                    getTree: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            recursive: {enum: ['1'], type: 'integer'},
                            repo: {required: true, type: 'string'},
                            tree_sha: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/trees/:tree_sha',
                    },
                    listMatchingRefs: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/matching-refs/:ref',
                    },
                    listRefs: {
                        method: 'GET',
                        params: {
                            namespace: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/refs/:namespace',
                    },
                    updateRef: {
                        method: 'PATCH',
                        params: {
                            force: {type: 'boolean'},
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/git/refs/:ref',
                    },
                },
                gitignore: {
                    getTemplate: {
                        method: 'GET',
                        params: {name: {required: true, type: 'string'}},
                        url: '/gitignore/templates/:name',
                    },
                    listTemplates: {method: 'GET', params: {}, url: '/gitignore/templates'},
                },
                interactions: {
                    addOrUpdateRestrictionsForOrg: {
                        headers: {accept: 'application/vnd.github.sombra-preview+json'},
                        method: 'PUT',
                        params: {
                            limit: {
                                enum: ['existing_users', 'contributors_only', 'collaborators_only'],
                                required: true,
                                type: 'string',
                            },
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/interaction-limits',
                    },
                    addOrUpdateRestrictionsForRepo: {
                        headers: {accept: 'application/vnd.github.sombra-preview+json'},
                        method: 'PUT',
                        params: {
                            limit: {
                                enum: ['existing_users', 'contributors_only', 'collaborators_only'],
                                required: true,
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/interaction-limits',
                    },
                    getRestrictionsForOrg: {
                        headers: {accept: 'application/vnd.github.sombra-preview+json'},
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}},
                        url: '/orgs/:org/interaction-limits',
                    },
                    getRestrictionsForRepo: {
                        headers: {accept: 'application/vnd.github.sombra-preview+json'},
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/interaction-limits',
                    },
                    removeRestrictionsForOrg: {
                        headers: {accept: 'application/vnd.github.sombra-preview+json'},
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}},
                        url: '/orgs/:org/interaction-limits',
                    },
                    removeRestrictionsForRepo: {
                        headers: {accept: 'application/vnd.github.sombra-preview+json'},
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/interaction-limits',
                    },
                },
                issues: {
                    addAssignees: {
                        method: 'POST',
                        params: {
                            assignees: {type: 'string[]'},
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/assignees',
                    },
                    addLabels: {
                        method: 'POST',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            labels: {required: true, type: 'string[]'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/labels',
                    },
                    checkAssignee: {
                        method: 'GET',
                        params: {
                            assignee: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/assignees/:assignee',
                    },
                    create: {
                        method: 'POST',
                        params: {
                            assignee: {type: 'string'},
                            assignees: {type: 'string[]'},
                            body: {type: 'string'},
                            labels: {type: 'string[]'},
                            milestone: {type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues',
                    },
                    createComment: {
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/comments',
                    },
                    createLabel: {
                        method: 'POST',
                        params: {
                            color: {required: true, type: 'string'},
                            description: {type: 'string'},
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/labels',
                    },
                    createMilestone: {
                        method: 'POST',
                        params: {
                            description: {type: 'string'},
                            due_on: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            state: {enum: ['open', 'closed'], type: 'string'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/milestones',
                    },
                    deleteComment: {
                        method: 'DELETE',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/comments/:comment_id',
                    },
                    deleteLabel: {
                        method: 'DELETE',
                        params: {
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/labels/:name',
                    },
                    deleteMilestone: {
                        method: 'DELETE',
                        params: {
                            milestone_number: {required: true, type: 'integer'},
                            number: {alias: 'milestone_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/milestones/:milestone_number',
                    },
                    get: {
                        method: 'GET',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number',
                    },
                    getComment: {
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/comments/:comment_id',
                    },
                    getEvent: {
                        method: 'GET',
                        params: {
                            event_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/events/:event_id',
                    },
                    getLabel: {
                        method: 'GET',
                        params: {
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/labels/:name',
                    },
                    getMilestone: {
                        method: 'GET',
                        params: {
                            milestone_number: {required: true, type: 'integer'},
                            number: {alias: 'milestone_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/milestones/:milestone_number',
                    },
                    list: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            filter: {enum: ['assigned', 'created', 'mentioned', 'subscribed', 'all'], type: 'string'},
                            labels: {type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated', 'comments'], type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/issues',
                    },
                    listAssignees: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/assignees',
                    },
                    listComments: {
                        method: 'GET',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/comments',
                    },
                    listCommentsForRepo: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/comments',
                    },
                    listEvents: {
                        method: 'GET',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/events',
                    },
                    listEventsForRepo: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/events',
                    },
                    listEventsForTimeline: {
                        headers: {accept: 'application/vnd.github.mockingbird-preview+json'},
                        method: 'GET',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/timeline',
                    },
                    listForAuthenticatedUser: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            filter: {enum: ['assigned', 'created', 'mentioned', 'subscribed', 'all'], type: 'string'},
                            labels: {type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated', 'comments'], type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/user/issues',
                    },
                    listForOrg: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            filter: {enum: ['assigned', 'created', 'mentioned', 'subscribed', 'all'], type: 'string'},
                            labels: {type: 'string'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated', 'comments'], type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/orgs/:org/issues',
                    },
                    listForRepo: {
                        method: 'GET',
                        params: {
                            assignee: {type: 'string'},
                            creator: {type: 'string'},
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            labels: {type: 'string'},
                            mentioned: {type: 'string'},
                            milestone: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated', 'comments'], type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues',
                    },
                    listLabelsForMilestone: {
                        method: 'GET',
                        params: {
                            milestone_number: {required: true, type: 'integer'},
                            number: {alias: 'milestone_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/milestones/:milestone_number/labels',
                    },
                    listLabelsForRepo: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/labels',
                    },
                    listLabelsOnIssue: {
                        method: 'GET',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/labels',
                    },
                    listMilestonesForRepo: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            sort: {enum: ['due_on', 'completeness'], type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/milestones',
                    },
                    lock: {
                        method: 'PUT',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            lock_reason: {enum: ['off-topic', 'too heated', 'resolved', 'spam'], type: 'string'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/lock',
                    },
                    removeAssignees: {
                        method: 'DELETE',
                        params: {
                            assignees: {type: 'string[]'},
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/assignees',
                    },
                    removeLabel: {
                        method: 'DELETE',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            name: {required: true, type: 'string'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/labels/:name',
                    },
                    removeLabels: {
                        method: 'DELETE',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/labels',
                    },
                    replaceLabels: {
                        method: 'PUT',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            labels: {type: 'string[]'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/labels',
                    },
                    unlock: {
                        method: 'DELETE',
                        params: {
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/lock',
                    },
                    update: {
                        method: 'PATCH',
                        params: {
                            assignee: {type: 'string'},
                            assignees: {type: 'string[]'},
                            body: {type: 'string'},
                            issue_number: {required: true, type: 'integer'},
                            labels: {type: 'string[]'},
                            milestone: {allowNull: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            state: {enum: ['open', 'closed'], type: 'string'},
                            title: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number',
                    },
                    updateComment: {
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/comments/:comment_id',
                    },
                    updateLabel: {
                        method: 'PATCH',
                        params: {
                            color: {type: 'string'},
                            current_name: {required: true, type: 'string'},
                            description: {type: 'string'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/labels/:current_name',
                    },
                    updateMilestone: {
                        method: 'PATCH',
                        params: {
                            description: {type: 'string'},
                            due_on: {type: 'string'},
                            milestone_number: {required: true, type: 'integer'},
                            number: {alias: 'milestone_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            state: {enum: ['open', 'closed'], type: 'string'},
                            title: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/milestones/:milestone_number',
                    },
                },
                licenses: {
                    get: {
                        method: 'GET',
                        params: {license: {required: true, type: 'string'}},
                        url: '/licenses/:license',
                    },
                    getForRepo: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/license',
                    },
                    list: {
                        deprecated:
                            'octokit.licenses.list() has been renamed to octokit.licenses.listCommonlyUsed() (2019-03-05)',
                        method: 'GET',
                        params: {},
                        url: '/licenses',
                    },
                    listCommonlyUsed: {method: 'GET', params: {}, url: '/licenses'},
                },
                markdown: {
                    render: {
                        method: 'POST',
                        params: {
                            context: {type: 'string'},
                            mode: {enum: ['markdown', 'gfm'], type: 'string'},
                            text: {required: true, type: 'string'},
                        },
                        url: '/markdown',
                    },
                    renderRaw: {
                        headers: {'content-type': 'text/plain; charset=utf-8'},
                        method: 'POST',
                        params: {data: {mapTo: 'data', required: true, type: 'string'}},
                        url: '/markdown/raw',
                    },
                },
                meta: {get: {method: 'GET', params: {}, url: '/meta'}},
                migrations: {
                    cancelImport: {
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/import',
                    },
                    deleteArchiveForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'DELETE',
                        params: {migration_id: {required: true, type: 'integer'}},
                        url: '/user/migrations/:migration_id/archive',
                    },
                    deleteArchiveForOrg: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'DELETE',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/migrations/:migration_id/archive',
                    },
                    downloadArchiveForOrg: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/migrations/:migration_id/archive',
                    },
                    getArchiveForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {migration_id: {required: true, type: 'integer'}},
                        url: '/user/migrations/:migration_id/archive',
                    },
                    getArchiveForOrg: {
                        deprecated:
                            'octokit.migrations.getArchiveForOrg() has been renamed to octokit.migrations.downloadArchiveForOrg() (2020-01-27)',
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/migrations/:migration_id/archive',
                    },
                    getCommitAuthors: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/import/authors',
                    },
                    getImportProgress: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/import',
                    },
                    getLargeFiles: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/import/large_files',
                    },
                    getStatusForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {migration_id: {required: true, type: 'integer'}},
                        url: '/user/migrations/:migration_id',
                    },
                    getStatusForOrg: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/migrations/:migration_id',
                    },
                    listForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/migrations',
                    },
                    listForOrg: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/migrations',
                    },
                    listReposForOrg: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/migrations/:migration_id/repositories',
                    },
                    listReposForUser: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'GET',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/user/:migration_id/repositories',
                    },
                    mapCommitAuthor: {
                        method: 'PATCH',
                        params: {
                            author_id: {required: true, type: 'integer'},
                            email: {type: 'string'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/import/authors/:author_id',
                    },
                    setLfsPreference: {
                        method: 'PATCH',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            use_lfs: {enum: ['opt_in', 'opt_out'], required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/import/lfs',
                    },
                    startForAuthenticatedUser: {
                        method: 'POST',
                        params: {
                            exclude_attachments: {type: 'boolean'},
                            lock_repositories: {type: 'boolean'},
                            repositories: {required: true, type: 'string[]'},
                        },
                        url: '/user/migrations',
                    },
                    startForOrg: {
                        method: 'POST',
                        params: {
                            exclude_attachments: {type: 'boolean'},
                            lock_repositories: {type: 'boolean'},
                            org: {required: true, type: 'string'},
                            repositories: {required: true, type: 'string[]'},
                        },
                        url: '/orgs/:org/migrations',
                    },
                    startImport: {
                        method: 'PUT',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            tfvc_project: {type: 'string'},
                            vcs: {enum: ['subversion', 'git', 'mercurial', 'tfvc'], type: 'string'},
                            vcs_password: {type: 'string'},
                            vcs_url: {required: true, type: 'string'},
                            vcs_username: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/import',
                    },
                    unlockRepoForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'DELETE',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            repo_name: {required: true, type: 'string'},
                        },
                        url: '/user/migrations/:migration_id/repos/:repo_name/lock',
                    },
                    unlockRepoForOrg: {
                        headers: {accept: 'application/vnd.github.wyandotte-preview+json'},
                        method: 'DELETE',
                        params: {
                            migration_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            repo_name: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/migrations/:migration_id/repos/:repo_name/lock',
                    },
                    updateImport: {
                        method: 'PATCH',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            vcs_password: {type: 'string'},
                            vcs_username: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/import',
                    },
                },
                oauthAuthorizations: {
                    checkAuthorization: {
                        deprecated:
                            'octokit.oauthAuthorizations.checkAuthorization() has been renamed to octokit.apps.checkAuthorization() (2019-11-05)',
                        method: 'GET',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/tokens/:access_token',
                    },
                    createAuthorization: {
                        deprecated:
                            'octokit.oauthAuthorizations.createAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization',
                        method: 'POST',
                        params: {
                            client_id: {type: 'string'},
                            client_secret: {type: 'string'},
                            fingerprint: {type: 'string'},
                            note: {required: true, type: 'string'},
                            note_url: {type: 'string'},
                            scopes: {type: 'string[]'},
                        },
                        url: '/authorizations',
                    },
                    deleteAuthorization: {
                        deprecated:
                            'octokit.oauthAuthorizations.deleteAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization',
                        method: 'DELETE',
                        params: {authorization_id: {required: true, type: 'integer'}},
                        url: '/authorizations/:authorization_id',
                    },
                    deleteGrant: {
                        deprecated:
                            'octokit.oauthAuthorizations.deleteGrant() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#delete-a-grant',
                        method: 'DELETE',
                        params: {grant_id: {required: true, type: 'integer'}},
                        url: '/applications/grants/:grant_id',
                    },
                    getAuthorization: {
                        deprecated:
                            'octokit.oauthAuthorizations.getAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization',
                        method: 'GET',
                        params: {authorization_id: {required: true, type: 'integer'}},
                        url: '/authorizations/:authorization_id',
                    },
                    getGrant: {
                        deprecated:
                            'octokit.oauthAuthorizations.getGrant() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant',
                        method: 'GET',
                        params: {grant_id: {required: true, type: 'integer'}},
                        url: '/applications/grants/:grant_id',
                    },
                    getOrCreateAuthorizationForApp: {
                        deprecated:
                            'octokit.oauthAuthorizations.getOrCreateAuthorizationForApp() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app',
                        method: 'PUT',
                        params: {
                            client_id: {required: true, type: 'string'},
                            client_secret: {required: true, type: 'string'},
                            fingerprint: {type: 'string'},
                            note: {type: 'string'},
                            note_url: {type: 'string'},
                            scopes: {type: 'string[]'},
                        },
                        url: '/authorizations/clients/:client_id',
                    },
                    getOrCreateAuthorizationForAppAndFingerprint: {
                        deprecated:
                            'octokit.oauthAuthorizations.getOrCreateAuthorizationForAppAndFingerprint() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint',
                        method: 'PUT',
                        params: {
                            client_id: {required: true, type: 'string'},
                            client_secret: {required: true, type: 'string'},
                            fingerprint: {required: true, type: 'string'},
                            note: {type: 'string'},
                            note_url: {type: 'string'},
                            scopes: {type: 'string[]'},
                        },
                        url: '/authorizations/clients/:client_id/:fingerprint',
                    },
                    getOrCreateAuthorizationForAppFingerprint: {
                        deprecated:
                            'octokit.oauthAuthorizations.getOrCreateAuthorizationForAppFingerprint() has been renamed to octokit.oauthAuthorizations.getOrCreateAuthorizationForAppAndFingerprint() (2018-12-27)',
                        method: 'PUT',
                        params: {
                            client_id: {required: true, type: 'string'},
                            client_secret: {required: true, type: 'string'},
                            fingerprint: {required: true, type: 'string'},
                            note: {type: 'string'},
                            note_url: {type: 'string'},
                            scopes: {type: 'string[]'},
                        },
                        url: '/authorizations/clients/:client_id/:fingerprint',
                    },
                    listAuthorizations: {
                        deprecated:
                            'octokit.oauthAuthorizations.listAuthorizations() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations',
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/authorizations',
                    },
                    listGrants: {
                        deprecated:
                            'octokit.oauthAuthorizations.listGrants() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#list-your-grants',
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/applications/grants',
                    },
                    resetAuthorization: {
                        deprecated:
                            'octokit.oauthAuthorizations.resetAuthorization() has been renamed to octokit.apps.resetAuthorization() (2019-11-05)',
                        method: 'POST',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/tokens/:access_token',
                    },
                    revokeAuthorizationForApplication: {
                        deprecated:
                            'octokit.oauthAuthorizations.revokeAuthorizationForApplication() has been renamed to octokit.apps.revokeAuthorizationForApplication() (2019-11-05)',
                        method: 'DELETE',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/tokens/:access_token',
                    },
                    revokeGrantForApplication: {
                        deprecated:
                            'octokit.oauthAuthorizations.revokeGrantForApplication() has been renamed to octokit.apps.revokeGrantForApplication() (2019-11-05)',
                        method: 'DELETE',
                        params: {
                            access_token: {required: true, type: 'string'},
                            client_id: {required: true, type: 'string'},
                        },
                        url: '/applications/:client_id/grants/:access_token',
                    },
                    updateAuthorization: {
                        deprecated:
                            'octokit.oauthAuthorizations.updateAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization',
                        method: 'PATCH',
                        params: {
                            add_scopes: {type: 'string[]'},
                            authorization_id: {required: true, type: 'integer'},
                            fingerprint: {type: 'string'},
                            note: {type: 'string'},
                            note_url: {type: 'string'},
                            remove_scopes: {type: 'string[]'},
                            scopes: {type: 'string[]'},
                        },
                        url: '/authorizations/:authorization_id',
                    },
                },
                orgs: {
                    addOrUpdateMembership: {
                        method: 'PUT',
                        params: {
                            org: {required: true, type: 'string'},
                            role: {enum: ['admin', 'member'], type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/memberships/:username',
                    },
                    blockUser: {
                        method: 'PUT',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/blocks/:username',
                    },
                    checkBlockedUser: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/blocks/:username',
                    },
                    checkMembership: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/members/:username',
                    },
                    checkPublicMembership: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/public_members/:username',
                    },
                    concealMembership: {
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/public_members/:username',
                    },
                    convertMemberToOutsideCollaborator: {
                        method: 'PUT',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/outside_collaborators/:username',
                    },
                    createHook: {
                        method: 'POST',
                        params: {
                            active: {type: 'boolean'},
                            config: {required: true, type: 'object'},
                            'config.content_type': {type: 'string'},
                            'config.insecure_ssl': {type: 'string'},
                            'config.secret': {type: 'string'},
                            'config.url': {required: true, type: 'string'},
                            events: {type: 'string[]'},
                            name: {required: true, type: 'string'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/hooks',
                    },
                    createInvitation: {
                        method: 'POST',
                        params: {
                            email: {type: 'string'},
                            invitee_id: {type: 'integer'},
                            org: {required: true, type: 'string'},
                            role: {enum: ['admin', 'direct_member', 'billing_manager'], type: 'string'},
                            team_ids: {type: 'integer[]'},
                        },
                        url: '/orgs/:org/invitations',
                    },
                    deleteHook: {
                        method: 'DELETE',
                        params: {hook_id: {required: true, type: 'integer'}, org: {required: true, type: 'string'}},
                        url: '/orgs/:org/hooks/:hook_id',
                    },
                    get: {method: 'GET', params: {org: {required: true, type: 'string'}}, url: '/orgs/:org'},
                    getHook: {
                        method: 'GET',
                        params: {hook_id: {required: true, type: 'integer'}, org: {required: true, type: 'string'}},
                        url: '/orgs/:org/hooks/:hook_id',
                    },
                    getMembership: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/memberships/:username',
                    },
                    getMembershipForAuthenticatedUser: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}},
                        url: '/user/memberships/orgs/:org',
                    },
                    list: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}, since: {type: 'integer'}},
                        url: '/organizations',
                    },
                    listBlockedUsers: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}},
                        url: '/orgs/:org/blocks',
                    },
                    listForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/orgs',
                    },
                    listForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/orgs',
                    },
                    listHooks: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/hooks',
                    },
                    listInstallations: {
                        headers: {accept: 'application/vnd.github.machine-man-preview+json'},
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/installations',
                    },
                    listInvitationTeams: {
                        method: 'GET',
                        params: {
                            invitation_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/invitations/:invitation_id/teams',
                    },
                    listMembers: {
                        method: 'GET',
                        params: {
                            filter: {enum: ['2fa_disabled', 'all'], type: 'string'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            role: {enum: ['all', 'admin', 'member'], type: 'string'},
                        },
                        url: '/orgs/:org/members',
                    },
                    listMemberships: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            state: {enum: ['active', 'pending'], type: 'string'},
                        },
                        url: '/user/memberships/orgs',
                    },
                    listOutsideCollaborators: {
                        method: 'GET',
                        params: {
                            filter: {enum: ['2fa_disabled', 'all'], type: 'string'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/outside_collaborators',
                    },
                    listPendingInvitations: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/invitations',
                    },
                    listPublicMembers: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/public_members',
                    },
                    pingHook: {
                        method: 'POST',
                        params: {hook_id: {required: true, type: 'integer'}, org: {required: true, type: 'string'}},
                        url: '/orgs/:org/hooks/:hook_id/pings',
                    },
                    publicizeMembership: {
                        method: 'PUT',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/public_members/:username',
                    },
                    removeMember: {
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/members/:username',
                    },
                    removeMembership: {
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/memberships/:username',
                    },
                    removeOutsideCollaborator: {
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/outside_collaborators/:username',
                    },
                    unblockUser: {
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}, username: {required: true, type: 'string'}},
                        url: '/orgs/:org/blocks/:username',
                    },
                    update: {
                        method: 'PATCH',
                        params: {
                            billing_email: {type: 'string'},
                            company: {type: 'string'},
                            default_repository_permission: {enum: ['read', 'write', 'admin', 'none'], type: 'string'},
                            description: {type: 'string'},
                            email: {type: 'string'},
                            has_organization_projects: {type: 'boolean'},
                            has_repository_projects: {type: 'boolean'},
                            location: {type: 'string'},
                            members_allowed_repository_creation_type: {
                                enum: ['all', 'private', 'none'],
                                type: 'string',
                            },
                            members_can_create_internal_repositories: {type: 'boolean'},
                            members_can_create_private_repositories: {type: 'boolean'},
                            members_can_create_public_repositories: {type: 'boolean'},
                            members_can_create_repositories: {type: 'boolean'},
                            name: {type: 'string'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org',
                    },
                    updateHook: {
                        method: 'PATCH',
                        params: {
                            active: {type: 'boolean'},
                            config: {type: 'object'},
                            'config.content_type': {type: 'string'},
                            'config.insecure_ssl': {type: 'string'},
                            'config.secret': {type: 'string'},
                            'config.url': {required: true, type: 'string'},
                            events: {type: 'string[]'},
                            hook_id: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/hooks/:hook_id',
                    },
                    updateMembership: {
                        method: 'PATCH',
                        params: {
                            org: {required: true, type: 'string'},
                            state: {enum: ['active'], required: true, type: 'string'},
                        },
                        url: '/user/memberships/orgs/:org',
                    },
                },
                projects: {
                    addCollaborator: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PUT',
                        params: {
                            permission: {enum: ['read', 'write', 'admin'], type: 'string'},
                            project_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/projects/:project_id/collaborators/:username',
                    },
                    createCard: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {
                            column_id: {required: true, type: 'integer'},
                            content_id: {type: 'integer'},
                            content_type: {type: 'string'},
                            note: {type: 'string'},
                        },
                        url: '/projects/columns/:column_id/cards',
                    },
                    createColumn: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {name: {required: true, type: 'string'}, project_id: {required: true, type: 'integer'}},
                        url: '/projects/:project_id/columns',
                    },
                    createForAuthenticatedUser: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {body: {type: 'string'}, name: {required: true, type: 'string'}},
                        url: '/user/projects',
                    },
                    createForOrg: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {
                            body: {type: 'string'},
                            name: {required: true, type: 'string'},
                            org: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/projects',
                    },
                    createForRepo: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {
                            body: {type: 'string'},
                            name: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/projects',
                    },
                    delete: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'DELETE',
                        params: {project_id: {required: true, type: 'integer'}},
                        url: '/projects/:project_id',
                    },
                    deleteCard: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'DELETE',
                        params: {card_id: {required: true, type: 'integer'}},
                        url: '/projects/columns/cards/:card_id',
                    },
                    deleteColumn: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'DELETE',
                        params: {column_id: {required: true, type: 'integer'}},
                        url: '/projects/columns/:column_id',
                    },
                    get: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {project_id: {required: true, type: 'integer'}},
                        url: '/projects/:project_id',
                    },
                    getCard: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {card_id: {required: true, type: 'integer'}},
                        url: '/projects/columns/cards/:card_id',
                    },
                    getColumn: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {column_id: {required: true, type: 'integer'}},
                        url: '/projects/columns/:column_id',
                    },
                    listCards: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            archived_state: {enum: ['all', 'archived', 'not_archived'], type: 'string'},
                            column_id: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/projects/columns/:column_id/cards',
                    },
                    listCollaborators: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            affiliation: {enum: ['outside', 'direct', 'all'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            project_id: {required: true, type: 'integer'},
                        },
                        url: '/projects/:project_id/collaborators',
                    },
                    listColumns: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            project_id: {required: true, type: 'integer'},
                        },
                        url: '/projects/:project_id/columns',
                    },
                    listForOrg: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/orgs/:org/projects',
                    },
                    listForRepo: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/projects',
                    },
                    listForUser: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/projects',
                    },
                    moveCard: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {
                            card_id: {required: true, type: 'integer'},
                            column_id: {type: 'integer'},
                            position: {required: true, type: 'string', validation: '^(top|bottom|after:\\d+)$'},
                        },
                        url: '/projects/columns/cards/:card_id/moves',
                    },
                    moveColumn: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'POST',
                        params: {
                            column_id: {required: true, type: 'integer'},
                            position: {required: true, type: 'string', validation: '^(first|last|after:\\d+)$'},
                        },
                        url: '/projects/columns/:column_id/moves',
                    },
                    removeCollaborator: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'DELETE',
                        params: {
                            project_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/projects/:project_id/collaborators/:username',
                    },
                    reviewUserPermissionLevel: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            project_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/projects/:project_id/collaborators/:username/permission',
                    },
                    update: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PATCH',
                        params: {
                            body: {type: 'string'},
                            name: {type: 'string'},
                            organization_permission: {type: 'string'},
                            private: {type: 'boolean'},
                            project_id: {required: true, type: 'integer'},
                            state: {enum: ['open', 'closed'], type: 'string'},
                        },
                        url: '/projects/:project_id',
                    },
                    updateCard: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PATCH',
                        params: {
                            archived: {type: 'boolean'},
                            card_id: {required: true, type: 'integer'},
                            note: {type: 'string'},
                        },
                        url: '/projects/columns/cards/:card_id',
                    },
                    updateColumn: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PATCH',
                        params: {column_id: {required: true, type: 'integer'}, name: {required: true, type: 'string'}},
                        url: '/projects/columns/:column_id',
                    },
                },
                pulls: {
                    checkIfMerged: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/merge',
                    },
                    create: {
                        method: 'POST',
                        params: {
                            base: {required: true, type: 'string'},
                            body: {type: 'string'},
                            draft: {type: 'boolean'},
                            head: {required: true, type: 'string'},
                            maintainer_can_modify: {type: 'boolean'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls',
                    },
                    createComment: {
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            commit_id: {required: true, type: 'string'},
                            in_reply_to: {
                                deprecated: true,
                                description:
                                    'The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.',
                                type: 'integer',
                            },
                            line: {type: 'integer'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            position: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            side: {enum: ['LEFT', 'RIGHT'], type: 'string'},
                            start_line: {type: 'integer'},
                            start_side: {enum: ['LEFT', 'RIGHT', 'side'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/comments',
                    },
                    createCommentReply: {
                        deprecated:
                            'octokit.pulls.createCommentReply() has been renamed to octokit.pulls.createComment() (2019-09-09)',
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            commit_id: {required: true, type: 'string'},
                            in_reply_to: {
                                deprecated: true,
                                description:
                                    'The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.',
                                type: 'integer',
                            },
                            line: {type: 'integer'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            position: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            side: {enum: ['LEFT', 'RIGHT'], type: 'string'},
                            start_line: {type: 'integer'},
                            start_side: {enum: ['LEFT', 'RIGHT', 'side'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/comments',
                    },
                    createFromIssue: {
                        deprecated:
                            'octokit.pulls.createFromIssue() is deprecated, see https://developer.github.com/v3/pulls/#create-a-pull-request',
                        method: 'POST',
                        params: {
                            base: {required: true, type: 'string'},
                            draft: {type: 'boolean'},
                            head: {required: true, type: 'string'},
                            issue: {required: true, type: 'integer'},
                            maintainer_can_modify: {type: 'boolean'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls',
                    },
                    createReview: {
                        method: 'POST',
                        params: {
                            body: {type: 'string'},
                            comments: {type: 'object[]'},
                            'comments[].body': {required: true, type: 'string'},
                            'comments[].path': {required: true, type: 'string'},
                            'comments[].position': {required: true, type: 'integer'},
                            commit_id: {type: 'string'},
                            event: {enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'], type: 'string'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews',
                    },
                    createReviewCommentReply: {
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies',
                    },
                    createReviewRequest: {
                        method: 'POST',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            reviewers: {type: 'string[]'},
                            team_reviewers: {type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/requested_reviewers',
                    },
                    deleteComment: {
                        method: 'DELETE',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/comments/:comment_id',
                    },
                    deletePendingReview: {
                        method: 'DELETE',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            review_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id',
                    },
                    deleteReviewRequest: {
                        method: 'DELETE',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            reviewers: {type: 'string[]'},
                            team_reviewers: {type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/requested_reviewers',
                    },
                    dismissReview: {
                        method: 'PUT',
                        params: {
                            message: {required: true, type: 'string'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            review_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals',
                    },
                    get: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number',
                    },
                    getComment: {
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/comments/:comment_id',
                    },
                    getCommentsForReview: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            review_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments',
                    },
                    getReview: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            review_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id',
                    },
                    list: {
                        method: 'GET',
                        params: {
                            base: {type: 'string'},
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            head: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            sort: {enum: ['created', 'updated', 'popularity', 'long-running'], type: 'string'},
                            state: {enum: ['open', 'closed', 'all'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls',
                    },
                    listComments: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/comments',
                    },
                    listCommentsForRepo: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            since: {type: 'string'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/comments',
                    },
                    listCommits: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/commits',
                    },
                    listFiles: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/files',
                    },
                    listReviewRequests: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/requested_reviewers',
                    },
                    listReviews: {
                        method: 'GET',
                        params: {
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews',
                    },
                    merge: {
                        method: 'PUT',
                        params: {
                            commit_message: {type: 'string'},
                            commit_title: {type: 'string'},
                            merge_method: {enum: ['merge', 'squash', 'rebase'], type: 'string'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            sha: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/merge',
                    },
                    submitReview: {
                        method: 'POST',
                        params: {
                            body: {type: 'string'},
                            event: {enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'], required: true, type: 'string'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            review_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events',
                    },
                    update: {
                        method: 'PATCH',
                        params: {
                            base: {type: 'string'},
                            body: {type: 'string'},
                            maintainer_can_modify: {type: 'boolean'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            state: {enum: ['open', 'closed'], type: 'string'},
                            title: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number',
                    },
                    updateBranch: {
                        headers: {accept: 'application/vnd.github.lydian-preview+json'},
                        method: 'PUT',
                        params: {
                            expected_head_sha: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/update-branch',
                    },
                    updateComment: {
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/comments/:comment_id',
                    },
                    updateReview: {
                        method: 'PUT',
                        params: {
                            body: {required: true, type: 'string'},
                            number: {alias: 'pull_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            pull_number: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            review_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id',
                    },
                },
                rateLimit: {get: {method: 'GET', params: {}, url: '/rate_limit'}},
                reactions: {
                    createForCommitComment: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/comments/:comment_id/reactions',
                    },
                    createForIssue: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/reactions',
                    },
                    createForIssueComment: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/comments/:comment_id/reactions',
                    },
                    createForPullRequestReviewComment: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/comments/:comment_id/reactions',
                    },
                    createForTeamDiscussion: {
                        deprecated:
                            'octokit.reactions.createForTeamDiscussion() has been renamed to octokit.reactions.createForTeamDiscussionLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/reactions',
                    },
                    createForTeamDiscussionComment: {
                        deprecated:
                            'octokit.reactions.createForTeamDiscussionComment() has been renamed to octokit.reactions.createForTeamDiscussionCommentLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions',
                    },
                    createForTeamDiscussionCommentInOrg: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url:
                            '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions',
                    },
                    createForTeamDiscussionCommentLegacy: {
                        deprecated:
                            'octokit.reactions.createForTeamDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions',
                    },
                    createForTeamDiscussionInOrg: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions',
                    },
                    createForTeamDiscussionLegacy: {
                        deprecated:
                            'octokit.reactions.createForTeamDiscussionLegacy() is deprecated, see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'POST',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                required: true,
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/reactions',
                    },
                    delete: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'DELETE',
                        params: {reaction_id: {required: true, type: 'integer'}},
                        url: '/reactions/:reaction_id',
                    },
                    listForCommitComment: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/comments/:comment_id/reactions',
                    },
                    listForIssue: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            issue_number: {required: true, type: 'integer'},
                            number: {alias: 'issue_number', deprecated: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/:issue_number/reactions',
                    },
                    listForIssueComment: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/issues/comments/:comment_id/reactions',
                    },
                    listForPullRequestReviewComment: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pulls/comments/:comment_id/reactions',
                    },
                    listForTeamDiscussion: {
                        deprecated:
                            'octokit.reactions.listForTeamDiscussion() has been renamed to octokit.reactions.listForTeamDiscussionLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/reactions',
                    },
                    listForTeamDiscussionComment: {
                        deprecated:
                            'octokit.reactions.listForTeamDiscussionComment() has been renamed to octokit.reactions.listForTeamDiscussionCommentLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions',
                    },
                    listForTeamDiscussionCommentInOrg: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url:
                            '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions',
                    },
                    listForTeamDiscussionCommentLegacy: {
                        deprecated:
                            'octokit.reactions.listForTeamDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions',
                    },
                    listForTeamDiscussionInOrg: {
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions',
                    },
                    listForTeamDiscussionLegacy: {
                        deprecated:
                            'octokit.reactions.listForTeamDiscussionLegacy() is deprecated, see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy',
                        headers: {accept: 'application/vnd.github.squirrel-girl-preview+json'},
                        method: 'GET',
                        params: {
                            content: {
                                enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                                type: 'string',
                            },
                            discussion_number: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/reactions',
                    },
                },
                repos: {
                    acceptInvitation: {
                        method: 'PATCH',
                        params: {invitation_id: {required: true, type: 'integer'}},
                        url: '/user/repository_invitations/:invitation_id',
                    },
                    addCollaborator: {
                        method: 'PUT',
                        params: {
                            owner: {required: true, type: 'string'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            repo: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/collaborators/:username',
                    },
                    addDeployKey: {
                        method: 'POST',
                        params: {
                            key: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            read_only: {type: 'boolean'},
                            repo: {required: true, type: 'string'},
                            title: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/keys',
                    },
                    addProtectedBranchAdminEnforcement: {
                        method: 'POST',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/enforce_admins',
                    },
                    addProtectedBranchAppRestrictions: {
                        method: 'POST',
                        params: {
                            apps: {mapTo: 'data', required: true, type: 'string[]'},
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
                    },
                    addProtectedBranchRequiredSignatures: {
                        headers: {accept: 'application/vnd.github.zzzax-preview+json'},
                        method: 'POST',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_signatures',
                    },
                    addProtectedBranchRequiredStatusChecksContexts: {
                        method: 'POST',
                        params: {
                            branch: {required: true, type: 'string'},
                            contexts: {mapTo: 'data', required: true, type: 'string[]'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
                    },
                    addProtectedBranchTeamRestrictions: {
                        method: 'POST',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            teams: {mapTo: 'data', required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
                    },
                    addProtectedBranchUserRestrictions: {
                        method: 'POST',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            users: {mapTo: 'data', required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
                    },
                    checkCollaborator: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/collaborators/:username',
                    },
                    checkVulnerabilityAlerts: {
                        headers: {accept: 'application/vnd.github.dorian-preview+json'},
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/vulnerability-alerts',
                    },
                    compareCommits: {
                        method: 'GET',
                        params: {
                            base: {required: true, type: 'string'},
                            head: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/compare/:base...:head',
                    },
                    createCommitComment: {
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            commit_sha: {required: true, type: 'string'},
                            line: {type: 'integer'},
                            owner: {required: true, type: 'string'},
                            path: {type: 'string'},
                            position: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            sha: {alias: 'commit_sha', deprecated: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:commit_sha/comments',
                    },
                    createDeployment: {
                        method: 'POST',
                        params: {
                            auto_merge: {type: 'boolean'},
                            description: {type: 'string'},
                            environment: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            payload: {type: 'string'},
                            production_environment: {type: 'boolean'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            required_contexts: {type: 'string[]'},
                            task: {type: 'string'},
                            transient_environment: {type: 'boolean'},
                        },
                        url: '/repos/:owner/:repo/deployments',
                    },
                    createDeploymentStatus: {
                        method: 'POST',
                        params: {
                            auto_inactive: {type: 'boolean'},
                            deployment_id: {required: true, type: 'integer'},
                            description: {type: 'string'},
                            environment: {enum: ['production', 'staging', 'qa'], type: 'string'},
                            environment_url: {type: 'string'},
                            log_url: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            state: {
                                enum: ['error', 'failure', 'inactive', 'in_progress', 'queued', 'pending', 'success'],
                                required: true,
                                type: 'string',
                            },
                            target_url: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/deployments/:deployment_id/statuses',
                    },
                    createDispatchEvent: {
                        method: 'POST',
                        params: {
                            client_payload: {type: 'object'},
                            event_type: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/dispatches',
                    },
                    createFile: {
                        deprecated:
                            'octokit.repos.createFile() has been renamed to octokit.repos.createOrUpdateFile() (2019-06-07)',
                        method: 'PUT',
                        params: {
                            author: {type: 'object'},
                            'author.email': {required: true, type: 'string'},
                            'author.name': {required: true, type: 'string'},
                            branch: {type: 'string'},
                            committer: {type: 'object'},
                            'committer.email': {required: true, type: 'string'},
                            'committer.name': {required: true, type: 'string'},
                            content: {required: true, type: 'string'},
                            message: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/contents/:path',
                    },
                    createForAuthenticatedUser: {
                        method: 'POST',
                        params: {
                            allow_merge_commit: {type: 'boolean'},
                            allow_rebase_merge: {type: 'boolean'},
                            allow_squash_merge: {type: 'boolean'},
                            auto_init: {type: 'boolean'},
                            delete_branch_on_merge: {type: 'boolean'},
                            description: {type: 'string'},
                            gitignore_template: {type: 'string'},
                            has_issues: {type: 'boolean'},
                            has_projects: {type: 'boolean'},
                            has_wiki: {type: 'boolean'},
                            homepage: {type: 'string'},
                            is_template: {type: 'boolean'},
                            license_template: {type: 'string'},
                            name: {required: true, type: 'string'},
                            private: {type: 'boolean'},
                            team_id: {type: 'integer'},
                            visibility: {enum: ['public', 'private', 'visibility', 'internal'], type: 'string'},
                        },
                        url: '/user/repos',
                    },
                    createFork: {
                        method: 'POST',
                        params: {
                            organization: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/forks',
                    },
                    createHook: {
                        method: 'POST',
                        params: {
                            active: {type: 'boolean'},
                            config: {required: true, type: 'object'},
                            'config.content_type': {type: 'string'},
                            'config.insecure_ssl': {type: 'string'},
                            'config.secret': {type: 'string'},
                            'config.url': {required: true, type: 'string'},
                            events: {type: 'string[]'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks',
                    },
                    createInOrg: {
                        method: 'POST',
                        params: {
                            allow_merge_commit: {type: 'boolean'},
                            allow_rebase_merge: {type: 'boolean'},
                            allow_squash_merge: {type: 'boolean'},
                            auto_init: {type: 'boolean'},
                            delete_branch_on_merge: {type: 'boolean'},
                            description: {type: 'string'},
                            gitignore_template: {type: 'string'},
                            has_issues: {type: 'boolean'},
                            has_projects: {type: 'boolean'},
                            has_wiki: {type: 'boolean'},
                            homepage: {type: 'string'},
                            is_template: {type: 'boolean'},
                            license_template: {type: 'string'},
                            name: {required: true, type: 'string'},
                            org: {required: true, type: 'string'},
                            private: {type: 'boolean'},
                            team_id: {type: 'integer'},
                            visibility: {enum: ['public', 'private', 'visibility', 'internal'], type: 'string'},
                        },
                        url: '/orgs/:org/repos',
                    },
                    createOrUpdateFile: {
                        method: 'PUT',
                        params: {
                            author: {type: 'object'},
                            'author.email': {required: true, type: 'string'},
                            'author.name': {required: true, type: 'string'},
                            branch: {type: 'string'},
                            committer: {type: 'object'},
                            'committer.email': {required: true, type: 'string'},
                            'committer.name': {required: true, type: 'string'},
                            content: {required: true, type: 'string'},
                            message: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/contents/:path',
                    },
                    createRelease: {
                        method: 'POST',
                        params: {
                            body: {type: 'string'},
                            draft: {type: 'boolean'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            prerelease: {type: 'boolean'},
                            repo: {required: true, type: 'string'},
                            tag_name: {required: true, type: 'string'},
                            target_commitish: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases',
                    },
                    createStatus: {
                        method: 'POST',
                        params: {
                            context: {type: 'string'},
                            description: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {required: true, type: 'string'},
                            state: {enum: ['error', 'failure', 'pending', 'success'], required: true, type: 'string'},
                            target_url: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/statuses/:sha',
                    },
                    createUsingTemplate: {
                        headers: {accept: 'application/vnd.github.baptiste-preview+json'},
                        method: 'POST',
                        params: {
                            description: {type: 'string'},
                            name: {required: true, type: 'string'},
                            owner: {type: 'string'},
                            private: {type: 'boolean'},
                            template_owner: {required: true, type: 'string'},
                            template_repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:template_owner/:template_repo/generate',
                    },
                    declineInvitation: {
                        method: 'DELETE',
                        params: {invitation_id: {required: true, type: 'integer'}},
                        url: '/user/repository_invitations/:invitation_id',
                    },
                    delete: {
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo',
                    },
                    deleteCommitComment: {
                        method: 'DELETE',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/comments/:comment_id',
                    },
                    deleteDownload: {
                        method: 'DELETE',
                        params: {
                            download_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/downloads/:download_id',
                    },
                    deleteFile: {
                        method: 'DELETE',
                        params: {
                            author: {type: 'object'},
                            'author.email': {type: 'string'},
                            'author.name': {type: 'string'},
                            branch: {type: 'string'},
                            committer: {type: 'object'},
                            'committer.email': {type: 'string'},
                            'committer.name': {type: 'string'},
                            message: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/contents/:path',
                    },
                    deleteHook: {
                        method: 'DELETE',
                        params: {
                            hook_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks/:hook_id',
                    },
                    deleteInvitation: {
                        method: 'DELETE',
                        params: {
                            invitation_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/invitations/:invitation_id',
                    },
                    deleteRelease: {
                        method: 'DELETE',
                        params: {
                            owner: {required: true, type: 'string'},
                            release_id: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/:release_id',
                    },
                    deleteReleaseAsset: {
                        method: 'DELETE',
                        params: {
                            asset_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/assets/:asset_id',
                    },
                    disableAutomatedSecurityFixes: {
                        headers: {accept: 'application/vnd.github.london-preview+json'},
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/automated-security-fixes',
                    },
                    disablePagesSite: {
                        headers: {accept: 'application/vnd.github.switcheroo-preview+json'},
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/pages',
                    },
                    disableVulnerabilityAlerts: {
                        headers: {accept: 'application/vnd.github.dorian-preview+json'},
                        method: 'DELETE',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/vulnerability-alerts',
                    },
                    enableAutomatedSecurityFixes: {
                        headers: {accept: 'application/vnd.github.london-preview+json'},
                        method: 'PUT',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/automated-security-fixes',
                    },
                    enablePagesSite: {
                        headers: {accept: 'application/vnd.github.switcheroo-preview+json'},
                        method: 'POST',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            source: {type: 'object'},
                            'source.branch': {enum: ['master', 'gh-pages'], type: 'string'},
                            'source.path': {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pages',
                    },
                    enableVulnerabilityAlerts: {
                        headers: {accept: 'application/vnd.github.dorian-preview+json'},
                        method: 'PUT',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/vulnerability-alerts',
                    },
                    get: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo',
                    },
                    getAppsWithAccessToProtectedBranch: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
                    },
                    getArchiveLink: {
                        method: 'GET',
                        params: {
                            archive_format: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/:archive_format/:ref',
                    },
                    getBranch: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch',
                    },
                    getBranchProtection: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection',
                    },
                    getClones: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            per: {enum: ['day', 'week'], type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/traffic/clones',
                    },
                    getCodeFrequencyStats: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/stats/code_frequency',
                    },
                    getCollaboratorPermissionLevel: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/collaborators/:username/permission',
                    },
                    getCombinedStatusForRef: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:ref/status',
                    },
                    getCommit: {
                        method: 'GET',
                        params: {
                            commit_sha: {alias: 'ref', deprecated: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {alias: 'ref', deprecated: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:ref',
                    },
                    getCommitActivityStats: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/stats/commit_activity',
                    },
                    getCommitComment: {
                        method: 'GET',
                        params: {
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/comments/:comment_id',
                    },
                    getCommitRefSha: {
                        deprecated:
                            'octokit.repos.getCommitRefSha() is deprecated, see https://developer.github.com/v3/repos/commits/#get-a-single-commit',
                        headers: {accept: 'application/vnd.github.v3.sha'},
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:ref',
                    },
                    getContents: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            ref: {type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/contents/:path',
                    },
                    getContributorsStats: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/stats/contributors',
                    },
                    getDeployKey: {
                        method: 'GET',
                        params: {
                            key_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/keys/:key_id',
                    },
                    getDeployment: {
                        method: 'GET',
                        params: {
                            deployment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/deployments/:deployment_id',
                    },
                    getDeploymentStatus: {
                        method: 'GET',
                        params: {
                            deployment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            status_id: {required: true, type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id',
                    },
                    getDownload: {
                        method: 'GET',
                        params: {
                            download_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/downloads/:download_id',
                    },
                    getHook: {
                        method: 'GET',
                        params: {
                            hook_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks/:hook_id',
                    },
                    getLatestPagesBuild: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/pages/builds/latest',
                    },
                    getLatestRelease: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/releases/latest',
                    },
                    getPages: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/pages',
                    },
                    getPagesBuild: {
                        method: 'GET',
                        params: {
                            build_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pages/builds/:build_id',
                    },
                    getParticipationStats: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/stats/participation',
                    },
                    getProtectedBranchAdminEnforcement: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/enforce_admins',
                    },
                    getProtectedBranchPullRequestReviewEnforcement: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews',
                    },
                    getProtectedBranchRequiredSignatures: {
                        headers: {accept: 'application/vnd.github.zzzax-preview+json'},
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_signatures',
                    },
                    getProtectedBranchRequiredStatusChecks: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks',
                    },
                    getProtectedBranchRestrictions: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions',
                    },
                    getPunchCardStats: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/stats/punch_card',
                    },
                    getReadme: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            ref: {type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/readme',
                    },
                    getRelease: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            release_id: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/:release_id',
                    },
                    getReleaseAsset: {
                        method: 'GET',
                        params: {
                            asset_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/assets/:asset_id',
                    },
                    getReleaseByTag: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            tag: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/tags/:tag',
                    },
                    getTeamsWithAccessToProtectedBranch: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
                    },
                    getTopPaths: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/traffic/popular/paths',
                    },
                    getTopReferrers: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/traffic/popular/referrers',
                    },
                    getUsersWithAccessToProtectedBranch: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
                    },
                    getViews: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            per: {enum: ['day', 'week'], type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/traffic/views',
                    },
                    list: {
                        method: 'GET',
                        params: {
                            affiliation: {type: 'string'},
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            sort: {enum: ['created', 'updated', 'pushed', 'full_name'], type: 'string'},
                            type: {enum: ['all', 'owner', 'public', 'private', 'member'], type: 'string'},
                            visibility: {enum: ['all', 'public', 'private'], type: 'string'},
                        },
                        url: '/user/repos',
                    },
                    listAppsWithAccessToProtectedBranch: {
                        deprecated:
                            'octokit.repos.listAppsWithAccessToProtectedBranch() has been renamed to octokit.repos.getAppsWithAccessToProtectedBranch() (2019-09-13)',
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
                    },
                    listAssetsForRelease: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            release_id: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/:release_id/assets',
                    },
                    listBranches: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            protected: {type: 'boolean'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches',
                    },
                    listBranchesForHeadCommit: {
                        headers: {accept: 'application/vnd.github.groot-preview+json'},
                        method: 'GET',
                        params: {
                            commit_sha: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:commit_sha/branches-where-head',
                    },
                    listCollaborators: {
                        method: 'GET',
                        params: {
                            affiliation: {enum: ['outside', 'direct', 'all'], type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/collaborators',
                    },
                    listCommentsForCommit: {
                        method: 'GET',
                        params: {
                            commit_sha: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            ref: {alias: 'commit_sha', deprecated: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:commit_sha/comments',
                    },
                    listCommitComments: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/comments',
                    },
                    listCommits: {
                        method: 'GET',
                        params: {
                            author: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            path: {type: 'string'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            sha: {type: 'string'},
                            since: {type: 'string'},
                            until: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits',
                    },
                    listContributors: {
                        method: 'GET',
                        params: {
                            anon: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/contributors',
                    },
                    listDeployKeys: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/keys',
                    },
                    listDeploymentStatuses: {
                        method: 'GET',
                        params: {
                            deployment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/deployments/:deployment_id/statuses',
                    },
                    listDeployments: {
                        method: 'GET',
                        params: {
                            environment: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            ref: {type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {type: 'string'},
                            task: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/deployments',
                    },
                    listDownloads: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/downloads',
                    },
                    listForOrg: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            sort: {enum: ['created', 'updated', 'pushed', 'full_name'], type: 'string'},
                            type: {
                                enum: ['all', 'public', 'private', 'forks', 'sources', 'member', 'internal'],
                                type: 'string',
                            },
                        },
                        url: '/orgs/:org/repos',
                    },
                    listForUser: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            sort: {enum: ['created', 'updated', 'pushed', 'full_name'], type: 'string'},
                            type: {enum: ['all', 'owner', 'member'], type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/repos',
                    },
                    listForks: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                            sort: {enum: ['newest', 'oldest', 'stargazers'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/forks',
                    },
                    listHooks: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks',
                    },
                    listInvitations: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/invitations',
                    },
                    listInvitationsForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/repository_invitations',
                    },
                    listLanguages: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/languages',
                    },
                    listPagesBuilds: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pages/builds',
                    },
                    listProtectedBranchRequiredStatusChecksContexts: {
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
                    },
                    listProtectedBranchTeamRestrictions: {
                        deprecated:
                            'octokit.repos.listProtectedBranchTeamRestrictions() has been renamed to octokit.repos.getTeamsWithAccessToProtectedBranch() (2019-09-09)',
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
                    },
                    listProtectedBranchUserRestrictions: {
                        deprecated:
                            'octokit.repos.listProtectedBranchUserRestrictions() has been renamed to octokit.repos.getUsersWithAccessToProtectedBranch() (2019-09-09)',
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
                    },
                    listPublic: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}, since: {type: 'integer'}},
                        url: '/repositories',
                    },
                    listPullRequestsAssociatedWithCommit: {
                        headers: {accept: 'application/vnd.github.groot-preview+json'},
                        method: 'GET',
                        params: {
                            commit_sha: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:commit_sha/pulls',
                    },
                    listReleases: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases',
                    },
                    listStatusesForRef: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            ref: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/commits/:ref/statuses',
                    },
                    listTags: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/tags',
                    },
                    listTeams: {
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/teams',
                    },
                    listTeamsWithAccessToProtectedBranch: {
                        deprecated:
                            'octokit.repos.listTeamsWithAccessToProtectedBranch() has been renamed to octokit.repos.getTeamsWithAccessToProtectedBranch() (2019-09-13)',
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
                    },
                    listTopics: {
                        headers: {accept: 'application/vnd.github.mercy-preview+json'},
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/topics',
                    },
                    listUsersWithAccessToProtectedBranch: {
                        deprecated:
                            'octokit.repos.listUsersWithAccessToProtectedBranch() has been renamed to octokit.repos.getUsersWithAccessToProtectedBranch() (2019-09-13)',
                        method: 'GET',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
                    },
                    merge: {
                        method: 'POST',
                        params: {
                            base: {required: true, type: 'string'},
                            commit_message: {type: 'string'},
                            head: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/merges',
                    },
                    pingHook: {
                        method: 'POST',
                        params: {
                            hook_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks/:hook_id/pings',
                    },
                    removeBranchProtection: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection',
                    },
                    removeCollaborator: {
                        method: 'DELETE',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/collaborators/:username',
                    },
                    removeDeployKey: {
                        method: 'DELETE',
                        params: {
                            key_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/keys/:key_id',
                    },
                    removeProtectedBranchAdminEnforcement: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/enforce_admins',
                    },
                    removeProtectedBranchAppRestrictions: {
                        method: 'DELETE',
                        params: {
                            apps: {mapTo: 'data', required: true, type: 'string[]'},
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
                    },
                    removeProtectedBranchPullRequestReviewEnforcement: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews',
                    },
                    removeProtectedBranchRequiredSignatures: {
                        headers: {accept: 'application/vnd.github.zzzax-preview+json'},
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_signatures',
                    },
                    removeProtectedBranchRequiredStatusChecks: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks',
                    },
                    removeProtectedBranchRequiredStatusChecksContexts: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            contexts: {mapTo: 'data', required: true, type: 'string[]'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
                    },
                    removeProtectedBranchRestrictions: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions',
                    },
                    removeProtectedBranchTeamRestrictions: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            teams: {mapTo: 'data', required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
                    },
                    removeProtectedBranchUserRestrictions: {
                        method: 'DELETE',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            users: {mapTo: 'data', required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
                    },
                    replaceProtectedBranchAppRestrictions: {
                        method: 'PUT',
                        params: {
                            apps: {mapTo: 'data', required: true, type: 'string[]'},
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
                    },
                    replaceProtectedBranchRequiredStatusChecksContexts: {
                        method: 'PUT',
                        params: {
                            branch: {required: true, type: 'string'},
                            contexts: {mapTo: 'data', required: true, type: 'string[]'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
                    },
                    replaceProtectedBranchTeamRestrictions: {
                        method: 'PUT',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            teams: {mapTo: 'data', required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
                    },
                    replaceProtectedBranchUserRestrictions: {
                        method: 'PUT',
                        params: {
                            branch: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            users: {mapTo: 'data', required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
                    },
                    replaceTopics: {
                        headers: {accept: 'application/vnd.github.mercy-preview+json'},
                        method: 'PUT',
                        params: {
                            names: {required: true, type: 'string[]'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/topics',
                    },
                    requestPageBuild: {
                        method: 'POST',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/pages/builds',
                    },
                    retrieveCommunityProfileMetrics: {
                        method: 'GET',
                        params: {owner: {required: true, type: 'string'}, repo: {required: true, type: 'string'}},
                        url: '/repos/:owner/:repo/community/profile',
                    },
                    testPushHook: {
                        method: 'POST',
                        params: {
                            hook_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks/:hook_id/tests',
                    },
                    transfer: {
                        method: 'POST',
                        params: {
                            new_owner: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_ids: {type: 'integer[]'},
                        },
                        url: '/repos/:owner/:repo/transfer',
                    },
                    update: {
                        method: 'PATCH',
                        params: {
                            allow_merge_commit: {type: 'boolean'},
                            allow_rebase_merge: {type: 'boolean'},
                            allow_squash_merge: {type: 'boolean'},
                            archived: {type: 'boolean'},
                            default_branch: {type: 'string'},
                            delete_branch_on_merge: {type: 'boolean'},
                            description: {type: 'string'},
                            has_issues: {type: 'boolean'},
                            has_projects: {type: 'boolean'},
                            has_wiki: {type: 'boolean'},
                            homepage: {type: 'string'},
                            is_template: {type: 'boolean'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            private: {type: 'boolean'},
                            repo: {required: true, type: 'string'},
                            visibility: {enum: ['public', 'private', 'visibility', 'internal'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo',
                    },
                    updateBranchProtection: {
                        method: 'PUT',
                        params: {
                            allow_deletions: {type: 'boolean'},
                            allow_force_pushes: {allowNull: true, type: 'boolean'},
                            branch: {required: true, type: 'string'},
                            enforce_admins: {allowNull: true, required: true, type: 'boolean'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            required_linear_history: {type: 'boolean'},
                            required_pull_request_reviews: {allowNull: true, required: true, type: 'object'},
                            'required_pull_request_reviews.dismiss_stale_reviews': {type: 'boolean'},
                            'required_pull_request_reviews.dismissal_restrictions': {type: 'object'},
                            'required_pull_request_reviews.dismissal_restrictions.teams': {type: 'string[]'},
                            'required_pull_request_reviews.dismissal_restrictions.users': {type: 'string[]'},
                            'required_pull_request_reviews.require_code_owner_reviews': {type: 'boolean'},
                            'required_pull_request_reviews.required_approving_review_count': {type: 'integer'},
                            required_status_checks: {allowNull: true, required: true, type: 'object'},
                            'required_status_checks.contexts': {required: true, type: 'string[]'},
                            'required_status_checks.strict': {required: true, type: 'boolean'},
                            restrictions: {allowNull: true, required: true, type: 'object'},
                            'restrictions.apps': {type: 'string[]'},
                            'restrictions.teams': {required: true, type: 'string[]'},
                            'restrictions.users': {required: true, type: 'string[]'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection',
                    },
                    updateCommitComment: {
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/comments/:comment_id',
                    },
                    updateFile: {
                        deprecated:
                            'octokit.repos.updateFile() has been renamed to octokit.repos.createOrUpdateFile() (2019-06-07)',
                        method: 'PUT',
                        params: {
                            author: {type: 'object'},
                            'author.email': {required: true, type: 'string'},
                            'author.name': {required: true, type: 'string'},
                            branch: {type: 'string'},
                            committer: {type: 'object'},
                            'committer.email': {required: true, type: 'string'},
                            'committer.name': {required: true, type: 'string'},
                            content: {required: true, type: 'string'},
                            message: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            path: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            sha: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/contents/:path',
                    },
                    updateHook: {
                        method: 'PATCH',
                        params: {
                            active: {type: 'boolean'},
                            add_events: {type: 'string[]'},
                            config: {type: 'object'},
                            'config.content_type': {type: 'string'},
                            'config.insecure_ssl': {type: 'string'},
                            'config.secret': {type: 'string'},
                            'config.url': {required: true, type: 'string'},
                            events: {type: 'string[]'},
                            hook_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            remove_events: {type: 'string[]'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/hooks/:hook_id',
                    },
                    updateInformationAboutPagesSite: {
                        method: 'PUT',
                        params: {
                            cname: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            source: {enum: ['"gh-pages"', '"master"', '"master /docs"'], type: 'string'},
                        },
                        url: '/repos/:owner/:repo/pages',
                    },
                    updateInvitation: {
                        method: 'PATCH',
                        params: {
                            invitation_id: {required: true, type: 'integer'},
                            owner: {required: true, type: 'string'},
                            permissions: {enum: ['read', 'write', 'admin'], type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/invitations/:invitation_id',
                    },
                    updateProtectedBranchPullRequestReviewEnforcement: {
                        method: 'PATCH',
                        params: {
                            branch: {required: true, type: 'string'},
                            dismiss_stale_reviews: {type: 'boolean'},
                            dismissal_restrictions: {type: 'object'},
                            'dismissal_restrictions.teams': {type: 'string[]'},
                            'dismissal_restrictions.users': {type: 'string[]'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            require_code_owner_reviews: {type: 'boolean'},
                            required_approving_review_count: {type: 'integer'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews',
                    },
                    updateProtectedBranchRequiredStatusChecks: {
                        method: 'PATCH',
                        params: {
                            branch: {required: true, type: 'string'},
                            contexts: {type: 'string[]'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            strict: {type: 'boolean'},
                        },
                        url: '/repos/:owner/:repo/branches/:branch/protection/required_status_checks',
                    },
                    updateRelease: {
                        method: 'PATCH',
                        params: {
                            body: {type: 'string'},
                            draft: {type: 'boolean'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            prerelease: {type: 'boolean'},
                            release_id: {required: true, type: 'integer'},
                            repo: {required: true, type: 'string'},
                            tag_name: {type: 'string'},
                            target_commitish: {type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/:release_id',
                    },
                    updateReleaseAsset: {
                        method: 'PATCH',
                        params: {
                            asset_id: {required: true, type: 'integer'},
                            label: {type: 'string'},
                            name: {type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                        },
                        url: '/repos/:owner/:repo/releases/assets/:asset_id',
                    },
                    uploadReleaseAsset: {
                        method: 'POST',
                        params: {
                            data: {mapTo: 'data', required: true, type: 'string | object'},
                            file: {alias: 'data', deprecated: true, type: 'string | object'},
                            headers: {required: true, type: 'object'},
                            'headers.content-length': {required: true, type: 'integer'},
                            'headers.content-type': {required: true, type: 'string'},
                            label: {type: 'string'},
                            name: {required: true, type: 'string'},
                            url: {required: true, type: 'string'},
                        },
                        url: ':url',
                    },
                },
                search: {
                    code: {
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            q: {required: true, type: 'string'},
                            sort: {enum: ['indexed'], type: 'string'},
                        },
                        url: '/search/code',
                    },
                    commits: {
                        headers: {accept: 'application/vnd.github.cloak-preview+json'},
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            q: {required: true, type: 'string'},
                            sort: {enum: ['author-date', 'committer-date'], type: 'string'},
                        },
                        url: '/search/commits',
                    },
                    issues: {
                        deprecated:
                            'octokit.search.issues() has been renamed to octokit.search.issuesAndPullRequests() (2018-12-27)',
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            q: {required: true, type: 'string'},
                            sort: {
                                enum: [
                                    'comments',
                                    'reactions',
                                    'reactions-+1',
                                    'reactions--1',
                                    'reactions-smile',
                                    'reactions-thinking_face',
                                    'reactions-heart',
                                    'reactions-tada',
                                    'interactions',
                                    'created',
                                    'updated',
                                ],
                                type: 'string',
                            },
                        },
                        url: '/search/issues',
                    },
                    issuesAndPullRequests: {
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            q: {required: true, type: 'string'},
                            sort: {
                                enum: [
                                    'comments',
                                    'reactions',
                                    'reactions-+1',
                                    'reactions--1',
                                    'reactions-smile',
                                    'reactions-thinking_face',
                                    'reactions-heart',
                                    'reactions-tada',
                                    'interactions',
                                    'created',
                                    'updated',
                                ],
                                type: 'string',
                            },
                        },
                        url: '/search/issues',
                    },
                    labels: {
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            q: {required: true, type: 'string'},
                            repository_id: {required: true, type: 'integer'},
                            sort: {enum: ['created', 'updated'], type: 'string'},
                        },
                        url: '/search/labels',
                    },
                    repos: {
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            q: {required: true, type: 'string'},
                            sort: {enum: ['stars', 'forks', 'help-wanted-issues', 'updated'], type: 'string'},
                        },
                        url: '/search/repositories',
                    },
                    topics: {method: 'GET', params: {q: {required: true, type: 'string'}}, url: '/search/topics'},
                    users: {
                        method: 'GET',
                        params: {
                            order: {enum: ['desc', 'asc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            q: {required: true, type: 'string'},
                            sort: {enum: ['followers', 'repositories', 'joined'], type: 'string'},
                        },
                        url: '/search/users',
                    },
                },
                teams: {
                    addMember: {
                        deprecated:
                            'octokit.teams.addMember() has been renamed to octokit.teams.addMemberLegacy() (2020-01-16)',
                        method: 'PUT',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/members/:username',
                    },
                    addMemberLegacy: {
                        deprecated:
                            'octokit.teams.addMemberLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#add-team-member-legacy',
                        method: 'PUT',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/members/:username',
                    },
                    addOrUpdateMembership: {
                        deprecated:
                            'octokit.teams.addOrUpdateMembership() has been renamed to octokit.teams.addOrUpdateMembershipLegacy() (2020-01-16)',
                        method: 'PUT',
                        params: {
                            role: {enum: ['member', 'maintainer'], type: 'string'},
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/memberships/:username',
                    },
                    addOrUpdateMembershipInOrg: {
                        method: 'PUT',
                        params: {
                            org: {required: true, type: 'string'},
                            role: {enum: ['member', 'maintainer'], type: 'string'},
                            team_slug: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/memberships/:username',
                    },
                    addOrUpdateMembershipLegacy: {
                        deprecated:
                            'octokit.teams.addOrUpdateMembershipLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#add-or-update-team-membership-legacy',
                        method: 'PUT',
                        params: {
                            role: {enum: ['member', 'maintainer'], type: 'string'},
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/memberships/:username',
                    },
                    addOrUpdateProject: {
                        deprecated:
                            'octokit.teams.addOrUpdateProject() has been renamed to octokit.teams.addOrUpdateProjectLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PUT',
                        params: {
                            permission: {enum: ['read', 'write', 'admin'], type: 'string'},
                            project_id: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects/:project_id',
                    },
                    addOrUpdateProjectInOrg: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PUT',
                        params: {
                            org: {required: true, type: 'string'},
                            permission: {enum: ['read', 'write', 'admin'], type: 'string'},
                            project_id: {required: true, type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/projects/:project_id',
                    },
                    addOrUpdateProjectLegacy: {
                        deprecated:
                            'octokit.teams.addOrUpdateProjectLegacy() is deprecated, see https://developer.github.com/v3/teams/#add-or-update-team-project-legacy',
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'PUT',
                        params: {
                            permission: {enum: ['read', 'write', 'admin'], type: 'string'},
                            project_id: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects/:project_id',
                    },
                    addOrUpdateRepo: {
                        deprecated:
                            'octokit.teams.addOrUpdateRepo() has been renamed to octokit.teams.addOrUpdateRepoLegacy() (2020-01-16)',
                        method: 'PUT',
                        params: {
                            owner: {required: true, type: 'string'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos/:owner/:repo',
                    },
                    addOrUpdateRepoInOrg: {
                        method: 'PUT',
                        params: {
                            org: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/repos/:owner/:repo',
                    },
                    addOrUpdateRepoLegacy: {
                        deprecated:
                            'octokit.teams.addOrUpdateRepoLegacy() is deprecated, see https://developer.github.com/v3/teams/#add-or-update-team-repository-legacy',
                        method: 'PUT',
                        params: {
                            owner: {required: true, type: 'string'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos/:owner/:repo',
                    },
                    checkManagesRepo: {
                        deprecated:
                            'octokit.teams.checkManagesRepo() has been renamed to octokit.teams.checkManagesRepoLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos/:owner/:repo',
                    },
                    checkManagesRepoInOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/repos/:owner/:repo',
                    },
                    checkManagesRepoLegacy: {
                        deprecated:
                            'octokit.teams.checkManagesRepoLegacy() is deprecated, see https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository-legacy',
                        method: 'GET',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos/:owner/:repo',
                    },
                    create: {
                        method: 'POST',
                        params: {
                            description: {type: 'string'},
                            maintainers: {type: 'string[]'},
                            name: {required: true, type: 'string'},
                            org: {required: true, type: 'string'},
                            parent_team_id: {type: 'integer'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            privacy: {enum: ['secret', 'closed'], type: 'string'},
                            repo_names: {type: 'string[]'},
                        },
                        url: '/orgs/:org/teams',
                    },
                    createDiscussion: {
                        deprecated:
                            'octokit.teams.createDiscussion() has been renamed to octokit.teams.createDiscussionLegacy() (2020-01-16)',
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            private: {type: 'boolean'},
                            team_id: {required: true, type: 'integer'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/discussions',
                    },
                    createDiscussionComment: {
                        deprecated:
                            'octokit.teams.createDiscussionComment() has been renamed to octokit.teams.createDiscussionCommentLegacy() (2020-01-16)',
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments',
                    },
                    createDiscussionCommentInOrg: {
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments',
                    },
                    createDiscussionCommentLegacy: {
                        deprecated:
                            'octokit.teams.createDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#create-a-comment-legacy',
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments',
                    },
                    createDiscussionInOrg: {
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            org: {required: true, type: 'string'},
                            private: {type: 'boolean'},
                            team_slug: {required: true, type: 'string'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions',
                    },
                    createDiscussionLegacy: {
                        deprecated:
                            'octokit.teams.createDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy',
                        method: 'POST',
                        params: {
                            body: {required: true, type: 'string'},
                            private: {type: 'boolean'},
                            team_id: {required: true, type: 'integer'},
                            title: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/discussions',
                    },
                    delete: {
                        deprecated:
                            'octokit.teams.delete() has been renamed to octokit.teams.deleteLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {team_id: {required: true, type: 'integer'}},
                        url: '/teams/:team_id',
                    },
                    deleteDiscussion: {
                        deprecated:
                            'octokit.teams.deleteDiscussion() has been renamed to octokit.teams.deleteDiscussionLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number',
                    },
                    deleteDiscussionComment: {
                        deprecated:
                            'octokit.teams.deleteDiscussionComment() has been renamed to octokit.teams.deleteDiscussionCommentLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
                    },
                    deleteDiscussionCommentInOrg: {
                        method: 'DELETE',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number',
                    },
                    deleteDiscussionCommentLegacy: {
                        deprecated:
                            'octokit.teams.deleteDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment-legacy',
                        method: 'DELETE',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
                    },
                    deleteDiscussionInOrg: {
                        method: 'DELETE',
                        params: {
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number',
                    },
                    deleteDiscussionLegacy: {
                        deprecated:
                            'octokit.teams.deleteDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy',
                        method: 'DELETE',
                        params: {
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number',
                    },
                    deleteInOrg: {
                        method: 'DELETE',
                        params: {org: {required: true, type: 'string'}, team_slug: {required: true, type: 'string'}},
                        url: '/orgs/:org/teams/:team_slug',
                    },
                    deleteLegacy: {
                        deprecated:
                            'octokit.teams.deleteLegacy() is deprecated, see https://developer.github.com/v3/teams/#delete-team-legacy',
                        method: 'DELETE',
                        params: {team_id: {required: true, type: 'integer'}},
                        url: '/teams/:team_id',
                    },
                    get: {
                        deprecated: 'octokit.teams.get() has been renamed to octokit.teams.getLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {team_id: {required: true, type: 'integer'}},
                        url: '/teams/:team_id',
                    },
                    getByName: {
                        method: 'GET',
                        params: {org: {required: true, type: 'string'}, team_slug: {required: true, type: 'string'}},
                        url: '/orgs/:org/teams/:team_slug',
                    },
                    getDiscussion: {
                        deprecated:
                            'octokit.teams.getDiscussion() has been renamed to octokit.teams.getDiscussionLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number',
                    },
                    getDiscussionComment: {
                        deprecated:
                            'octokit.teams.getDiscussionComment() has been renamed to octokit.teams.getDiscussionCommentLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
                    },
                    getDiscussionCommentInOrg: {
                        method: 'GET',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number',
                    },
                    getDiscussionCommentLegacy: {
                        deprecated:
                            'octokit.teams.getDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment-legacy',
                        method: 'GET',
                        params: {
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
                    },
                    getDiscussionInOrg: {
                        method: 'GET',
                        params: {
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number',
                    },
                    getDiscussionLegacy: {
                        deprecated:
                            'octokit.teams.getDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#get-a-single-discussion-legacy',
                        method: 'GET',
                        params: {
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number',
                    },
                    getLegacy: {
                        deprecated:
                            'octokit.teams.getLegacy() is deprecated, see https://developer.github.com/v3/teams/#get-team-legacy',
                        method: 'GET',
                        params: {team_id: {required: true, type: 'integer'}},
                        url: '/teams/:team_id',
                    },
                    getMember: {
                        deprecated:
                            'octokit.teams.getMember() has been renamed to octokit.teams.getMemberLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/members/:username',
                    },
                    getMemberLegacy: {
                        deprecated:
                            'octokit.teams.getMemberLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#get-team-member-legacy',
                        method: 'GET',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/members/:username',
                    },
                    getMembership: {
                        deprecated:
                            'octokit.teams.getMembership() has been renamed to octokit.teams.getMembershipLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/memberships/:username',
                    },
                    getMembershipInOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/memberships/:username',
                    },
                    getMembershipLegacy: {
                        deprecated:
                            'octokit.teams.getMembershipLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#get-team-membership-legacy',
                        method: 'GET',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/memberships/:username',
                    },
                    list: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                        },
                        url: '/orgs/:org/teams',
                    },
                    listChild: {
                        deprecated:
                            'octokit.teams.listChild() has been renamed to octokit.teams.listChildLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/teams',
                    },
                    listChildInOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/teams',
                    },
                    listChildLegacy: {
                        deprecated:
                            'octokit.teams.listChildLegacy() is deprecated, see https://developer.github.com/v3/teams/#list-child-teams-legacy',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/teams',
                    },
                    listDiscussionComments: {
                        deprecated:
                            'octokit.teams.listDiscussionComments() has been renamed to octokit.teams.listDiscussionCommentsLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments',
                    },
                    listDiscussionCommentsInOrg: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments',
                    },
                    listDiscussionCommentsLegacy: {
                        deprecated:
                            'octokit.teams.listDiscussionCommentsLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#list-comments-legacy',
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments',
                    },
                    listDiscussions: {
                        deprecated:
                            'octokit.teams.listDiscussions() has been renamed to octokit.teams.listDiscussionsLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions',
                    },
                    listDiscussionsInOrg: {
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions',
                    },
                    listDiscussionsLegacy: {
                        deprecated:
                            'octokit.teams.listDiscussionsLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#list-discussions-legacy',
                        method: 'GET',
                        params: {
                            direction: {enum: ['asc', 'desc'], type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions',
                    },
                    listForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/teams',
                    },
                    listMembers: {
                        deprecated:
                            'octokit.teams.listMembers() has been renamed to octokit.teams.listMembersLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            role: {enum: ['member', 'maintainer', 'all'], type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/members',
                    },
                    listMembersInOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            role: {enum: ['member', 'maintainer', 'all'], type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/members',
                    },
                    listMembersLegacy: {
                        deprecated:
                            'octokit.teams.listMembersLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#list-team-members-legacy',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            role: {enum: ['member', 'maintainer', 'all'], type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/members',
                    },
                    listPendingInvitations: {
                        deprecated:
                            'octokit.teams.listPendingInvitations() has been renamed to octokit.teams.listPendingInvitationsLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/invitations',
                    },
                    listPendingInvitationsInOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/invitations',
                    },
                    listPendingInvitationsLegacy: {
                        deprecated:
                            'octokit.teams.listPendingInvitationsLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/invitations',
                    },
                    listProjects: {
                        deprecated:
                            'octokit.teams.listProjects() has been renamed to octokit.teams.listProjectsLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects',
                    },
                    listProjectsInOrg: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/projects',
                    },
                    listProjectsLegacy: {
                        deprecated:
                            'octokit.teams.listProjectsLegacy() is deprecated, see https://developer.github.com/v3/teams/#list-team-projects-legacy',
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects',
                    },
                    listRepos: {
                        deprecated:
                            'octokit.teams.listRepos() has been renamed to octokit.teams.listReposLegacy() (2020-01-16)',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos',
                    },
                    listReposInOrg: {
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/repos',
                    },
                    listReposLegacy: {
                        deprecated:
                            'octokit.teams.listReposLegacy() is deprecated, see https://developer.github.com/v3/teams/#list-team-repos-legacy',
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos',
                    },
                    removeMember: {
                        deprecated:
                            'octokit.teams.removeMember() has been renamed to octokit.teams.removeMemberLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/members/:username',
                    },
                    removeMemberLegacy: {
                        deprecated:
                            'octokit.teams.removeMemberLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#remove-team-member-legacy',
                        method: 'DELETE',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/members/:username',
                    },
                    removeMembership: {
                        deprecated:
                            'octokit.teams.removeMembership() has been renamed to octokit.teams.removeMembershipLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/memberships/:username',
                    },
                    removeMembershipInOrg: {
                        method: 'DELETE',
                        params: {
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/memberships/:username',
                    },
                    removeMembershipLegacy: {
                        deprecated:
                            'octokit.teams.removeMembershipLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#remove-team-membership-legacy',
                        method: 'DELETE',
                        params: {
                            team_id: {required: true, type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/teams/:team_id/memberships/:username',
                    },
                    removeProject: {
                        deprecated:
                            'octokit.teams.removeProject() has been renamed to octokit.teams.removeProjectLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {
                            project_id: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects/:project_id',
                    },
                    removeProjectInOrg: {
                        method: 'DELETE',
                        params: {
                            org: {required: true, type: 'string'},
                            project_id: {required: true, type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/projects/:project_id',
                    },
                    removeProjectLegacy: {
                        deprecated:
                            'octokit.teams.removeProjectLegacy() is deprecated, see https://developer.github.com/v3/teams/#remove-team-project-legacy',
                        method: 'DELETE',
                        params: {
                            project_id: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects/:project_id',
                    },
                    removeRepo: {
                        deprecated:
                            'octokit.teams.removeRepo() has been renamed to octokit.teams.removeRepoLegacy() (2020-01-16)',
                        method: 'DELETE',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos/:owner/:repo',
                    },
                    removeRepoInOrg: {
                        method: 'DELETE',
                        params: {
                            org: {required: true, type: 'string'},
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/repos/:owner/:repo',
                    },
                    removeRepoLegacy: {
                        deprecated:
                            'octokit.teams.removeRepoLegacy() is deprecated, see https://developer.github.com/v3/teams/#remove-team-repository-legacy',
                        method: 'DELETE',
                        params: {
                            owner: {required: true, type: 'string'},
                            repo: {required: true, type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/repos/:owner/:repo',
                    },
                    reviewProject: {
                        deprecated:
                            'octokit.teams.reviewProject() has been renamed to octokit.teams.reviewProjectLegacy() (2020-01-16)',
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            project_id: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects/:project_id',
                    },
                    reviewProjectInOrg: {
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            org: {required: true, type: 'string'},
                            project_id: {required: true, type: 'integer'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/projects/:project_id',
                    },
                    reviewProjectLegacy: {
                        deprecated:
                            'octokit.teams.reviewProjectLegacy() is deprecated, see https://developer.github.com/v3/teams/#review-a-team-project-legacy',
                        headers: {accept: 'application/vnd.github.inertia-preview+json'},
                        method: 'GET',
                        params: {
                            project_id: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/projects/:project_id',
                    },
                    update: {
                        deprecated:
                            'octokit.teams.update() has been renamed to octokit.teams.updateLegacy() (2020-01-16)',
                        method: 'PATCH',
                        params: {
                            description: {type: 'string'},
                            name: {required: true, type: 'string'},
                            parent_team_id: {type: 'integer'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            privacy: {enum: ['secret', 'closed'], type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id',
                    },
                    updateDiscussion: {
                        deprecated:
                            'octokit.teams.updateDiscussion() has been renamed to octokit.teams.updateDiscussionLegacy() (2020-01-16)',
                        method: 'PATCH',
                        params: {
                            body: {type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                            title: {type: 'string'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number',
                    },
                    updateDiscussionComment: {
                        deprecated:
                            'octokit.teams.updateDiscussionComment() has been renamed to octokit.teams.updateDiscussionCommentLegacy() (2020-01-16)',
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
                    },
                    updateDiscussionCommentInOrg: {
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number',
                    },
                    updateDiscussionCommentLegacy: {
                        deprecated:
                            'octokit.teams.updateDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment-legacy',
                        method: 'PATCH',
                        params: {
                            body: {required: true, type: 'string'},
                            comment_number: {required: true, type: 'integer'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
                    },
                    updateDiscussionInOrg: {
                        method: 'PATCH',
                        params: {
                            body: {type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            org: {required: true, type: 'string'},
                            team_slug: {required: true, type: 'string'},
                            title: {type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug/discussions/:discussion_number',
                    },
                    updateDiscussionLegacy: {
                        deprecated:
                            'octokit.teams.updateDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#edit-a-discussion-legacy',
                        method: 'PATCH',
                        params: {
                            body: {type: 'string'},
                            discussion_number: {required: true, type: 'integer'},
                            team_id: {required: true, type: 'integer'},
                            title: {type: 'string'},
                        },
                        url: '/teams/:team_id/discussions/:discussion_number',
                    },
                    updateInOrg: {
                        method: 'PATCH',
                        params: {
                            description: {type: 'string'},
                            name: {required: true, type: 'string'},
                            org: {required: true, type: 'string'},
                            parent_team_id: {type: 'integer'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            privacy: {enum: ['secret', 'closed'], type: 'string'},
                            team_slug: {required: true, type: 'string'},
                        },
                        url: '/orgs/:org/teams/:team_slug',
                    },
                    updateLegacy: {
                        deprecated:
                            'octokit.teams.updateLegacy() is deprecated, see https://developer.github.com/v3/teams/#edit-team-legacy',
                        method: 'PATCH',
                        params: {
                            description: {type: 'string'},
                            name: {required: true, type: 'string'},
                            parent_team_id: {type: 'integer'},
                            permission: {enum: ['pull', 'push', 'admin'], type: 'string'},
                            privacy: {enum: ['secret', 'closed'], type: 'string'},
                            team_id: {required: true, type: 'integer'},
                        },
                        url: '/teams/:team_id',
                    },
                },
                users: {
                    addEmails: {
                        method: 'POST',
                        params: {emails: {required: true, type: 'string[]'}},
                        url: '/user/emails',
                    },
                    block: {
                        method: 'PUT',
                        params: {username: {required: true, type: 'string'}},
                        url: '/user/blocks/:username',
                    },
                    checkBlocked: {
                        method: 'GET',
                        params: {username: {required: true, type: 'string'}},
                        url: '/user/blocks/:username',
                    },
                    checkFollowing: {
                        method: 'GET',
                        params: {username: {required: true, type: 'string'}},
                        url: '/user/following/:username',
                    },
                    checkFollowingForUser: {
                        method: 'GET',
                        params: {
                            target_user: {required: true, type: 'string'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/following/:target_user',
                    },
                    createGpgKey: {
                        method: 'POST',
                        params: {armored_public_key: {type: 'string'}},
                        url: '/user/gpg_keys',
                    },
                    createPublicKey: {
                        method: 'POST',
                        params: {key: {type: 'string'}, title: {type: 'string'}},
                        url: '/user/keys',
                    },
                    deleteEmails: {
                        method: 'DELETE',
                        params: {emails: {required: true, type: 'string[]'}},
                        url: '/user/emails',
                    },
                    deleteGpgKey: {
                        method: 'DELETE',
                        params: {gpg_key_id: {required: true, type: 'integer'}},
                        url: '/user/gpg_keys/:gpg_key_id',
                    },
                    deletePublicKey: {
                        method: 'DELETE',
                        params: {key_id: {required: true, type: 'integer'}},
                        url: '/user/keys/:key_id',
                    },
                    follow: {
                        method: 'PUT',
                        params: {username: {required: true, type: 'string'}},
                        url: '/user/following/:username',
                    },
                    getAuthenticated: {method: 'GET', params: {}, url: '/user'},
                    getByUsername: {
                        method: 'GET',
                        params: {username: {required: true, type: 'string'}},
                        url: '/users/:username',
                    },
                    getContextForUser: {
                        method: 'GET',
                        params: {
                            subject_id: {type: 'string'},
                            subject_type: {
                                enum: ['organization', 'repository', 'issue', 'pull_request'],
                                type: 'string',
                            },
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/hovercard',
                    },
                    getGpgKey: {
                        method: 'GET',
                        params: {gpg_key_id: {required: true, type: 'integer'}},
                        url: '/user/gpg_keys/:gpg_key_id',
                    },
                    getPublicKey: {
                        method: 'GET',
                        params: {key_id: {required: true, type: 'integer'}},
                        url: '/user/keys/:key_id',
                    },
                    list: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}, since: {type: 'string'}},
                        url: '/users',
                    },
                    listBlocked: {method: 'GET', params: {}, url: '/user/blocks'},
                    listEmails: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/emails',
                    },
                    listFollowersForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/followers',
                    },
                    listFollowersForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/followers',
                    },
                    listFollowingForAuthenticatedUser: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/following',
                    },
                    listFollowingForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/following',
                    },
                    listGpgKeys: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/gpg_keys',
                    },
                    listGpgKeysForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/gpg_keys',
                    },
                    listPublicEmails: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/public_emails',
                    },
                    listPublicKeys: {
                        method: 'GET',
                        params: {page: {type: 'integer'}, per_page: {type: 'integer'}},
                        url: '/user/keys',
                    },
                    listPublicKeysForUser: {
                        method: 'GET',
                        params: {
                            page: {type: 'integer'},
                            per_page: {type: 'integer'},
                            username: {required: true, type: 'string'},
                        },
                        url: '/users/:username/keys',
                    },
                    togglePrimaryEmailVisibility: {
                        method: 'PATCH',
                        params: {email: {required: true, type: 'string'}, visibility: {required: true, type: 'string'}},
                        url: '/user/email/visibility',
                    },
                    unblock: {
                        method: 'DELETE',
                        params: {username: {required: true, type: 'string'}},
                        url: '/user/blocks/:username',
                    },
                    unfollow: {
                        method: 'DELETE',
                        params: {username: {required: true, type: 'string'}},
                        url: '/user/following/:username',
                    },
                    updateAuthenticated: {
                        method: 'PATCH',
                        params: {
                            bio: {type: 'string'},
                            blog: {type: 'string'},
                            company: {type: 'string'},
                            email: {type: 'string'},
                            hireable: {type: 'boolean'},
                            location: {type: 'string'},
                            name: {type: 'string'},
                        },
                        url: '/user',
                    },
                },
            };
            const s = '2.4.0';
            function registerEndpoints(e, t) {
                Object.keys(t).forEach((r) => {
                    if (!e[r]) {
                        e[r] = {};
                    }
                    Object.keys(t[r]).forEach((i) => {
                        const s = t[r][i];
                        const a = ['method', 'url', 'headers'].reduce((e, t) => {
                            if (typeof s[t] !== 'undefined') {
                                e[t] = s[t];
                            }
                            return e;
                        }, {});
                        a.request = {validate: s.params};
                        let o = e.request.defaults(a);
                        const n = Object.keys(s.params || {}).find((e) => s.params[e].deprecated);
                        if (n) {
                            const t = patchForDeprecation.bind(null, e, s);
                            o = t(e.request.defaults(a), `.${r}.${i}()`);
                            o.endpoint = t(o.endpoint, `.${r}.${i}.endpoint()`);
                            o.endpoint.merge = t(o.endpoint.merge, `.${r}.${i}.endpoint.merge()`);
                        }
                        if (s.deprecated) {
                            e[r][i] = Object.assign(function deprecatedEndpointMethod() {
                                e.log.warn(new A.Deprecation(`[@octokit/rest] ${s.deprecated}`));
                                e[r][i] = o;
                                return o.apply(null, arguments);
                            }, o);
                            return;
                        }
                        e[r][i] = o;
                    });
                });
            }
            function patchForDeprecation(e, t, r, i) {
                const patchedMethod = (s) => {
                    s = Object.assign({}, s);
                    Object.keys(s).forEach((r) => {
                        if (t.params[r] && t.params[r].deprecated) {
                            const a = t.params[r].alias;
                            e.log.warn(
                                new A.Deprecation(
                                    `[@octokit/rest] "${r}" parameter is deprecated for "${i}". Use "${a}" instead`,
                                ),
                            );
                            if (!(a in s)) {
                                s[a] = s[r];
                            }
                            delete s[r];
                        }
                    });
                    return r(s);
                };
                Object.keys(r).forEach((e) => {
                    patchedMethod[e] = r[e];
                });
                return patchedMethod;
            }
            function restEndpointMethods(e) {
                e.registerEndpoints = registerEndpoints.bind(null, e);
                registerEndpoints(e, i);
                [
                    ['gitdata', 'git'],
                    ['authorization', 'oauthAuthorizations'],
                    ['pullRequests', 'pulls'],
                ].forEach(([t, r]) => {
                    Object.defineProperty(e, t, {
                        get() {
                            e.log.warn(
                                new A.Deprecation(
                                    `[@octokit/plugin-rest-endpoint-methods] "octokit.${t}.*" methods are deprecated, use "octokit.${r}.*" instead`,
                                ),
                            );
                            return e[r];
                        },
                    });
                });
                return {};
            }
            restEndpointMethods.VERSION = s;
            t.restEndpointMethods = restEndpointMethods;
        },
        537: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = r(8932);
            var i = _interopDefault(r(1223));
            const s = i((e) => console.warn(e));
            class RequestError extends Error {
                constructor(e, t, r) {
                    super(e);
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    }
                    this.name = 'HttpError';
                    this.status = t;
                    Object.defineProperty(this, 'code', {
                        get() {
                            s(
                                new A.Deprecation(
                                    '[@octokit/request-error] `error.code` is deprecated, use `error.status`.',
                                ),
                            );
                            return t;
                        },
                    });
                    this.headers = r.headers || {};
                    const i = Object.assign({}, r.request);
                    if (r.request.headers.authorization) {
                        i.headers = Object.assign({}, r.request.headers, {
                            authorization: r.request.headers.authorization.replace(/ .*$/, ' [REDACTED]'),
                        });
                    }
                    i.url = i.url
                        .replace(/\bclient_secret=\w+/g, 'client_secret=[REDACTED]')
                        .replace(/\baccess_token=\w+/g, 'access_token=[REDACTED]');
                    this.request = i;
                }
            }
            t.RequestError = RequestError;
        },
        6234: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = r(9440);
            var i = r(5030);
            var s = _interopDefault(r(9886));
            var a = _interopDefault(r(467));
            var o = r(13);
            const n = '5.4.4';
            function getBufferResponse(e) {
                return e.arrayBuffer();
            }
            function fetchWrapper(e) {
                if (s(e.body) || Array.isArray(e.body)) {
                    e.body = JSON.stringify(e.body);
                }
                let t = {};
                let r;
                let A;
                const i = (e.request && e.request.fetch) || a;
                return i(
                    e.url,
                    Object.assign(
                        {method: e.method, body: e.body, headers: e.headers, redirect: e.redirect},
                        e.request,
                    ),
                )
                    .then((i) => {
                        A = i.url;
                        r = i.status;
                        for (const e of i.headers) {
                            t[e[0]] = e[1];
                        }
                        if (r === 204 || r === 205) {
                            return;
                        }
                        if (e.method === 'HEAD') {
                            if (r < 400) {
                                return;
                            }
                            throw new o.RequestError(i.statusText, r, {headers: t, request: e});
                        }
                        if (r === 304) {
                            throw new o.RequestError('Not modified', r, {headers: t, request: e});
                        }
                        if (r >= 400) {
                            return i.text().then((A) => {
                                const i = new o.RequestError(A, r, {headers: t, request: e});
                                try {
                                    let e = JSON.parse(i.message);
                                    Object.assign(i, e);
                                    let t = e.errors;
                                    i.message = i.message + ': ' + t.map(JSON.stringify).join(', ');
                                } catch (e) {}
                                throw i;
                            });
                        }
                        const s = i.headers.get('content-type');
                        if (/application\/json/.test(s)) {
                            return i.json();
                        }
                        if (!s || /^text\/|charset=utf-8$/.test(s)) {
                            return i.text();
                        }
                        return getBufferResponse(i);
                    })
                    .then((e) => ({status: r, url: A, headers: t, data: e}))
                    .catch((r) => {
                        if (r instanceof o.RequestError) {
                            throw r;
                        }
                        throw new o.RequestError(r.message, 500, {headers: t, request: e});
                    });
            }
            function withDefaults(e, t) {
                const r = e.defaults(t);
                const newApi = function (e, t) {
                    const A = r.merge(e, t);
                    if (!A.request || !A.request.hook) {
                        return fetchWrapper(r.parse(A));
                    }
                    const request = (e, t) => fetchWrapper(r.parse(r.merge(e, t)));
                    Object.assign(request, {endpoint: r, defaults: withDefaults.bind(null, r)});
                    return A.request.hook(request, A);
                };
                return Object.assign(newApi, {endpoint: r, defaults: withDefaults.bind(null, r)});
            }
            const p = withDefaults(A.endpoint, {
                headers: {'user-agent': `octokit-request.js/${n} ${i.getUserAgent()}`},
            });
            t.request = p;
        },
        13: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = r(8932);
            var i = _interopDefault(r(1223));
            const s = i((e) => console.warn(e));
            class RequestError extends Error {
                constructor(e, t, r) {
                    super(e);
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    }
                    this.name = 'HttpError';
                    this.status = t;
                    Object.defineProperty(this, 'code', {
                        get() {
                            s(
                                new A.Deprecation(
                                    '[@octokit/request-error] `error.code` is deprecated, use `error.status`.',
                                ),
                            );
                            return t;
                        },
                    });
                    this.headers = r.headers || {};
                    const i = Object.assign({}, r.request);
                    if (r.request.headers.authorization) {
                        i.headers = Object.assign({}, r.request.headers, {
                            authorization: r.request.headers.authorization.replace(/ .*$/, ' [REDACTED]'),
                        });
                    }
                    i.url = i.url
                        .replace(/\bclient_secret=\w+/g, 'client_secret=[REDACTED]')
                        .replace(/\baccess_token=\w+/g, 'access_token=[REDACTED]');
                    this.request = i;
                }
            }
            t.RequestError = RequestError;
        },
        9886: (e) => {
            'use strict';
            /*!
             * isobject <https://github.com/jonschlinkert/isobject>
             *
             * Copyright (c) 2014-2017, Jon Schlinkert.
             * Released under the MIT License.
             */ function isObject(e) {
                return e != null && typeof e === 'object' && Array.isArray(e) === false;
            }
            /*!
             * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
             *
             * Copyright (c) 2014-2017, Jon Schlinkert.
             * Released under the MIT License.
             */ function isObjectObject(e) {
                return isObject(e) === true && Object.prototype.toString.call(e) === '[object Object]';
            }
            function isPlainObject(e) {
                var t, r;
                if (isObjectObject(e) === false) return false;
                t = e.constructor;
                if (typeof t !== 'function') return false;
                r = t.prototype;
                if (isObjectObject(r) === false) return false;
                if (r.hasOwnProperty('isPrototypeOf') === false) {
                    return false;
                }
                return true;
            }
            e.exports = isPlainObject;
        },
        9351: (e, t, r) => {
            const {requestLog: A} = r(8883);
            const {restEndpointMethods: i} = r(3044);
            const s = r(9833);
            const a = [r(4555), r(3691), A, r(8579), i, r(2657), r(2072)];
            const o = s.plugin(a);
            function DeprecatedOctokit(e) {
                const t = e && e.log && e.log.warn ? e.log.warn : console.warn;
                t(
                    '[@octokit/rest] `const Octokit = require("@octokit/rest")` is deprecated. Use `const { Octokit } = require("@octokit/rest")` instead',
                );
                return new o(e);
            }
            const n = Object.assign(DeprecatedOctokit, {Octokit: o});
            Object.keys(o).forEach((e) => {
                if (o.hasOwnProperty(e)) {
                    n[e] = o[e];
                }
            });
            e.exports = n;
        },
        823: (e, t, r) => {
            e.exports = Octokit;
            const {request: A} = r(6234);
            const i = r(3682);
            const s = r(4613);
            function Octokit(e, t) {
                t = t || {};
                const r = new i.Collection();
                const a = Object.assign(
                    {debug: () => {}, info: () => {}, warn: console.warn, error: console.error},
                    t && t.log,
                );
                const o = {hook: r, log: a, request: A.defaults(s(t, a, r))};
                e.forEach((e) => e(o, t));
                return o;
            }
        },
        9833: (e, t, r) => {
            const A = r(5320);
            e.exports = A();
        },
        5320: (e, t, r) => {
            e.exports = factory;
            const A = r(823);
            const i = r(7826);
            function factory(e) {
                const t = A.bind(null, e || []);
                t.plugin = i.bind(null, e || []);
                return t;
            }
        },
        4613: (e, t, r) => {
            e.exports = parseOptions;
            const {Deprecation: A} = r(8932);
            const {getUserAgent: i} = r(3318);
            const s = r(1223);
            const a = r(1322);
            const o = s((e, t) => e.warn(t));
            const n = s((e, t) => e.warn(t));
            const p = s((e, t) => e.warn(t));
            function parseOptions(e, t, r) {
                if (e.headers) {
                    e.headers = Object.keys(e.headers).reduce((t, r) => {
                        t[r.toLowerCase()] = e.headers[r];
                        return t;
                    }, {});
                }
                const s = {headers: e.headers || {}, request: e.request || {}, mediaType: {previews: [], format: ''}};
                if (e.baseUrl) {
                    s.baseUrl = e.baseUrl;
                }
                if (e.userAgent) {
                    s.headers['user-agent'] = e.userAgent;
                }
                if (e.previews) {
                    s.mediaType.previews = e.previews;
                }
                if (e.timeZone) {
                    s.headers['time-zone'] = e.timeZone;
                }
                if (e.timeout) {
                    o(
                        t,
                        new A(
                            '[@octokit/rest] new Octokit({timeout}) is deprecated. Use {request: {timeout}} instead. See https://github.com/octokit/request.js#request',
                        ),
                    );
                    s.request.timeout = e.timeout;
                }
                if (e.agent) {
                    n(
                        t,
                        new A(
                            '[@octokit/rest] new Octokit({agent}) is deprecated. Use {request: {agent}} instead. See https://github.com/octokit/request.js#request',
                        ),
                    );
                    s.request.agent = e.agent;
                }
                if (e.headers) {
                    p(
                        t,
                        new A(
                            '[@octokit/rest] new Octokit({headers}) is deprecated. Use {userAgent, previews} instead. See https://github.com/octokit/request.js#request',
                        ),
                    );
                }
                const d = s.headers['user-agent'];
                const l = `octokit.js/${a.version} ${i()}`;
                s.headers['user-agent'] = [d, l].filter(Boolean).join(' ');
                s.request.hook = r.bind(null, 'request');
                return s;
            }
        },
        7826: (e, t, r) => {
            e.exports = registerPlugin;
            const A = r(5320);
            function registerPlugin(e, t) {
                return A(e.includes(t) ? e : e.concat(t));
            }
        },
        3318: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = _interopDefault(r(4824));
            function getUserAgent() {
                try {
                    return `Node.js/${process.version.substr(1)} (${A()}; ${process.arch})`;
                } catch (e) {
                    if (/wmic os get Caption/.test(e.message)) {
                        return 'Windows <version undetectable>';
                    }
                    throw e;
                }
            }
            t.getUserAgent = getUserAgent;
        },
        795: (e, t, r) => {
            e.exports = authenticate;
            const {Deprecation: A} = r(8932);
            const i = r(1223);
            const s = i((e, t) => e.warn(t));
            function authenticate(e, t) {
                s(
                    e.octokit.log,
                    new A(
                        '[@octokit/rest] octokit.authenticate() is deprecated. Use "auth" constructor option instead.',
                    ),
                );
                if (!t) {
                    e.auth = false;
                    return;
                }
                switch (t.type) {
                    case 'basic':
                        if (!t.username || !t.password) {
                            throw new Error('Basic authentication requires both a username and password to be set');
                        }
                        break;
                    case 'oauth':
                        if (!t.token && !(t.key && t.secret)) {
                            throw new Error('OAuth2 authentication requires a token or key & secret to be set');
                        }
                        break;
                    case 'token':
                    case 'app':
                        if (!t.token) {
                            throw new Error('Token authentication requires a token to be set');
                        }
                        break;
                    default:
                        throw new Error("Invalid authentication type, must be 'basic', 'oauth', 'token' or 'app'");
                }
                e.auth = t;
            }
        },
        9894: (e, t, r) => {
            e.exports = authenticationBeforeRequest;
            const A = r(2358);
            const i = r(8216);
            function authenticationBeforeRequest(e, t) {
                if (!e.auth.type) {
                    return;
                }
                if (e.auth.type === 'basic') {
                    const r = A(`${e.auth.username}:${e.auth.password}`);
                    t.headers.authorization = `Basic ${r}`;
                    return;
                }
                if (e.auth.type === 'token') {
                    t.headers.authorization = `token ${e.auth.token}`;
                    return;
                }
                if (e.auth.type === 'app') {
                    t.headers.authorization = `Bearer ${e.auth.token}`;
                    const r = t.headers.accept.split(',').concat('application/vnd.github.machine-man-preview+json');
                    t.headers.accept = i(r).filter(Boolean).join(',');
                    return;
                }
                t.url += t.url.indexOf('?') === -1 ? '?' : '&';
                if (e.auth.token) {
                    t.url += `access_token=${encodeURIComponent(e.auth.token)}`;
                    return;
                }
                const r = encodeURIComponent(e.auth.key);
                const s = encodeURIComponent(e.auth.secret);
                t.url += `client_id=${r}&client_secret=${s}`;
            }
        },
        3691: (e, t, r) => {
            e.exports = authenticationPlugin;
            const {Deprecation: A} = r(8932);
            const i = r(1223);
            const s = i((e, t) => e.warn(t));
            const a = r(795);
            const o = r(9894);
            const n = r(4275);
            function authenticationPlugin(e, t) {
                if (t.auth) {
                    e.authenticate = () => {
                        s(
                            e.log,
                            new A(
                                '[@octokit/rest] octokit.authenticate() is deprecated and has no effect when "auth" option is set on Octokit constructor',
                            ),
                        );
                    };
                    return;
                }
                const r = {octokit: e, auth: false};
                e.authenticate = a.bind(null, r);
                e.hook.before('request', o.bind(null, r));
                e.hook.error('request', n.bind(null, r));
            }
        },
        4275: (e, t, r) => {
            e.exports = authenticationRequestError;
            const {RequestError: A} = r(537);
            function authenticationRequestError(e, t, r) {
                if (!t.headers) throw t;
                const i = /required/.test(t.headers['x-github-otp'] || '');
                if (t.status !== 401 || !i) {
                    throw t;
                }
                if (t.status === 401 && i && t.request && t.request.headers['x-github-otp']) {
                    throw new A('Invalid one-time password for two-factor authentication', 401, {
                        headers: t.headers,
                        request: r,
                    });
                }
                if (typeof e.auth.on2fa !== 'function') {
                    throw new A(
                        '2FA required, but options.on2fa is not a function. See https://github.com/octokit/rest.js#authentication',
                        401,
                        {headers: t.headers, request: r},
                    );
                }
                return Promise.resolve()
                    .then(() => e.auth.on2fa())
                    .then((t) => {
                        const A = Object.assign(r, {headers: Object.assign({'x-github-otp': t}, r.headers)});
                        return e.octokit.request(A);
                    });
            }
        },
        9733: (e, t, r) => {
            e.exports = authenticationBeforeRequest;
            const A = r(2358);
            const i = r(9603);
            function authenticationBeforeRequest(e, t) {
                if (typeof e.auth === 'string') {
                    t.headers.authorization = i(e.auth);
                    return;
                }
                if (e.auth.username) {
                    const r = A(`${e.auth.username}:${e.auth.password}`);
                    t.headers.authorization = `Basic ${r}`;
                    if (e.otp) {
                        t.headers['x-github-otp'] = e.otp;
                    }
                    return;
                }
                if (e.auth.clientId) {
                    if (/\/applications\/:?[\w_]+\/tokens\/:?[\w_]+($|\?)/.test(t.url)) {
                        const r = A(`${e.auth.clientId}:${e.auth.clientSecret}`);
                        t.headers.authorization = `Basic ${r}`;
                        return;
                    }
                    t.url += t.url.indexOf('?') === -1 ? '?' : '&';
                    t.url += `client_id=${e.auth.clientId}&client_secret=${e.auth.clientSecret}`;
                    return;
                }
                return Promise.resolve()
                    .then(() => e.auth())
                    .then((e) => {
                        t.headers.authorization = i(e);
                    });
            }
        },
        4555: (e, t, r) => {
            e.exports = authenticationPlugin;
            const {createTokenAuth: A} = r(334);
            const {Deprecation: i} = r(8932);
            const s = r(1223);
            const a = r(9733);
            const o = r(3217);
            const n = r(8997);
            const p = r(9603);
            const d = s((e, t) => e.warn(t));
            const l = s((e, t) => e.warn(t));
            function authenticationPlugin(e, t) {
                if (t.authStrategy) {
                    const r = t.authStrategy(t.auth);
                    e.hook.wrap('request', r.hook);
                    e.auth = r;
                    return;
                }
                if (!t.auth) {
                    e.auth = () => Promise.resolve({type: 'unauthenticated'});
                    return;
                }
                const r = typeof t.auth === 'string' && /^basic/.test(p(t.auth));
                if (typeof t.auth === 'string' && !r) {
                    const r = A(t.auth);
                    e.hook.wrap('request', r.hook);
                    e.auth = r;
                    return;
                }
                const [s, u] = r
                    ? [
                          d,
                          'Setting the "new Octokit({ auth })" option to a Basic Auth string is deprecated. Use https://github.com/octokit/auth-basic.js instead. See (https://octokit.github.io/rest.js/#authentication)',
                      ]
                    : [
                          l,
                          'Setting the "new Octokit({ auth })" option to an object without also setting the "authStrategy" option is deprecated and will be removed in v17. See (https://octokit.github.io/rest.js/#authentication)',
                      ];
                s(e.log, new i('[@octokit/rest] ' + u));
                e.auth = () => Promise.resolve({type: 'deprecated', message: u});
                n(t.auth);
                const c = {octokit: e, auth: t.auth};
                e.hook.before('request', a.bind(null, c));
                e.hook.error('request', o.bind(null, c));
            }
        },
        3217: (e, t, r) => {
            e.exports = authenticationRequestError;
            const {RequestError: A} = r(537);
            function authenticationRequestError(e, t, r) {
                if (!t.headers) throw t;
                const i = /required/.test(t.headers['x-github-otp'] || '');
                if (t.status !== 401 || !i) {
                    throw t;
                }
                if (t.status === 401 && i && t.request && t.request.headers['x-github-otp']) {
                    if (e.otp) {
                        delete e.otp;
                    } else {
                        throw new A('Invalid one-time password for two-factor authentication', 401, {
                            headers: t.headers,
                            request: r,
                        });
                    }
                }
                if (typeof e.auth.on2fa !== 'function') {
                    throw new A(
                        '2FA required, but options.on2fa is not a function. See https://github.com/octokit/rest.js#authentication',
                        401,
                        {headers: t.headers, request: r},
                    );
                }
                return Promise.resolve()
                    .then(() => e.auth.on2fa())
                    .then((t) => {
                        const A = Object.assign(r, {headers: Object.assign(r.headers, {'x-github-otp': t})});
                        return e.octokit.request(A).then((r) => {
                            e.otp = t;
                            return r;
                        });
                    });
            }
        },
        8997: (e) => {
            e.exports = validateAuth;
            function validateAuth(e) {
                if (typeof e === 'string') {
                    return;
                }
                if (typeof e === 'function') {
                    return;
                }
                if (e.username && e.password) {
                    return;
                }
                if (e.clientId && e.clientSecret) {
                    return;
                }
                throw new Error(`Invalid "auth" option: ${JSON.stringify(e)}`);
            }
        },
        9603: (e, t, r) => {
            e.exports = withAuthorizationPrefix;
            const A = r(5224);
            const i = /^[\w-]+:/;
            function withAuthorizationPrefix(e) {
                if (/^(basic|bearer|token) /i.test(e)) {
                    return e;
                }
                try {
                    if (i.test(A(e))) {
                        return `basic ${e}`;
                    }
                } catch (e) {}
                if (e.split(/\./).length === 3) {
                    return `bearer ${e}`;
                }
                return `token ${e}`;
            }
        },
        8579: (e, t, r) => {
            e.exports = paginatePlugin;
            const {paginateRest: A} = r(4193);
            function paginatePlugin(e) {
                Object.assign(e, A(e));
            }
        },
        2657: (e, t, r) => {
            e.exports = octokitValidate;
            const A = r(6132);
            function octokitValidate(e) {
                e.hook.before('request', A.bind(null, e));
            }
        },
        6132: (e, t, r) => {
            'use strict';
            e.exports = validate;
            const {RequestError: A} = r(537);
            const i = r(9197);
            const s = r(1552);
            function validate(e, t) {
                if (!t.request.validate) {
                    return;
                }
                const {validate: r} = t.request;
                Object.keys(r).forEach((e) => {
                    const a = i(r, e);
                    const o = a.type;
                    let n;
                    let p;
                    let d = true;
                    let l = false;
                    if (/\./.test(e)) {
                        n = e.replace(/\.[^.]+$/, '');
                        l = n.slice(-2) === '[]';
                        if (l) {
                            n = n.slice(0, -2);
                        }
                        p = i(t, n);
                        d = n === 'headers' || (typeof p === 'object' && p !== null);
                    }
                    const u = l ? (i(t, n) || []).map((t) => t[e.split(/\./).pop()]) : [i(t, e)];
                    u.forEach((r, i) => {
                        const n = typeof r !== 'undefined';
                        const p = r === null;
                        const u = l ? e.replace(/\[\]/, `[${i}]`) : e;
                        if (!a.required && !n) {
                            return;
                        }
                        if (!d) {
                            return;
                        }
                        if (a.allowNull && p) {
                            return;
                        }
                        if (!a.allowNull && p) {
                            throw new A(`'${u}' cannot be null`, 400, {request: t});
                        }
                        if (a.required && !n) {
                            throw new A(`Empty value for parameter '${u}': ${JSON.stringify(r)}`, 400, {request: t});
                        }
                        if (o === 'integer') {
                            const e = r;
                            r = parseInt(r, 10);
                            if (isNaN(r)) {
                                throw new A(`Invalid value for parameter '${u}': ${JSON.stringify(e)} is NaN`, 400, {
                                    request: t,
                                });
                            }
                        }
                        if (a.enum && a.enum.indexOf(String(r)) === -1) {
                            throw new A(`Invalid value for parameter '${u}': ${JSON.stringify(r)}`, 400, {request: t});
                        }
                        if (a.validation) {
                            const e = new RegExp(a.validation);
                            if (!e.test(r)) {
                                throw new A(`Invalid value for parameter '${u}': ${JSON.stringify(r)}`, 400, {
                                    request: t,
                                });
                            }
                        }
                        if (o === 'object' && typeof r === 'string') {
                            try {
                                r = JSON.parse(r);
                            } catch (e) {
                                throw new A(
                                    `JSON parse error of value for parameter '${u}': ${JSON.stringify(r)}`,
                                    400,
                                    {request: t},
                                );
                            }
                        }
                        s(t, a.mapTo || u, r);
                    });
                });
                return t;
            }
        },
        8675: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            const getCommitSubjectAndBody = (e) => {
                const [t, ...r] = e.split(/(\r\n|\r|\n){2}/u);
                return {
                    body: r
                        .map((e) => e.trim())
                        .filter((e) => e !== '')
                        .join('\n'),
                    subject: t,
                };
            };
            const getAutosquashMode = ({commitDetails: e, message: t}) => {
                const r = new RegExp(
                    `^(fixup|squash)! (fixup! |squash! )*(${getCommitSubjectAndBody(e.message).subject}|${
                        e.sha
                    }|${e.sha.substr(7)})$`,
                    'u',
                ).exec(getCommitSubjectAndBody(t).subject);
                if (!r) {
                    return null;
                }
                return r[1] === 'fixup' ? 'fixup' : 'squash';
            };
            const getNewAutosquashMessage = ({commitsDetails: e, message: t, mode: r, step: A}) => {
                const i =
                    A.autosquashMessage === null ? e.find(({sha: e}) => e === A.shas[0]).message : A.autosquashMessage;
                return r === 'squash' ? `${i}\n\n${t}` : i;
            };
            const groupNonAutosquashingSteps = ({newStep: e, steps: t}) =>
                e.autosquashMessage === null && t.length > 0 && t[t.length - 1].autosquashMessage === null
                    ? [...t.slice(0, -1), {autosquashMessage: null, shas: [...t[t.length - 1].shas, ...e.shas]}]
                    : [...t, e];
            const getAutosquashingSteps = (e) => {
                const t = new Set();
                const r = [];
                return e.reduce((r, A) => {
                    if (t.has(A.sha)) {
                        return r;
                    }
                    t.add(A.sha);
                    const i = {autosquashMessage: null, shas: [A.sha]};
                    const s = e
                        .filter(({sha: e}) => !t.has(e))
                        .reduce((r, {message: i, sha: s}) => {
                            const a = getAutosquashMode({commitDetails: A, message: i});
                            if (a === null) {
                                return r;
                            }
                            t.add(s);
                            return {
                                autosquashMessage: getNewAutosquashMessage({
                                    commitsDetails: e,
                                    message: i,
                                    mode: a,
                                    step: r,
                                }),
                                shas: [...r.shas, s],
                            };
                        }, i);
                    return groupNonAutosquashingSteps({newStep: s, steps: r});
                }, r);
            };
            t.getAutosquashingSteps = getAutosquashingSteps;
        },
        8911: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    return new (r || (r = Promise))(function (i, s) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function step(e) {
                            e.done
                                ? i(e.value)
                                : new r(function (t) {
                                      t(e.value);
                                  }).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            const i = r(8237);
            const s = r(9407);
            const a = r(1370);
            const o = r(8675);
            const n = i('github-rebase');
            const needAutosquashing = ({octokit: e, owner: t, pullRequestNumber: r, repo: i}) =>
                A(this, void 0, void 0, function* () {
                    const A = yield a.fetchCommitsDetails({octokit: e, owner: t, pullRequestNumber: r, repo: i});
                    const s = o.getAutosquashingSteps(A);
                    return s.length > 1 || (s[0] && s[0].autosquashMessage !== null);
                });
            t.needAutosquashing = needAutosquashing;
            const autosquash = ({
                commitsDetails: e,
                octokit: t,
                owner: r,
                parent: i,
                ref: s,
                refSha: o,
                repo: n,
                step: p,
            }) =>
                A(this, void 0, void 0, function* () {
                    const {author: A, committer: d} = e.find(({sha: e}) => e === p.shas[0]);
                    const {
                        data: {
                            tree: {sha: l},
                        },
                    } = yield t.git.getCommit({commit_sha: o, owner: r, repo: n});
                    const {
                        data: {sha: u},
                    } = yield t.git.createCommit({
                        author: A,
                        committer: d,
                        message: String(p.autosquashMessage),
                        owner: r,
                        parents: [i],
                        repo: n,
                        tree: l,
                    });
                    yield a.updateRef({force: true, octokit: t, owner: r, ref: s, repo: n, sha: u});
                    return u;
                });
            const performRebase = ({commitsDetails: e, octokit: t, owner: r, ref: i, repo: n}) =>
                A(this, void 0, void 0, function* () {
                    const p = yield a.fetchRefSha({octokit: t, owner: r, ref: i, repo: n});
                    const d = yield o.getAutosquashingSteps(e).reduce(
                        (a, o) =>
                            A(this, void 0, void 0, function* () {
                                const A = yield a;
                                const p = yield s.cherryPickCommits({
                                    commits: o.shas,
                                    head: i,
                                    octokit: t,
                                    owner: r,
                                    repo: n,
                                });
                                if (o.autosquashMessage === null) {
                                    return p;
                                }
                                return autosquash({
                                    commitsDetails: e,
                                    octokit: t,
                                    owner: r,
                                    parent: A,
                                    ref: i,
                                    refSha: p,
                                    repo: n,
                                    step: o,
                                });
                            }),
                        Promise.resolve(p),
                    );
                    return d;
                });
            const checkSameHead = ({octokit: e, owner: t, ref: r, repo: i, sha: s}) =>
                A(this, void 0, void 0, function* () {
                    const A = yield a.fetchRefSha({octokit: e, owner: t, ref: r, repo: i});
                    if (A !== s) {
                        throw new Error(
                            [
                                `Rebase aborted because the head branch changed.`,
                                `The current SHA of ${r} is ${A} but it was expected to still be ${s}.`,
                            ].join('\n'),
                        );
                    }
                });
            const rebasePullRequest = ({
                _intercept: e = () => Promise.resolve(),
                octokit: t,
                owner: r,
                pullRequestNumber: i,
                repo: s,
                base: o,
            }) =>
                A(this, void 0, void 0, function* () {
                    n('starting', {pullRequestNumber: i, owner: r, repo: s, base: o});
                    let p;
                    const {
                        data: {
                            base: {ref: d},
                            head: {ref: l, sha: u},
                        },
                    } = yield t.pulls.get({owner: r, pull_number: i, repo: s});
                    p = !!o ? `refs/heads/${o}` : d;
                    const c = yield a.fetchRefSha({octokit: t, owner: r, ref: p, repo: s});
                    const g = yield a.fetchCommitsDetails({octokit: t, owner: r, pullRequestNumber: i, repo: s});
                    n('commits details fetched', {baseInitialSha: c, commitsDetails: g, headRef: l, initialHeadSha: u});
                    yield e({initialHeadSha: u});
                    return a.withTemporaryRef({
                        action: (e) =>
                            A(this, void 0, void 0, function* () {
                                n({temporaryRef: e});
                                const A = yield performRebase({
                                    commitsDetails: g,
                                    octokit: t,
                                    owner: r,
                                    ref: e,
                                    repo: s,
                                });
                                yield checkSameHead({octokit: t, owner: r, ref: l, repo: s, sha: u});
                                n('updating ref with new SHA', A);
                                yield a.updateRef({force: true, octokit: t, owner: r, ref: l, repo: s, sha: A});
                                n('ref updated');
                                return A;
                            }),
                        octokit: t,
                        owner: r,
                        ref: `rebase-pull-request-${i}`,
                        repo: s,
                        sha: c,
                    });
                });
            t.rebasePullRequest = rebasePullRequest;
        },
        9407: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    return new (r || (r = Promise))(function (i, s) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function step(e) {
                            e.done
                                ? i(e.value)
                                : new r(function (t) {
                                      t(e.value);
                                  }).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            const i = r(8237);
            const s = r(1370);
            const a = i('github-cherry-pick');
            const getCommitMessageToSkipCI = (e) => `${e} [skip ci]\n\n\nskip-checks: true\n`;
            const createCommit = ({
                author: e,
                committer: t,
                message: r,
                octokit: i,
                owner: s,
                parent: a,
                repo: o,
                tree: n,
            }) =>
                A(this, void 0, void 0, function* () {
                    const {
                        data: {sha: A},
                    } = yield i.git.createCommit({
                        author: e,
                        committer: t,
                        message: r,
                        owner: s,
                        parents: [a],
                        repo: o,
                        tree: n,
                    });
                    return A;
                });
            const merge = ({base: e, commit: t, octokit: r, owner: i, repo: s}) =>
                A(this, void 0, void 0, function* () {
                    const {
                        data: {
                            commit: {
                                tree: {sha: A},
                            },
                        },
                    } = yield r.repos.merge({
                        base: e,
                        commit_message: getCommitMessageToSkipCI(`Merge ${t} into ${e}`),
                        head: t,
                        owner: i,
                        repo: s,
                    });
                    return A;
                });
            const retrieveCommitDetails = ({commit: e, octokit: t, owner: r, repo: i}) =>
                A(this, void 0, void 0, function* () {
                    const {
                        data: {author: A, committer: s, message: a, parents: o},
                    } = yield t.git.getCommit({commit_sha: e, owner: r, repo: i});
                    if (o.length > 1) {
                        throw new Error(
                            `Commit ${e} has ${o.length} parents.` +
                                ` github-cherry-pick is designed for the rebase workflow and doesn't support merge commits.`,
                        );
                    }
                    return {author: A, committer: s, message: a, parent: o[0].sha};
                });
            const createSiblingCommit = ({
                commit: e,
                head: {author: t, committer: r, ref: i, tree: a},
                octokit: o,
                owner: n,
                parent: p,
                repo: d,
            }) =>
                A(this, void 0, void 0, function* () {
                    const A = yield createCommit({
                        author: t,
                        committer: r,
                        message: getCommitMessageToSkipCI(`Sibling of ${e}`),
                        octokit: o,
                        owner: n,
                        parent: p,
                        repo: d,
                        tree: a,
                    });
                    yield s.updateRef({force: true, octokit: o, owner: n, ref: i, repo: d, sha: A});
                });
            const cherryPickCommit = ({commit: e, head: {ref: t, sha: r, tree: i}, octokit: o, owner: n, repo: p}) =>
                A(this, void 0, void 0, function* () {
                    const {author: A, committer: d, message: l, parent: u} = yield retrieveCommitDetails({
                        commit: e,
                        octokit: o,
                        owner: n,
                        repo: p,
                    });
                    a('creating sibling commit');
                    yield createSiblingCommit({
                        commit: e,
                        head: {author: A, committer: d, ref: t, tree: i},
                        octokit: o,
                        owner: n,
                        parent: u,
                        repo: p,
                    });
                    a('merging');
                    const c = yield merge({base: t, commit: e, octokit: o, owner: n, repo: p});
                    a('creating commit with different tree', c);
                    const g = yield createCommit({
                        author: A,
                        committer: d,
                        message: l,
                        octokit: o,
                        owner: n,
                        parent: r,
                        repo: p,
                        tree: c,
                    });
                    a('updating ref', g);
                    yield s.updateRef({force: true, octokit: o, owner: n, ref: t, repo: p, sha: g});
                    return {sha: g, tree: c};
                });
            const cherryPickCommitsOnRef = ({commits: e, initialHeadSha: t, octokit: r, owner: i, ref: s, repo: o}) =>
                A(this, void 0, void 0, function* () {
                    const {
                        data: {
                            tree: {sha: n},
                        },
                    } = yield r.git.getCommit({commit_sha: t, owner: i, repo: o});
                    const {sha: p} = yield e.reduce(
                        (e, t) =>
                            A(this, void 0, void 0, function* () {
                                const {sha: A, tree: n} = yield e;
                                a('cherry-picking', {commit: t, ref: s, sha: A});
                                return cherryPickCommit({
                                    commit: t,
                                    head: {ref: s, sha: A, tree: n},
                                    octokit: r,
                                    owner: i,
                                    repo: o,
                                });
                            }),
                        Promise.resolve({sha: t, tree: n}),
                    );
                    return p;
                });
            const cherryPickCommits = ({
                _intercept: e = () => Promise.resolve(),
                commits: t,
                head: r,
                octokit: i,
                owner: o,
                repo: n,
            }) =>
                A(this, void 0, void 0, function* () {
                    a('starting', {commits: t, head: r, owner: o, repo: n});
                    const p = yield s.fetchRefSha({octokit: i, owner: o, ref: r, repo: n});
                    yield e({initialHeadSha: p});
                    return s.withTemporaryRef({
                        action: (e) =>
                            A(this, void 0, void 0, function* () {
                                a({temporaryRef: e});
                                const A = yield cherryPickCommitsOnRef({
                                    commits: t,
                                    initialHeadSha: p,
                                    octokit: i,
                                    owner: o,
                                    ref: e,
                                    repo: n,
                                });
                                a('updating ref with new SHA', A);
                                yield s.updateRef({force: false, octokit: i, owner: o, ref: r, repo: n, sha: A});
                                a('ref updated');
                                return A;
                            }),
                        octokit: i,
                        owner: o,
                        ref: `cherry-pick-${r}`,
                        repo: n,
                        sha: p,
                    });
                });
            t.cherryPickCommits = cherryPickCommits;
        },
        5224: (e) => {
            e.exports = function atob(e) {
                return Buffer.from(e, 'base64').toString('binary');
            };
        },
        3682: (e, t, r) => {
            var A = r(4670);
            var i = r(5549);
            var s = r(6819);
            var a = Function.bind;
            var o = a.bind(a);
            function bindApi(e, t, r) {
                var A = o(s, null).apply(null, r ? [t, r] : [t]);
                e.api = {remove: A};
                e.remove = A;
                ['before', 'error', 'after', 'wrap'].forEach(function (A) {
                    var s = r ? [t, A, r] : [t, A];
                    e[A] = e.api[A] = o(i, null).apply(null, s);
                });
            }
            function HookSingular() {
                var e = 'h';
                var t = {registry: {}};
                var r = A.bind(null, t, e);
                bindApi(r, t, e);
                return r;
            }
            function HookCollection() {
                var e = {registry: {}};
                var t = A.bind(null, e);
                bindApi(t, e);
                return t;
            }
            var n = false;
            function Hook() {
                if (!n) {
                    console.warn(
                        '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4',
                    );
                    n = true;
                }
                return HookCollection();
            }
            Hook.Singular = HookSingular.bind();
            Hook.Collection = HookCollection.bind();
            e.exports = Hook;
            e.exports.Hook = Hook;
            e.exports.Singular = Hook.Singular;
            e.exports.Collection = Hook.Collection;
        },
        5549: (e) => {
            e.exports = addHook;
            function addHook(e, t, r, A) {
                var i = A;
                if (!e.registry[r]) {
                    e.registry[r] = [];
                }
                if (t === 'before') {
                    A = function (e, t) {
                        return Promise.resolve().then(i.bind(null, t)).then(e.bind(null, t));
                    };
                }
                if (t === 'after') {
                    A = function (e, t) {
                        var r;
                        return Promise.resolve()
                            .then(e.bind(null, t))
                            .then(function (e) {
                                r = e;
                                return i(r, t);
                            })
                            .then(function () {
                                return r;
                            });
                    };
                }
                if (t === 'error') {
                    A = function (e, t) {
                        return Promise.resolve()
                            .then(e.bind(null, t))
                            .catch(function (e) {
                                return i(e, t);
                            });
                    };
                }
                e.registry[r].push({hook: A, orig: i});
            }
        },
        4670: (e) => {
            e.exports = register;
            function register(e, t, r, A) {
                if (typeof r !== 'function') {
                    throw new Error('method for before hook must be a function');
                }
                if (!A) {
                    A = {};
                }
                if (Array.isArray(t)) {
                    return t.reverse().reduce(function (t, r) {
                        return register.bind(null, e, r, t, A);
                    }, r)();
                }
                return Promise.resolve().then(function () {
                    if (!e.registry[t]) {
                        return r(A);
                    }
                    return e.registry[t].reduce(function (e, t) {
                        return t.hook.bind(null, e, A);
                    }, r)();
                });
            }
        },
        6819: (e) => {
            e.exports = removeHook;
            function removeHook(e, t, r) {
                if (!e.registry[t]) {
                    return;
                }
                var A = e.registry[t]
                    .map(function (e) {
                        return e.orig;
                    })
                    .indexOf(r);
                if (A === -1) {
                    return;
                }
                e.registry[t].splice(A, 1);
            }
        },
        2358: (e) => {
            e.exports = function btoa(e) {
                return new Buffer(e).toString('base64');
            };
        },
        4697: (e) => {
            var t = 1e3;
            var r = t * 60;
            var A = r * 60;
            var i = A * 24;
            var s = i * 7;
            var a = i * 365.25;
            e.exports = function (e, t) {
                t = t || {};
                var r = typeof e;
                if (r === 'string' && e.length > 0) {
                    return parse(e);
                } else if (r === 'number' && isFinite(e)) {
                    return t.long ? fmtLong(e) : fmtShort(e);
                }
                throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(e));
            };
            function parse(e) {
                e = String(e);
                if (e.length > 100) {
                    return;
                }
                var o = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e,
                );
                if (!o) {
                    return;
                }
                var n = parseFloat(o[1]);
                var p = (o[2] || 'ms').toLowerCase();
                switch (p) {
                    case 'years':
                    case 'year':
                    case 'yrs':
                    case 'yr':
                    case 'y':
                        return n * a;
                    case 'weeks':
                    case 'week':
                    case 'w':
                        return n * s;
                    case 'days':
                    case 'day':
                    case 'd':
                        return n * i;
                    case 'hours':
                    case 'hour':
                    case 'hrs':
                    case 'hr':
                    case 'h':
                        return n * A;
                    case 'minutes':
                    case 'minute':
                    case 'mins':
                    case 'min':
                    case 'm':
                        return n * r;
                    case 'seconds':
                    case 'second':
                    case 'secs':
                    case 'sec':
                    case 's':
                        return n * t;
                    case 'milliseconds':
                    case 'millisecond':
                    case 'msecs':
                    case 'msec':
                    case 'ms':
                        return n;
                    default:
                        return undefined;
                }
            }
            function fmtShort(e) {
                var s = Math.abs(e);
                if (s >= i) {
                    return Math.round(e / i) + 'd';
                }
                if (s >= A) {
                    return Math.round(e / A) + 'h';
                }
                if (s >= r) {
                    return Math.round(e / r) + 'm';
                }
                if (s >= t) {
                    return Math.round(e / t) + 's';
                }
                return e + 'ms';
            }
            function fmtLong(e) {
                var s = Math.abs(e);
                if (s >= i) {
                    return plural(e, s, i, 'day');
                }
                if (s >= A) {
                    return plural(e, s, A, 'hour');
                }
                if (s >= r) {
                    return plural(e, s, r, 'minute');
                }
                if (s >= t) {
                    return plural(e, s, t, 'second');
                }
                return e + ' ms';
            }
            function plural(e, t, r, A) {
                var i = t >= r * 1.5;
                return Math.round(e / r) + ' ' + A + (i ? 's' : '');
            }
        },
        8222: (e, t, r) => {
            t.formatArgs = formatArgs;
            t.save = save;
            t.load = load;
            t.useColors = useColors;
            t.storage = localstorage();
            t.destroy = (() => {
                let e = false;
                return () => {
                    if (!e) {
                        e = true;
                        console.warn(
                            'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.',
                        );
                    }
                };
            })();
            t.colors = [
                '#0000CC',
                '#0000FF',
                '#0033CC',
                '#0033FF',
                '#0066CC',
                '#0066FF',
                '#0099CC',
                '#0099FF',
                '#00CC00',
                '#00CC33',
                '#00CC66',
                '#00CC99',
                '#00CCCC',
                '#00CCFF',
                '#3300CC',
                '#3300FF',
                '#3333CC',
                '#3333FF',
                '#3366CC',
                '#3366FF',
                '#3399CC',
                '#3399FF',
                '#33CC00',
                '#33CC33',
                '#33CC66',
                '#33CC99',
                '#33CCCC',
                '#33CCFF',
                '#6600CC',
                '#6600FF',
                '#6633CC',
                '#6633FF',
                '#66CC00',
                '#66CC33',
                '#9900CC',
                '#9900FF',
                '#9933CC',
                '#9933FF',
                '#99CC00',
                '#99CC33',
                '#CC0000',
                '#CC0033',
                '#CC0066',
                '#CC0099',
                '#CC00CC',
                '#CC00FF',
                '#CC3300',
                '#CC3333',
                '#CC3366',
                '#CC3399',
                '#CC33CC',
                '#CC33FF',
                '#CC6600',
                '#CC6633',
                '#CC9900',
                '#CC9933',
                '#CCCC00',
                '#CCCC33',
                '#FF0000',
                '#FF0033',
                '#FF0066',
                '#FF0099',
                '#FF00CC',
                '#FF00FF',
                '#FF3300',
                '#FF3333',
                '#FF3366',
                '#FF3399',
                '#FF33CC',
                '#FF33FF',
                '#FF6600',
                '#FF6633',
                '#FF9900',
                '#FF9933',
                '#FFCC00',
                '#FFCC33',
            ];
            function useColors() {
                if (
                    typeof window !== 'undefined' &&
                    window.process &&
                    (window.process.type === 'renderer' || window.process.__nwjs)
                ) {
                    return true;
                }
                if (
                    typeof navigator !== 'undefined' &&
                    navigator.userAgent &&
                    navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
                ) {
                    return false;
                }
                return (
                    (typeof document !== 'undefined' &&
                        document.documentElement &&
                        document.documentElement.style &&
                        document.documentElement.style.WebkitAppearance) ||
                    (typeof window !== 'undefined' &&
                        window.console &&
                        (window.console.firebug || (window.console.exception && window.console.table))) ||
                    (typeof navigator !== 'undefined' &&
                        navigator.userAgent &&
                        navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                        parseInt(RegExp.$1, 10) >= 31) ||
                    (typeof navigator !== 'undefined' &&
                        navigator.userAgent &&
                        navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
                );
            }
            function formatArgs(t) {
                t[0] =
                    (this.useColors ? '%c' : '') +
                    this.namespace +
                    (this.useColors ? ' %c' : ' ') +
                    t[0] +
                    (this.useColors ? '%c ' : ' ') +
                    '+' +
                    e.exports.humanize(this.diff);
                if (!this.useColors) {
                    return;
                }
                const r = 'color: ' + this.color;
                t.splice(1, 0, r, 'color: inherit');
                let A = 0;
                let i = 0;
                t[0].replace(/%[a-zA-Z%]/g, (e) => {
                    if (e === '%%') {
                        return;
                    }
                    A++;
                    if (e === '%c') {
                        i = A;
                    }
                });
                t.splice(i, 0, r);
            }
            t.log = console.debug || console.log || (() => {});
            function save(e) {
                try {
                    if (e) {
                        t.storage.setItem('debug', e);
                    } else {
                        t.storage.removeItem('debug');
                    }
                } catch (e) {}
            }
            function load() {
                let e;
                try {
                    e = t.storage.getItem('debug');
                } catch (e) {}
                if (!e && typeof process !== 'undefined' && 'env' in process) {
                    e = process.env.DEBUG;
                }
                return e;
            }
            function localstorage() {
                try {
                    return localStorage;
                } catch (e) {}
            }
            e.exports = r(6243)(t);
            const {formatters: A} = e.exports;
            A.j = function (e) {
                try {
                    return JSON.stringify(e);
                } catch (e) {
                    return '[UnexpectedJSONParseError]: ' + e.message;
                }
            };
        },
        6243: (e, t, r) => {
            function setup(e) {
                createDebug.debug = createDebug;
                createDebug.default = createDebug;
                createDebug.coerce = coerce;
                createDebug.disable = disable;
                createDebug.enable = enable;
                createDebug.enabled = enabled;
                createDebug.humanize = r(4697);
                createDebug.destroy = destroy;
                Object.keys(e).forEach((t) => {
                    createDebug[t] = e[t];
                });
                createDebug.names = [];
                createDebug.skips = [];
                createDebug.formatters = {};
                function selectColor(e) {
                    let t = 0;
                    for (let r = 0; r < e.length; r++) {
                        t = (t << 5) - t + e.charCodeAt(r);
                        t |= 0;
                    }
                    return createDebug.colors[Math.abs(t) % createDebug.colors.length];
                }
                createDebug.selectColor = selectColor;
                function createDebug(e) {
                    let t;
                    let r = null;
                    let A;
                    let i;
                    function debug(...e) {
                        if (!debug.enabled) {
                            return;
                        }
                        const r = debug;
                        const A = Number(new Date());
                        const i = A - (t || A);
                        r.diff = i;
                        r.prev = t;
                        r.curr = A;
                        t = A;
                        e[0] = createDebug.coerce(e[0]);
                        if (typeof e[0] !== 'string') {
                            e.unshift('%O');
                        }
                        let s = 0;
                        e[0] = e[0].replace(/%([a-zA-Z%])/g, (t, A) => {
                            if (t === '%%') {
                                return '%';
                            }
                            s++;
                            const i = createDebug.formatters[A];
                            if (typeof i === 'function') {
                                const A = e[s];
                                t = i.call(r, A);
                                e.splice(s, 1);
                                s--;
                            }
                            return t;
                        });
                        createDebug.formatArgs.call(r, e);
                        const a = r.log || createDebug.log;
                        a.apply(r, e);
                    }
                    debug.namespace = e;
                    debug.useColors = createDebug.useColors();
                    debug.color = createDebug.selectColor(e);
                    debug.extend = extend;
                    debug.destroy = createDebug.destroy;
                    Object.defineProperty(debug, 'enabled', {
                        enumerable: true,
                        configurable: false,
                        get: () => {
                            if (r !== null) {
                                return r;
                            }
                            if (A !== createDebug.namespaces) {
                                A = createDebug.namespaces;
                                i = createDebug.enabled(e);
                            }
                            return i;
                        },
                        set: (e) => {
                            r = e;
                        },
                    });
                    if (typeof createDebug.init === 'function') {
                        createDebug.init(debug);
                    }
                    return debug;
                }
                function extend(e, t) {
                    const r = createDebug(this.namespace + (typeof t === 'undefined' ? ':' : t) + e);
                    r.log = this.log;
                    return r;
                }
                function enable(e) {
                    createDebug.save(e);
                    createDebug.namespaces = e;
                    createDebug.names = [];
                    createDebug.skips = [];
                    let t;
                    const r = (typeof e === 'string' ? e : '').split(/[\s,]+/);
                    const A = r.length;
                    for (t = 0; t < A; t++) {
                        if (!r[t]) {
                            continue;
                        }
                        e = r[t].replace(/\*/g, '.*?');
                        if (e[0] === '-') {
                            createDebug.skips.push(new RegExp('^' + e.slice(1) + '$'));
                        } else {
                            createDebug.names.push(new RegExp('^' + e + '$'));
                        }
                    }
                }
                function disable() {
                    const e = [
                        ...createDebug.names.map(toNamespace),
                        ...createDebug.skips.map(toNamespace).map((e) => '-' + e),
                    ].join(',');
                    createDebug.enable('');
                    return e;
                }
                function enabled(e) {
                    if (e[e.length - 1] === '*') {
                        return true;
                    }
                    let t;
                    let r;
                    for (t = 0, r = createDebug.skips.length; t < r; t++) {
                        if (createDebug.skips[t].test(e)) {
                            return false;
                        }
                    }
                    for (t = 0, r = createDebug.names.length; t < r; t++) {
                        if (createDebug.names[t].test(e)) {
                            return true;
                        }
                    }
                    return false;
                }
                function toNamespace(e) {
                    return e
                        .toString()
                        .substring(2, e.toString().length - 2)
                        .replace(/\.\*\?$/, '*');
                }
                function coerce(e) {
                    if (e instanceof Error) {
                        return e.stack || e.message;
                    }
                    return e;
                }
                function destroy() {
                    console.warn(
                        'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.',
                    );
                }
                createDebug.enable(createDebug.load());
                return createDebug;
            }
            e.exports = setup;
        },
        8237: (e, t, r) => {
            if (
                typeof process === 'undefined' ||
                process.type === 'renderer' ||
                process.browser === true ||
                process.__nwjs
            ) {
                e.exports = r(8222);
            } else {
                e.exports = r(4874);
            }
        },
        4874: (e, t, r) => {
            const A = r(6224);
            const i = r(3837);
            t.init = init;
            t.log = log;
            t.formatArgs = formatArgs;
            t.save = save;
            t.load = load;
            t.useColors = useColors;
            t.destroy = i.deprecate(() => {},
            'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
            t.colors = [6, 2, 3, 4, 5, 1];
            try {
                const e = r(9318);
                if (e && (e.stderr || e).level >= 2) {
                    t.colors = [
                        20,
                        21,
                        26,
                        27,
                        32,
                        33,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        56,
                        57,
                        62,
                        63,
                        68,
                        69,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        92,
                        93,
                        98,
                        99,
                        112,
                        113,
                        128,
                        129,
                        134,
                        135,
                        148,
                        149,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        178,
                        179,
                        184,
                        185,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        214,
                        215,
                        220,
                        221,
                    ];
                }
            } catch (e) {}
            t.inspectOpts = Object.keys(process.env)
                .filter((e) => /^debug_/i.test(e))
                .reduce((e, t) => {
                    const r = t
                        .substring(6)
                        .toLowerCase()
                        .replace(/_([a-z])/g, (e, t) => t.toUpperCase());
                    let A = process.env[t];
                    if (/^(yes|on|true|enabled)$/i.test(A)) {
                        A = true;
                    } else if (/^(no|off|false|disabled)$/i.test(A)) {
                        A = false;
                    } else if (A === 'null') {
                        A = null;
                    } else {
                        A = Number(A);
                    }
                    e[r] = A;
                    return e;
                }, {});
            function useColors() {
                return 'colors' in t.inspectOpts ? Boolean(t.inspectOpts.colors) : A.isatty(process.stderr.fd);
            }
            function formatArgs(t) {
                const {namespace: r, useColors: A} = this;
                if (A) {
                    const A = this.color;
                    const i = '[3' + (A < 8 ? A : '8;5;' + A);
                    const s = `  ${i};1m${r} [0m`;
                    t[0] = s + t[0].split('\n').join('\n' + s);
                    t.push(i + 'm+' + e.exports.humanize(this.diff) + '[0m');
                } else {
                    t[0] = getDate() + r + ' ' + t[0];
                }
            }
            function getDate() {
                if (t.inspectOpts.hideDate) {
                    return '';
                }
                return new Date().toISOString() + ' ';
            }
            function log(...e) {
                return process.stderr.write(i.format(...e) + '\n');
            }
            function save(e) {
                if (e) {
                    process.env.DEBUG = e;
                } else {
                    delete process.env.DEBUG;
                }
            }
            function load() {
                return process.env.DEBUG;
            }
            function init(e) {
                e.inspectOpts = {};
                const r = Object.keys(t.inspectOpts);
                for (let A = 0; A < r.length; A++) {
                    e.inspectOpts[r[A]] = t.inspectOpts[r[A]];
                }
            }
            e.exports = r(6243)(t);
            const {formatters: s} = e.exports;
            s.o = function (e) {
                this.inspectOpts.colors = this.useColors;
                return i
                    .inspect(e, this.inspectOpts)
                    .split('\n')
                    .map((e) => e.trim())
                    .join(' ');
            };
            s.O = function (e) {
                this.inspectOpts.colors = this.useColors;
                return i.inspect(e, this.inspectOpts);
            };
        },
        8932: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            class Deprecation extends Error {
                constructor(e) {
                    super(e);
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    }
                    this.name = 'Deprecation';
                }
            }
            t.Deprecation = Deprecation;
        },
        1205: (e, t, r) => {
            var A = r(1223);
            var noop = function () {};
            var isRequest = function (e) {
                return e.setHeader && typeof e.abort === 'function';
            };
            var isChildProcess = function (e) {
                return e.stdio && Array.isArray(e.stdio) && e.stdio.length === 3;
            };
            var eos = function (e, t, r) {
                if (typeof t === 'function') return eos(e, null, t);
                if (!t) t = {};
                r = A(r || noop);
                var i = e._writableState;
                var s = e._readableState;
                var a = t.readable || (t.readable !== false && e.readable);
                var o = t.writable || (t.writable !== false && e.writable);
                var n = false;
                var onlegacyfinish = function () {
                    if (!e.writable) onfinish();
                };
                var onfinish = function () {
                    o = false;
                    if (!a) r.call(e);
                };
                var onend = function () {
                    a = false;
                    if (!o) r.call(e);
                };
                var onexit = function (t) {
                    r.call(e, t ? new Error('exited with error code: ' + t) : null);
                };
                var onerror = function (t) {
                    r.call(e, t);
                };
                var onclose = function () {
                    process.nextTick(onclosenexttick);
                };
                var onclosenexttick = function () {
                    if (n) return;
                    if (a && !(s && s.ended && !s.destroyed)) return r.call(e, new Error('premature close'));
                    if (o && !(i && i.ended && !i.destroyed)) return r.call(e, new Error('premature close'));
                };
                var onrequest = function () {
                    e.req.on('finish', onfinish);
                };
                if (isRequest(e)) {
                    e.on('complete', onfinish);
                    e.on('abort', onclose);
                    if (e.req) onrequest();
                    else e.on('request', onrequest);
                } else if (o && !i) {
                    e.on('end', onlegacyfinish);
                    e.on('close', onlegacyfinish);
                }
                if (isChildProcess(e)) e.on('exit', onexit);
                e.on('end', onend);
                e.on('finish', onfinish);
                if (t.error !== false) e.on('error', onerror);
                e.on('close', onclose);
                return function () {
                    n = true;
                    e.removeListener('complete', onfinish);
                    e.removeListener('abort', onclose);
                    e.removeListener('request', onrequest);
                    if (e.req) e.req.removeListener('finish', onfinish);
                    e.removeListener('end', onlegacyfinish);
                    e.removeListener('close', onlegacyfinish);
                    e.removeListener('finish', onfinish);
                    e.removeListener('exit', onexit);
                    e.removeListener('end', onend);
                    e.removeListener('error', onerror);
                    e.removeListener('close', onclose);
                };
            };
            e.exports = eos;
        },
        5447: (e, t, r) => {
            'use strict';
            const A = r(1017);
            const i = r(2081);
            const s = r(1678);
            const a = r(5774);
            const o = r(502);
            const n = r(1657);
            const p = r(1766);
            const d = r(1330);
            const l = r(4931);
            const u = r(4689);
            const c = r(166);
            const g = 1e3 * 1e3 * 10;
            function handleArgs(e, t, r) {
                let i;
                r = Object.assign({extendEnv: true, env: {}}, r);
                if (r.extendEnv) {
                    r.env = Object.assign({}, process.env, r.env);
                }
                if (r.__winShell === true) {
                    delete r.__winShell;
                    i = {command: e, args: t, options: r, file: e, original: {cmd: e, args: t}};
                } else {
                    i = s._parse(e, t, r);
                }
                r = Object.assign(
                    {
                        maxBuffer: g,
                        buffer: true,
                        stripEof: true,
                        preferLocal: true,
                        localDir: i.options.cwd || process.cwd(),
                        encoding: 'utf8',
                        reject: true,
                        cleanup: true,
                    },
                    i.options,
                );
                r.stdio = c(r);
                if (r.preferLocal) {
                    r.env = o.env(Object.assign({}, r, {cwd: r.localDir}));
                }
                if (r.detached) {
                    r.cleanup = false;
                }
                if (process.platform === 'win32' && A.basename(i.command) === 'cmd.exe') {
                    i.args.unshift('/q');
                }
                return {cmd: i.command, args: i.args, opts: r, parsed: i};
            }
            function handleInput(e, t) {
                if (t === null || t === undefined) {
                    return;
                }
                if (n(t)) {
                    t.pipe(e.stdin);
                } else {
                    e.stdin.end(t);
                }
            }
            function handleOutput(e, t) {
                if (t && e.stripEof) {
                    t = a(t);
                }
                return t;
            }
            function handleShell(e, t, r) {
                let A = '/bin/sh';
                let i = ['-c', t];
                r = Object.assign({}, r);
                if (process.platform === 'win32') {
                    r.__winShell = true;
                    A = process.env.comspec || 'cmd.exe';
                    i = ['/s', '/c', `"${t}"`];
                    r.windowsVerbatimArguments = true;
                }
                if (r.shell) {
                    A = r.shell;
                    delete r.shell;
                }
                return e(A, i, r);
            }
            function getStream(e, t, {encoding: r, buffer: A, maxBuffer: i}) {
                if (!e[t]) {
                    return null;
                }
                let s;
                if (!A) {
                    s = new Promise((r, A) => {
                        e[t].once('end', r).once('error', A);
                    });
                } else if (r) {
                    s = p(e[t], {encoding: r, maxBuffer: i});
                } else {
                    s = p.buffer(e[t], {maxBuffer: i});
                }
                return s.catch((e) => {
                    e.stream = t;
                    e.message = `${t} ${e.message}`;
                    throw e;
                });
            }
            function makeError(e, t) {
                const {stdout: r, stderr: A} = e;
                let i = e.error;
                const {code: s, signal: a} = e;
                const {parsed: o, joinedCmd: n} = t;
                const p = t.timedOut || false;
                if (!i) {
                    let e = '';
                    if (Array.isArray(o.opts.stdio)) {
                        if (o.opts.stdio[2] !== 'inherit') {
                            e += e.length > 0 ? A : `\n${A}`;
                        }
                        if (o.opts.stdio[1] !== 'inherit') {
                            e += `\n${r}`;
                        }
                    } else if (o.opts.stdio !== 'inherit') {
                        e = `\n${A}${r}`;
                    }
                    i = new Error(`Command failed: ${n}${e}`);
                    i.code = s < 0 ? u(s) : s;
                }
                i.stdout = r;
                i.stderr = A;
                i.failed = true;
                i.signal = a || null;
                i.cmd = n;
                i.timedOut = p;
                return i;
            }
            function joinCmd(e, t) {
                let r = e;
                if (Array.isArray(t) && t.length > 0) {
                    r += ' ' + t.join(' ');
                }
                return r;
            }
            e.exports = (e, t, r) => {
                const A = handleArgs(e, t, r);
                const {encoding: a, buffer: o, maxBuffer: n} = A.opts;
                const p = joinCmd(e, t);
                let u;
                try {
                    u = i.spawn(A.cmd, A.args, A.opts);
                } catch (e) {
                    return Promise.reject(e);
                }
                let c;
                if (A.opts.cleanup) {
                    c = l(() => {
                        u.kill();
                    });
                }
                let g = null;
                let m = false;
                const cleanup = () => {
                    if (g) {
                        clearTimeout(g);
                        g = null;
                    }
                    if (c) {
                        c();
                    }
                };
                if (A.opts.timeout > 0) {
                    g = setTimeout(() => {
                        g = null;
                        m = true;
                        u.kill(A.opts.killSignal);
                    }, A.opts.timeout);
                }
                const h = new Promise((e) => {
                    u.on('exit', (t, r) => {
                        cleanup();
                        e({code: t, signal: r});
                    });
                    u.on('error', (t) => {
                        cleanup();
                        e({error: t});
                    });
                    if (u.stdin) {
                        u.stdin.on('error', (t) => {
                            cleanup();
                            e({error: t});
                        });
                    }
                });
                function destroy() {
                    if (u.stdout) {
                        u.stdout.destroy();
                    }
                    if (u.stderr) {
                        u.stderr.destroy();
                    }
                }
                const handlePromise = () =>
                    d(
                        Promise.all([
                            h,
                            getStream(u, 'stdout', {encoding: a, buffer: o, maxBuffer: n}),
                            getStream(u, 'stderr', {encoding: a, buffer: o, maxBuffer: n}),
                        ]).then((e) => {
                            const t = e[0];
                            t.stdout = e[1];
                            t.stderr = e[2];
                            if (t.error || t.code !== 0 || t.signal !== null) {
                                const e = makeError(t, {joinedCmd: p, parsed: A, timedOut: m});
                                e.killed = e.killed || u.killed;
                                if (!A.opts.reject) {
                                    return e;
                                }
                                throw e;
                            }
                            return {
                                stdout: handleOutput(A.opts, t.stdout),
                                stderr: handleOutput(A.opts, t.stderr),
                                code: 0,
                                failed: false,
                                killed: false,
                                signal: null,
                                cmd: p,
                                timedOut: false,
                            };
                        }),
                        destroy,
                    );
                s._enoent.hookChildProcess(u, A.parsed);
                handleInput(u, A.opts.input);
                u.then = (e, t) => handlePromise().then(e, t);
                u.catch = (e) => handlePromise().catch(e);
                return u;
            };
            e.exports.stdout = (...t) => e.exports(...t).then((e) => e.stdout);
            e.exports.stderr = (...t) => e.exports(...t).then((e) => e.stderr);
            e.exports.shell = (t, r) => handleShell(e.exports, t, r);
            e.exports.sync = (e, t, r) => {
                const A = handleArgs(e, t, r);
                const s = joinCmd(e, t);
                if (n(A.opts.input)) {
                    throw new TypeError('The `input` option cannot be a stream in sync mode');
                }
                const a = i.spawnSync(A.cmd, A.args, A.opts);
                a.code = a.status;
                if (a.error || a.status !== 0 || a.signal !== null) {
                    const e = makeError(a, {joinedCmd: s, parsed: A});
                    if (!A.opts.reject) {
                        return e;
                    }
                    throw e;
                }
                return {
                    stdout: handleOutput(A.opts, a.stdout),
                    stderr: handleOutput(A.opts, a.stderr),
                    code: 0,
                    failed: false,
                    signal: null,
                    cmd: s,
                    timedOut: false,
                };
            };
            e.exports.shellSync = (t, r) => handleShell(e.exports.sync, t, r);
        },
        4689: (e, t, r) => {
            'use strict';
            const A = r(3837);
            let i;
            if (typeof A.getSystemErrorName === 'function') {
                e.exports = A.getSystemErrorName;
            } else {
                try {
                    i = process.binding('uv');
                    if (typeof i.errname !== 'function') {
                        throw new TypeError('uv.errname is not a function');
                    }
                } catch (e) {
                    console.error("execa/lib/errname: unable to establish process.binding('uv')", e);
                    i = null;
                }
                e.exports = (e) => errname(i, e);
            }
            e.exports.__test__ = errname;
            function errname(e, t) {
                if (e) {
                    return e.errname(t);
                }
                if (!(t < 0)) {
                    throw new Error('err >= 0');
                }
                return `Unknown system error ${t}`;
            }
        },
        166: (e) => {
            'use strict';
            const t = ['stdin', 'stdout', 'stderr'];
            const hasAlias = (e) => t.some((t) => Boolean(e[t]));
            e.exports = (e) => {
                if (!e) {
                    return null;
                }
                if (e.stdio && hasAlias(e)) {
                    throw new Error(
                        `It's not possible to provide \`stdio\` in combination with one of ${t
                            .map((e) => `\`${e}\``)
                            .join(', ')}`,
                    );
                }
                if (typeof e.stdio === 'string') {
                    return e.stdio;
                }
                const r = e.stdio || [];
                if (!Array.isArray(r)) {
                    throw new TypeError(
                        `Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof r}\``,
                    );
                }
                const A = [];
                const i = Math.max(r.length, t.length);
                for (let s = 0; s < i; s++) {
                    let i = null;
                    if (r[s] !== undefined) {
                        i = r[s];
                    } else if (e[t[s]] !== undefined) {
                        i = e[t[s]];
                    }
                    A[s] = i;
                }
                return A;
            };
        },
        1678: (e, t, r) => {
            'use strict';
            const A = r(2081);
            const i = r(3756);
            const s = r(5419);
            function spawn(e, t, r) {
                const a = i(e, t, r);
                const o = A.spawn(a.command, a.args, a.options);
                s.hookChildProcess(o, a);
                return o;
            }
            function spawnSync(e, t, r) {
                const a = i(e, t, r);
                const o = A.spawnSync(a.command, a.args, a.options);
                o.error = o.error || s.verifyENOENTSync(o.status, a);
                return o;
            }
            e.exports = spawn;
            e.exports.spawn = spawn;
            e.exports.sync = spawnSync;
            e.exports._parse = i;
            e.exports._enoent = s;
        },
        5419: (e) => {
            'use strict';
            const t = process.platform === 'win32';
            function notFoundError(e, t) {
                return Object.assign(new Error(`${t} ${e.command} ENOENT`), {
                    code: 'ENOENT',
                    errno: 'ENOENT',
                    syscall: `${t} ${e.command}`,
                    path: e.command,
                    spawnargs: e.args,
                });
            }
            function hookChildProcess(e, r) {
                if (!t) {
                    return;
                }
                const A = e.emit;
                e.emit = function (t, i) {
                    if (t === 'exit') {
                        const t = verifyENOENT(i, r, 'spawn');
                        if (t) {
                            return A.call(e, 'error', t);
                        }
                    }
                    return A.apply(e, arguments);
                };
            }
            function verifyENOENT(e, r) {
                if (t && e === 1 && !r.file) {
                    return notFoundError(r.original, 'spawn');
                }
                return null;
            }
            function verifyENOENTSync(e, r) {
                if (t && e === 1 && !r.file) {
                    return notFoundError(r.original, 'spawnSync');
                }
                return null;
            }
            e.exports = {
                hookChildProcess: hookChildProcess,
                verifyENOENT: verifyENOENT,
                verifyENOENTSync: verifyENOENTSync,
                notFoundError: notFoundError,
            };
        },
        3756: (e, t, r) => {
            'use strict';
            const A = r(1017);
            const i = r(8560);
            const s = r(9727);
            const a = r(9482);
            const o = r(7295);
            const n = r(5232);
            const p = process.platform === 'win32';
            const d = /\.(?:com|exe)$/i;
            const l = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
            const u = i(() => n.satisfies(process.version, '^4.8.0 || ^5.7.0 || >= 6.0.0', true)) || false;
            function detectShebang(e) {
                e.file = s(e);
                const t = e.file && o(e.file);
                if (t) {
                    e.args.unshift(e.file);
                    e.command = t;
                    return s(e);
                }
                return e.file;
            }
            function parseNonShell(e) {
                if (!p) {
                    return e;
                }
                const t = detectShebang(e);
                const r = !d.test(t);
                if (e.options.forceShell || r) {
                    const r = l.test(t);
                    e.command = A.normalize(e.command);
                    e.command = a.command(e.command);
                    e.args = e.args.map((e) => a.argument(e, r));
                    const i = [e.command].concat(e.args).join(' ');
                    e.args = ['/d', '/s', '/c', `"${i}"`];
                    e.command = process.env.comspec || 'cmd.exe';
                    e.options.windowsVerbatimArguments = true;
                }
                return e;
            }
            function parseShell(e) {
                if (u) {
                    return e;
                }
                const t = [e.command].concat(e.args).join(' ');
                if (p) {
                    e.command =
                        typeof e.options.shell === 'string' ? e.options.shell : process.env.comspec || 'cmd.exe';
                    e.args = ['/d', '/s', '/c', `"${t}"`];
                    e.options.windowsVerbatimArguments = true;
                } else {
                    if (typeof e.options.shell === 'string') {
                        e.command = e.options.shell;
                    } else if (process.platform === 'android') {
                        e.command = '/system/bin/sh';
                    } else {
                        e.command = '/bin/sh';
                    }
                    e.args = ['-c', t];
                }
                return e;
            }
            function parse(e, t, r) {
                if (t && !Array.isArray(t)) {
                    r = t;
                    t = null;
                }
                t = t ? t.slice(0) : [];
                r = Object.assign({}, r);
                const A = {command: e, args: t, options: r, file: undefined, original: {command: e, args: t}};
                return r.shell ? parseShell(A) : parseNonShell(A);
            }
            e.exports = parse;
        },
        9482: (e) => {
            'use strict';
            const t = /([()\][%!^"`<>&|;, *?])/g;
            function escapeCommand(e) {
                e = e.replace(t, '^$1');
                return e;
            }
            function escapeArgument(e, r) {
                e = `${e}`;
                e = e.replace(/(\\*)"/g, '$1$1\\"');
                e = e.replace(/(\\*)$/, '$1$1');
                e = `"${e}"`;
                e = e.replace(t, '^$1');
                if (r) {
                    e = e.replace(t, '^$1');
                }
                return e;
            }
            e.exports.command = escapeCommand;
            e.exports.argument = escapeArgument;
        },
        7295: (e, t, r) => {
            'use strict';
            const A = r(7147);
            const i = r(2665);
            function readShebang(e) {
                const t = 150;
                let r;
                if (Buffer.alloc) {
                    r = Buffer.alloc(t);
                } else {
                    r = new Buffer(t);
                    r.fill(0);
                }
                let s;
                try {
                    s = A.openSync(e, 'r');
                    A.readSync(s, r, 0, t, 0);
                    A.closeSync(s);
                } catch (e) {}
                return i(r.toString());
            }
            e.exports = readShebang;
        },
        9727: (e, t, r) => {
            'use strict';
            const A = r(1017);
            const i = r(3008);
            const s = r(539)();
            function resolveCommandAttempt(e, t) {
                const r = process.cwd();
                const a = e.options.cwd != null;
                if (a) {
                    try {
                        process.chdir(e.options.cwd);
                    } catch (e) {}
                }
                let o;
                try {
                    o = i.sync(e.command, {
                        path: (e.options.env || process.env)[s],
                        pathExt: t ? A.delimiter : undefined,
                    });
                } catch (e) {
                } finally {
                    process.chdir(r);
                }
                if (o) {
                    o = A.resolve(a ? e.options.cwd : '', o);
                }
                return o;
            }
            function resolveCommand(e) {
                return resolveCommandAttempt(e) || resolveCommandAttempt(e, true);
            }
            e.exports = resolveCommand;
        },
        1657: (e) => {
            'use strict';
            var t = (e.exports = function (e) {
                return e !== null && typeof e === 'object' && typeof e.pipe === 'function';
            });
            t.writable = function (e) {
                return (
                    t(e) &&
                    e.writable !== false &&
                    typeof e._write === 'function' &&
                    typeof e._writableState === 'object'
                );
            };
            t.readable = function (e) {
                return (
                    t(e) &&
                    e.readable !== false &&
                    typeof e._read === 'function' &&
                    typeof e._readableState === 'object'
                );
            };
            t.duplex = function (e) {
                return t.writable(e) && t.readable(e);
            };
            t.transform = function (e) {
                return t.duplex(e) && typeof e._transform === 'function' && typeof e._transformState === 'object';
            };
        },
        5232: (e, t) => {
            t = e.exports = SemVer;
            var r;
            if (
                typeof process === 'object' &&
                process.env &&
                process.env.NODE_DEBUG &&
                /\bsemver\b/i.test(process.env.NODE_DEBUG)
            ) {
                r = function () {
                    var e = Array.prototype.slice.call(arguments, 0);
                    e.unshift('SEMVER');
                    console.log.apply(console, e);
                };
            } else {
                r = function () {};
            }
            t.SEMVER_SPEC_VERSION = '2.0.0';
            var A = 256;
            var i = Number.MAX_SAFE_INTEGER || 9007199254740991;
            var s = 16;
            var a = A - 6;
            var o = (t.re = []);
            var n = (t.safeRe = []);
            var p = (t.src = []);
            var d = 0;
            var l = '[a-zA-Z0-9-]';
            var u = [
                ['\\s', 1],
                ['\\d', A],
                [l, a],
            ];
            function makeSafeRe(e) {
                for (var t = 0; t < u.length; t++) {
                    var r = u[t][0];
                    var A = u[t][1];
                    e = e
                        .split(r + '*')
                        .join(r + '{0,' + A + '}')
                        .split(r + '+')
                        .join(r + '{1,' + A + '}');
                }
                return e;
            }
            var c = d++;
            p[c] = '0|[1-9]\\d*';
            var g = d++;
            p[g] = '\\d+';
            var m = d++;
            p[m] = '\\d*[a-zA-Z-]' + l + '*';
            var h = d++;
            p[h] = '(' + p[c] + ')\\.' + '(' + p[c] + ')\\.' + '(' + p[c] + ')';
            var C = d++;
            p[C] = '(' + p[g] + ')\\.' + '(' + p[g] + ')\\.' + '(' + p[g] + ')';
            var Q = d++;
            p[Q] = '(?:' + p[c] + '|' + p[m] + ')';
            var B = d++;
            p[B] = '(?:' + p[g] + '|' + p[m] + ')';
            var I = d++;
            p[I] = '(?:-(' + p[Q] + '(?:\\.' + p[Q] + ')*))';
            var y = d++;
            p[y] = '(?:-?(' + p[B] + '(?:\\.' + p[B] + ')*))';
            var w = d++;
            p[w] = l + '+';
            var b = d++;
            p[b] = '(?:\\+(' + p[w] + '(?:\\.' + p[w] + ')*))';
            var v = d++;
            var D = 'v?' + p[h] + p[I] + '?' + p[b] + '?';
            p[v] = '^' + D + '$';
            var R = '[v=\\s]*' + p[C] + p[y] + '?' + p[b] + '?';
            var k = d++;
            p[k] = '^' + R + '$';
            var S = d++;
            p[S] = '((?:<|>)?=?)';
            var N = d++;
            p[N] = p[g] + '|x|X|\\*';
            var _ = d++;
            p[_] = p[c] + '|x|X|\\*';
            var T = d++;
            p[T] =
                '[v=\\s]*(' +
                p[_] +
                ')' +
                '(?:\\.(' +
                p[_] +
                ')' +
                '(?:\\.(' +
                p[_] +
                ')' +
                '(?:' +
                p[I] +
                ')?' +
                p[b] +
                '?' +
                ')?)?';
            var q = d++;
            p[q] =
                '[v=\\s]*(' +
                p[N] +
                ')' +
                '(?:\\.(' +
                p[N] +
                ')' +
                '(?:\\.(' +
                p[N] +
                ')' +
                '(?:' +
                p[y] +
                ')?' +
                p[b] +
                '?' +
                ')?)?';
            var U = d++;
            p[U] = '^' + p[S] + '\\s*' + p[T] + '$';
            var L = d++;
            p[L] = '^' + p[S] + '\\s*' + p[q] + '$';
            var M = d++;
            p[M] =
                '(?:^|[^\\d])' +
                '(\\d{1,' +
                s +
                '})' +
                '(?:\\.(\\d{1,' +
                s +
                '}))?' +
                '(?:\\.(\\d{1,' +
                s +
                '}))?' +
                '(?:$|[^\\d])';
            var G = d++;
            p[G] = '(?:~>?)';
            var V = d++;
            p[V] = '(\\s*)' + p[G] + '\\s+';
            o[V] = new RegExp(p[V], 'g');
            n[V] = new RegExp(makeSafeRe(p[V]), 'g');
            var H = '$1~';
            var O = d++;
            p[O] = '^' + p[G] + p[T] + '$';
            var P = d++;
            p[P] = '^' + p[G] + p[q] + '$';
            var Y = d++;
            p[Y] = '(?:\\^)';
            var x = d++;
            p[x] = '(\\s*)' + p[Y] + '\\s+';
            o[x] = new RegExp(p[x], 'g');
            n[x] = new RegExp(makeSafeRe(p[x]), 'g');
            var J = '$1^';
            var j = d++;
            p[j] = '^' + p[Y] + p[T] + '$';
            var W = d++;
            p[W] = '^' + p[Y] + p[q] + '$';
            var z = d++;
            p[z] = '^' + p[S] + '\\s*(' + R + ')$|^$';
            var Z = d++;
            p[Z] = '^' + p[S] + '\\s*(' + D + ')$|^$';
            var X = d++;
            p[X] = '(\\s*)' + p[S] + '\\s*(' + R + '|' + p[T] + ')';
            o[X] = new RegExp(p[X], 'g');
            n[X] = new RegExp(makeSafeRe(p[X]), 'g');
            var K = '$1$2$3';
            var $ = d++;
            p[$] = '^\\s*(' + p[T] + ')' + '\\s+-\\s+' + '(' + p[T] + ')' + '\\s*$';
            var ee = d++;
            p[ee] = '^\\s*(' + p[q] + ')' + '\\s+-\\s+' + '(' + p[q] + ')' + '\\s*$';
            var te = d++;
            p[te] = '(<|>)?=?\\s*\\*';
            for (var re = 0; re < d; re++) {
                r(re, p[re]);
                if (!o[re]) {
                    o[re] = new RegExp(p[re]);
                    n[re] = new RegExp(makeSafeRe(p[re]));
                }
            }
            t.parse = parse;
            function parse(e, t) {
                if (!t || typeof t !== 'object') {
                    t = {loose: !!t, includePrerelease: false};
                }
                if (e instanceof SemVer) {
                    return e;
                }
                if (typeof e !== 'string') {
                    return null;
                }
                if (e.length > A) {
                    return null;
                }
                var r = t.loose ? n[k] : n[v];
                if (!r.test(e)) {
                    return null;
                }
                try {
                    return new SemVer(e, t);
                } catch (e) {
                    return null;
                }
            }
            t.valid = valid;
            function valid(e, t) {
                var r = parse(e, t);
                return r ? r.version : null;
            }
            t.clean = clean;
            function clean(e, t) {
                var r = parse(e.trim().replace(/^[=v]+/, ''), t);
                return r ? r.version : null;
            }
            t.SemVer = SemVer;
            function SemVer(e, t) {
                if (!t || typeof t !== 'object') {
                    t = {loose: !!t, includePrerelease: false};
                }
                if (e instanceof SemVer) {
                    if (e.loose === t.loose) {
                        return e;
                    } else {
                        e = e.version;
                    }
                } else if (typeof e !== 'string') {
                    throw new TypeError('Invalid Version: ' + e);
                }
                if (e.length > A) {
                    throw new TypeError('version is longer than ' + A + ' characters');
                }
                if (!(this instanceof SemVer)) {
                    return new SemVer(e, t);
                }
                r('SemVer', e, t);
                this.options = t;
                this.loose = !!t.loose;
                var s = e.trim().match(t.loose ? n[k] : n[v]);
                if (!s) {
                    throw new TypeError('Invalid Version: ' + e);
                }
                this.raw = e;
                this.major = +s[1];
                this.minor = +s[2];
                this.patch = +s[3];
                if (this.major > i || this.major < 0) {
                    throw new TypeError('Invalid major version');
                }
                if (this.minor > i || this.minor < 0) {
                    throw new TypeError('Invalid minor version');
                }
                if (this.patch > i || this.patch < 0) {
                    throw new TypeError('Invalid patch version');
                }
                if (!s[4]) {
                    this.prerelease = [];
                } else {
                    this.prerelease = s[4].split('.').map(function (e) {
                        if (/^[0-9]+$/.test(e)) {
                            var t = +e;
                            if (t >= 0 && t < i) {
                                return t;
                            }
                        }
                        return e;
                    });
                }
                this.build = s[5] ? s[5].split('.') : [];
                this.format();
            }
            SemVer.prototype.format = function () {
                this.version = this.major + '.' + this.minor + '.' + this.patch;
                if (this.prerelease.length) {
                    this.version += '-' + this.prerelease.join('.');
                }
                return this.version;
            };
            SemVer.prototype.toString = function () {
                return this.version;
            };
            SemVer.prototype.compare = function (e) {
                r('SemVer.compare', this.version, this.options, e);
                if (!(e instanceof SemVer)) {
                    e = new SemVer(e, this.options);
                }
                return this.compareMain(e) || this.comparePre(e);
            };
            SemVer.prototype.compareMain = function (e) {
                if (!(e instanceof SemVer)) {
                    e = new SemVer(e, this.options);
                }
                return (
                    compareIdentifiers(this.major, e.major) ||
                    compareIdentifiers(this.minor, e.minor) ||
                    compareIdentifiers(this.patch, e.patch)
                );
            };
            SemVer.prototype.comparePre = function (e) {
                if (!(e instanceof SemVer)) {
                    e = new SemVer(e, this.options);
                }
                if (this.prerelease.length && !e.prerelease.length) {
                    return -1;
                } else if (!this.prerelease.length && e.prerelease.length) {
                    return 1;
                } else if (!this.prerelease.length && !e.prerelease.length) {
                    return 0;
                }
                var t = 0;
                do {
                    var A = this.prerelease[t];
                    var i = e.prerelease[t];
                    r('prerelease compare', t, A, i);
                    if (A === undefined && i === undefined) {
                        return 0;
                    } else if (i === undefined) {
                        return 1;
                    } else if (A === undefined) {
                        return -1;
                    } else if (A === i) {
                        continue;
                    } else {
                        return compareIdentifiers(A, i);
                    }
                } while (++t);
            };
            SemVer.prototype.inc = function (e, t) {
                switch (e) {
                    case 'premajor':
                        this.prerelease.length = 0;
                        this.patch = 0;
                        this.minor = 0;
                        this.major++;
                        this.inc('pre', t);
                        break;
                    case 'preminor':
                        this.prerelease.length = 0;
                        this.patch = 0;
                        this.minor++;
                        this.inc('pre', t);
                        break;
                    case 'prepatch':
                        this.prerelease.length = 0;
                        this.inc('patch', t);
                        this.inc('pre', t);
                        break;
                    case 'prerelease':
                        if (this.prerelease.length === 0) {
                            this.inc('patch', t);
                        }
                        this.inc('pre', t);
                        break;
                    case 'major':
                        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                            this.major++;
                        }
                        this.minor = 0;
                        this.patch = 0;
                        this.prerelease = [];
                        break;
                    case 'minor':
                        if (this.patch !== 0 || this.prerelease.length === 0) {
                            this.minor++;
                        }
                        this.patch = 0;
                        this.prerelease = [];
                        break;
                    case 'patch':
                        if (this.prerelease.length === 0) {
                            this.patch++;
                        }
                        this.prerelease = [];
                        break;
                    case 'pre':
                        if (this.prerelease.length === 0) {
                            this.prerelease = [0];
                        } else {
                            var r = this.prerelease.length;
                            while (--r >= 0) {
                                if (typeof this.prerelease[r] === 'number') {
                                    this.prerelease[r]++;
                                    r = -2;
                                }
                            }
                            if (r === -1) {
                                this.prerelease.push(0);
                            }
                        }
                        if (t) {
                            if (this.prerelease[0] === t) {
                                if (isNaN(this.prerelease[1])) {
                                    this.prerelease = [t, 0];
                                }
                            } else {
                                this.prerelease = [t, 0];
                            }
                        }
                        break;
                    default:
                        throw new Error('invalid increment argument: ' + e);
                }
                this.format();
                this.raw = this.version;
                return this;
            };
            t.inc = inc;
            function inc(e, t, r, A) {
                if (typeof r === 'string') {
                    A = r;
                    r = undefined;
                }
                try {
                    return new SemVer(e, r).inc(t, A).version;
                } catch (e) {
                    return null;
                }
            }
            t.diff = diff;
            function diff(e, t) {
                if (eq(e, t)) {
                    return null;
                } else {
                    var r = parse(e);
                    var A = parse(t);
                    var i = '';
                    if (r.prerelease.length || A.prerelease.length) {
                        i = 'pre';
                        var s = 'prerelease';
                    }
                    for (var a in r) {
                        if (a === 'major' || a === 'minor' || a === 'patch') {
                            if (r[a] !== A[a]) {
                                return i + a;
                            }
                        }
                    }
                    return s;
                }
            }
            t.compareIdentifiers = compareIdentifiers;
            var Ae = /^[0-9]+$/;
            function compareIdentifiers(e, t) {
                var r = Ae.test(e);
                var A = Ae.test(t);
                if (r && A) {
                    e = +e;
                    t = +t;
                }
                return e === t ? 0 : r && !A ? -1 : A && !r ? 1 : e < t ? -1 : 1;
            }
            t.rcompareIdentifiers = rcompareIdentifiers;
            function rcompareIdentifiers(e, t) {
                return compareIdentifiers(t, e);
            }
            t.major = major;
            function major(e, t) {
                return new SemVer(e, t).major;
            }
            t.minor = minor;
            function minor(e, t) {
                return new SemVer(e, t).minor;
            }
            t.patch = patch;
            function patch(e, t) {
                return new SemVer(e, t).patch;
            }
            t.compare = compare;
            function compare(e, t, r) {
                return new SemVer(e, r).compare(new SemVer(t, r));
            }
            t.compareLoose = compareLoose;
            function compareLoose(e, t) {
                return compare(e, t, true);
            }
            t.rcompare = rcompare;
            function rcompare(e, t, r) {
                return compare(t, e, r);
            }
            t.sort = sort;
            function sort(e, r) {
                return e.sort(function (e, A) {
                    return t.compare(e, A, r);
                });
            }
            t.rsort = rsort;
            function rsort(e, r) {
                return e.sort(function (e, A) {
                    return t.rcompare(e, A, r);
                });
            }
            t.gt = gt;
            function gt(e, t, r) {
                return compare(e, t, r) > 0;
            }
            t.lt = lt;
            function lt(e, t, r) {
                return compare(e, t, r) < 0;
            }
            t.eq = eq;
            function eq(e, t, r) {
                return compare(e, t, r) === 0;
            }
            t.neq = neq;
            function neq(e, t, r) {
                return compare(e, t, r) !== 0;
            }
            t.gte = gte;
            function gte(e, t, r) {
                return compare(e, t, r) >= 0;
            }
            t.lte = lte;
            function lte(e, t, r) {
                return compare(e, t, r) <= 0;
            }
            t.cmp = cmp;
            function cmp(e, t, r, A) {
                switch (t) {
                    case '===':
                        if (typeof e === 'object') e = e.version;
                        if (typeof r === 'object') r = r.version;
                        return e === r;
                    case '!==':
                        if (typeof e === 'object') e = e.version;
                        if (typeof r === 'object') r = r.version;
                        return e !== r;
                    case '':
                    case '=':
                    case '==':
                        return eq(e, r, A);
                    case '!=':
                        return neq(e, r, A);
                    case '>':
                        return gt(e, r, A);
                    case '>=':
                        return gte(e, r, A);
                    case '<':
                        return lt(e, r, A);
                    case '<=':
                        return lte(e, r, A);
                    default:
                        throw new TypeError('Invalid operator: ' + t);
                }
            }
            t.Comparator = Comparator;
            function Comparator(e, t) {
                if (!t || typeof t !== 'object') {
                    t = {loose: !!t, includePrerelease: false};
                }
                if (e instanceof Comparator) {
                    if (e.loose === !!t.loose) {
                        return e;
                    } else {
                        e = e.value;
                    }
                }
                if (!(this instanceof Comparator)) {
                    return new Comparator(e, t);
                }
                e = e.trim().split(/\s+/).join(' ');
                r('comparator', e, t);
                this.options = t;
                this.loose = !!t.loose;
                this.parse(e);
                if (this.semver === ie) {
                    this.value = '';
                } else {
                    this.value = this.operator + this.semver.version;
                }
                r('comp', this);
            }
            var ie = {};
            Comparator.prototype.parse = function (e) {
                var t = this.options.loose ? n[z] : n[Z];
                var r = e.match(t);
                if (!r) {
                    throw new TypeError('Invalid comparator: ' + e);
                }
                this.operator = r[1];
                if (this.operator === '=') {
                    this.operator = '';
                }
                if (!r[2]) {
                    this.semver = ie;
                } else {
                    this.semver = new SemVer(r[2], this.options.loose);
                }
            };
            Comparator.prototype.toString = function () {
                return this.value;
            };
            Comparator.prototype.test = function (e) {
                r('Comparator.test', e, this.options.loose);
                if (this.semver === ie) {
                    return true;
                }
                if (typeof e === 'string') {
                    e = new SemVer(e, this.options);
                }
                return cmp(e, this.operator, this.semver, this.options);
            };
            Comparator.prototype.intersects = function (e, t) {
                if (!(e instanceof Comparator)) {
                    throw new TypeError('a Comparator is required');
                }
                if (!t || typeof t !== 'object') {
                    t = {loose: !!t, includePrerelease: false};
                }
                var r;
                if (this.operator === '') {
                    r = new Range(e.value, t);
                    return satisfies(this.value, r, t);
                } else if (e.operator === '') {
                    r = new Range(this.value, t);
                    return satisfies(e.semver, r, t);
                }
                var A =
                    (this.operator === '>=' || this.operator === '>') && (e.operator === '>=' || e.operator === '>');
                var i =
                    (this.operator === '<=' || this.operator === '<') && (e.operator === '<=' || e.operator === '<');
                var s = this.semver.version === e.semver.version;
                var a =
                    (this.operator === '>=' || this.operator === '<=') && (e.operator === '>=' || e.operator === '<=');
                var o =
                    cmp(this.semver, '<', e.semver, t) &&
                    (this.operator === '>=' || this.operator === '>') &&
                    (e.operator === '<=' || e.operator === '<');
                var n =
                    cmp(this.semver, '>', e.semver, t) &&
                    (this.operator === '<=' || this.operator === '<') &&
                    (e.operator === '>=' || e.operator === '>');
                return A || i || (s && a) || o || n;
            };
            t.Range = Range;
            function Range(e, t) {
                if (!t || typeof t !== 'object') {
                    t = {loose: !!t, includePrerelease: false};
                }
                if (e instanceof Range) {
                    if (e.loose === !!t.loose && e.includePrerelease === !!t.includePrerelease) {
                        return e;
                    } else {
                        return new Range(e.raw, t);
                    }
                }
                if (e instanceof Comparator) {
                    return new Range(e.value, t);
                }
                if (!(this instanceof Range)) {
                    return new Range(e, t);
                }
                this.options = t;
                this.loose = !!t.loose;
                this.includePrerelease = !!t.includePrerelease;
                this.raw = e.trim().split(/\s+/).join(' ');
                this.set = this.raw
                    .split('||')
                    .map(function (e) {
                        return this.parseRange(e.trim());
                    }, this)
                    .filter(function (e) {
                        return e.length;
                    });
                if (!this.set.length) {
                    throw new TypeError('Invalid SemVer Range: ' + this.raw);
                }
                this.format();
            }
            Range.prototype.format = function () {
                this.range = this.set
                    .map(function (e) {
                        return e.join(' ').trim();
                    })
                    .join('||')
                    .trim();
                return this.range;
            };
            Range.prototype.toString = function () {
                return this.range;
            };
            Range.prototype.parseRange = function (e) {
                var t = this.options.loose;
                var A = t ? n[ee] : n[$];
                e = e.replace(A, hyphenReplace);
                r('hyphen replace', e);
                e = e.replace(n[X], K);
                r('comparator trim', e, n[X]);
                e = e.replace(n[V], H);
                e = e.replace(n[x], J);
                var i = t ? n[z] : n[Z];
                var s = e
                    .split(' ')
                    .map(function (e) {
                        return parseComparator(e, this.options);
                    }, this)
                    .join(' ')
                    .split(/\s+/);
                if (this.options.loose) {
                    s = s.filter(function (e) {
                        return !!e.match(i);
                    });
                }
                s = s.map(function (e) {
                    return new Comparator(e, this.options);
                }, this);
                return s;
            };
            Range.prototype.intersects = function (e, t) {
                if (!(e instanceof Range)) {
                    throw new TypeError('a Range is required');
                }
                return this.set.some(function (r) {
                    return r.every(function (r) {
                        return e.set.some(function (e) {
                            return e.every(function (e) {
                                return r.intersects(e, t);
                            });
                        });
                    });
                });
            };
            t.toComparators = toComparators;
            function toComparators(e, t) {
                return new Range(e, t).set.map(function (e) {
                    return e
                        .map(function (e) {
                            return e.value;
                        })
                        .join(' ')
                        .trim()
                        .split(' ');
                });
            }
            function parseComparator(e, t) {
                r('comp', e, t);
                e = replaceCarets(e, t);
                r('caret', e);
                e = replaceTildes(e, t);
                r('tildes', e);
                e = replaceXRanges(e, t);
                r('xrange', e);
                e = replaceStars(e, t);
                r('stars', e);
                return e;
            }
            function isX(e) {
                return !e || e.toLowerCase() === 'x' || e === '*';
            }
            function replaceTildes(e, t) {
                return e
                    .trim()
                    .split(/\s+/)
                    .map(function (e) {
                        return replaceTilde(e, t);
                    })
                    .join(' ');
            }
            function replaceTilde(e, t) {
                var A = t.loose ? n[P] : n[O];
                return e.replace(A, function (t, A, i, s, a) {
                    r('tilde', e, t, A, i, s, a);
                    var o;
                    if (isX(A)) {
                        o = '';
                    } else if (isX(i)) {
                        o = '>=' + A + '.0.0 <' + (+A + 1) + '.0.0';
                    } else if (isX(s)) {
                        o = '>=' + A + '.' + i + '.0 <' + A + '.' + (+i + 1) + '.0';
                    } else if (a) {
                        r('replaceTilde pr', a);
                        o = '>=' + A + '.' + i + '.' + s + '-' + a + ' <' + A + '.' + (+i + 1) + '.0';
                    } else {
                        o = '>=' + A + '.' + i + '.' + s + ' <' + A + '.' + (+i + 1) + '.0';
                    }
                    r('tilde return', o);
                    return o;
                });
            }
            function replaceCarets(e, t) {
                return e
                    .trim()
                    .split(/\s+/)
                    .map(function (e) {
                        return replaceCaret(e, t);
                    })
                    .join(' ');
            }
            function replaceCaret(e, t) {
                r('caret', e, t);
                var A = t.loose ? n[W] : n[j];
                return e.replace(A, function (t, A, i, s, a) {
                    r('caret', e, t, A, i, s, a);
                    var o;
                    if (isX(A)) {
                        o = '';
                    } else if (isX(i)) {
                        o = '>=' + A + '.0.0 <' + (+A + 1) + '.0.0';
                    } else if (isX(s)) {
                        if (A === '0') {
                            o = '>=' + A + '.' + i + '.0 <' + A + '.' + (+i + 1) + '.0';
                        } else {
                            o = '>=' + A + '.' + i + '.0 <' + (+A + 1) + '.0.0';
                        }
                    } else if (a) {
                        r('replaceCaret pr', a);
                        if (A === '0') {
                            if (i === '0') {
                                o = '>=' + A + '.' + i + '.' + s + '-' + a + ' <' + A + '.' + i + '.' + (+s + 1);
                            } else {
                                o = '>=' + A + '.' + i + '.' + s + '-' + a + ' <' + A + '.' + (+i + 1) + '.0';
                            }
                        } else {
                            o = '>=' + A + '.' + i + '.' + s + '-' + a + ' <' + (+A + 1) + '.0.0';
                        }
                    } else {
                        r('no pr');
                        if (A === '0') {
                            if (i === '0') {
                                o = '>=' + A + '.' + i + '.' + s + ' <' + A + '.' + i + '.' + (+s + 1);
                            } else {
                                o = '>=' + A + '.' + i + '.' + s + ' <' + A + '.' + (+i + 1) + '.0';
                            }
                        } else {
                            o = '>=' + A + '.' + i + '.' + s + ' <' + (+A + 1) + '.0.0';
                        }
                    }
                    r('caret return', o);
                    return o;
                });
            }
            function replaceXRanges(e, t) {
                r('replaceXRanges', e, t);
                return e
                    .split(/\s+/)
                    .map(function (e) {
                        return replaceXRange(e, t);
                    })
                    .join(' ');
            }
            function replaceXRange(e, t) {
                e = e.trim();
                var A = t.loose ? n[L] : n[U];
                return e.replace(A, function (t, A, i, s, a, o) {
                    r('xRange', e, t, A, i, s, a, o);
                    var n = isX(i);
                    var p = n || isX(s);
                    var d = p || isX(a);
                    var l = d;
                    if (A === '=' && l) {
                        A = '';
                    }
                    if (n) {
                        if (A === '>' || A === '<') {
                            t = '<0.0.0';
                        } else {
                            t = '*';
                        }
                    } else if (A && l) {
                        if (p) {
                            s = 0;
                        }
                        a = 0;
                        if (A === '>') {
                            A = '>=';
                            if (p) {
                                i = +i + 1;
                                s = 0;
                                a = 0;
                            } else {
                                s = +s + 1;
                                a = 0;
                            }
                        } else if (A === '<=') {
                            A = '<';
                            if (p) {
                                i = +i + 1;
                            } else {
                                s = +s + 1;
                            }
                        }
                        t = A + i + '.' + s + '.' + a;
                    } else if (p) {
                        t = '>=' + i + '.0.0 <' + (+i + 1) + '.0.0';
                    } else if (d) {
                        t = '>=' + i + '.' + s + '.0 <' + i + '.' + (+s + 1) + '.0';
                    }
                    r('xRange return', t);
                    return t;
                });
            }
            function replaceStars(e, t) {
                r('replaceStars', e, t);
                return e.trim().replace(n[te], '');
            }
            function hyphenReplace(e, t, r, A, i, s, a, o, n, p, d, l, u) {
                if (isX(r)) {
                    t = '';
                } else if (isX(A)) {
                    t = '>=' + r + '.0.0';
                } else if (isX(i)) {
                    t = '>=' + r + '.' + A + '.0';
                } else {
                    t = '>=' + t;
                }
                if (isX(n)) {
                    o = '';
                } else if (isX(p)) {
                    o = '<' + (+n + 1) + '.0.0';
                } else if (isX(d)) {
                    o = '<' + n + '.' + (+p + 1) + '.0';
                } else if (l) {
                    o = '<=' + n + '.' + p + '.' + d + '-' + l;
                } else {
                    o = '<=' + o;
                }
                return (t + ' ' + o).trim();
            }
            Range.prototype.test = function (e) {
                if (!e) {
                    return false;
                }
                if (typeof e === 'string') {
                    e = new SemVer(e, this.options);
                }
                for (var t = 0; t < this.set.length; t++) {
                    if (testSet(this.set[t], e, this.options)) {
                        return true;
                    }
                }
                return false;
            };
            function testSet(e, t, A) {
                for (var i = 0; i < e.length; i++) {
                    if (!e[i].test(t)) {
                        return false;
                    }
                }
                if (t.prerelease.length && !A.includePrerelease) {
                    for (i = 0; i < e.length; i++) {
                        r(e[i].semver);
                        if (e[i].semver === ie) {
                            continue;
                        }
                        if (e[i].semver.prerelease.length > 0) {
                            var s = e[i].semver;
                            if (s.major === t.major && s.minor === t.minor && s.patch === t.patch) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                return true;
            }
            t.satisfies = satisfies;
            function satisfies(e, t, r) {
                try {
                    t = new Range(t, r);
                } catch (e) {
                    return false;
                }
                return t.test(e);
            }
            t.maxSatisfying = maxSatisfying;
            function maxSatisfying(e, t, r) {
                var A = null;
                var i = null;
                try {
                    var s = new Range(t, r);
                } catch (e) {
                    return null;
                }
                e.forEach(function (e) {
                    if (s.test(e)) {
                        if (!A || i.compare(e) === -1) {
                            A = e;
                            i = new SemVer(A, r);
                        }
                    }
                });
                return A;
            }
            t.minSatisfying = minSatisfying;
            function minSatisfying(e, t, r) {
                var A = null;
                var i = null;
                try {
                    var s = new Range(t, r);
                } catch (e) {
                    return null;
                }
                e.forEach(function (e) {
                    if (s.test(e)) {
                        if (!A || i.compare(e) === 1) {
                            A = e;
                            i = new SemVer(A, r);
                        }
                    }
                });
                return A;
            }
            t.minVersion = minVersion;
            function minVersion(e, t) {
                e = new Range(e, t);
                var r = new SemVer('0.0.0');
                if (e.test(r)) {
                    return r;
                }
                r = new SemVer('0.0.0-0');
                if (e.test(r)) {
                    return r;
                }
                r = null;
                for (var A = 0; A < e.set.length; ++A) {
                    var i = e.set[A];
                    i.forEach(function (e) {
                        var t = new SemVer(e.semver.version);
                        switch (e.operator) {
                            case '>':
                                if (t.prerelease.length === 0) {
                                    t.patch++;
                                } else {
                                    t.prerelease.push(0);
                                }
                                t.raw = t.format();
                            case '':
                            case '>=':
                                if (!r || gt(r, t)) {
                                    r = t;
                                }
                                break;
                            case '<':
                            case '<=':
                                break;
                            default:
                                throw new Error('Unexpected operation: ' + e.operator);
                        }
                    });
                }
                if (r && e.test(r)) {
                    return r;
                }
                return null;
            }
            t.validRange = validRange;
            function validRange(e, t) {
                try {
                    return new Range(e, t).range || '*';
                } catch (e) {
                    return null;
                }
            }
            t.ltr = ltr;
            function ltr(e, t, r) {
                return outside(e, t, '<', r);
            }
            t.gtr = gtr;
            function gtr(e, t, r) {
                return outside(e, t, '>', r);
            }
            t.outside = outside;
            function outside(e, t, r, A) {
                e = new SemVer(e, A);
                t = new Range(t, A);
                var i, s, a, o, n;
                switch (r) {
                    case '>':
                        i = gt;
                        s = lte;
                        a = lt;
                        o = '>';
                        n = '>=';
                        break;
                    case '<':
                        i = lt;
                        s = gte;
                        a = gt;
                        o = '<';
                        n = '<=';
                        break;
                    default:
                        throw new TypeError('Must provide a hilo val of "<" or ">"');
                }
                if (satisfies(e, t, A)) {
                    return false;
                }
                for (var p = 0; p < t.set.length; ++p) {
                    var d = t.set[p];
                    var l = null;
                    var u = null;
                    d.forEach(function (e) {
                        if (e.semver === ie) {
                            e = new Comparator('>=0.0.0');
                        }
                        l = l || e;
                        u = u || e;
                        if (i(e.semver, l.semver, A)) {
                            l = e;
                        } else if (a(e.semver, u.semver, A)) {
                            u = e;
                        }
                    });
                    if (l.operator === o || l.operator === n) {
                        return false;
                    }
                    if ((!u.operator || u.operator === o) && s(e, u.semver)) {
                        return false;
                    } else if (u.operator === n && a(e, u.semver)) {
                        return false;
                    }
                }
                return true;
            }
            t.prerelease = prerelease;
            function prerelease(e, t) {
                var r = parse(e, t);
                return r && r.prerelease.length ? r.prerelease : null;
            }
            t.intersects = intersects;
            function intersects(e, t, r) {
                e = new Range(e, r);
                t = new Range(t, r);
                return e.intersects(t);
            }
            t.coerce = coerce;
            function coerce(e) {
                if (e instanceof SemVer) {
                    return e;
                }
                if (typeof e !== 'string') {
                    return null;
                }
                var t = e.match(n[M]);
                if (t == null) {
                    return null;
                }
                return parse(t[1] + '.' + (t[2] || '0') + '.' + (t[3] || '0'));
            }
        },
        2665: (e, t, r) => {
            'use strict';
            var A = r(7433);
            e.exports = function (e) {
                var t = e.match(A);
                if (!t) {
                    return null;
                }
                var r = t[0].replace(/#! ?/, '').split(' ');
                var i = r[0].split('/').pop();
                var s = r[1];
                return i === 'env' ? s : i + (s ? ' ' + s : '');
            };
        },
        7433: (e) => {
            'use strict';
            e.exports = /^#!.*/;
        },
        3008: (e, t, r) => {
            e.exports = which;
            which.sync = whichSync;
            var A = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';
            var i = r(1017);
            var s = A ? ';' : ':';
            var a = r(7126);
            function getNotFoundError(e) {
                var t = new Error('not found: ' + e);
                t.code = 'ENOENT';
                return t;
            }
            function getPathInfo(e, t) {
                var r = t.colon || s;
                var i = t.path || process.env.PATH || '';
                var a = [''];
                i = i.split(r);
                var o = '';
                if (A) {
                    i.unshift(process.cwd());
                    o = t.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM';
                    a = o.split(r);
                    if (e.indexOf('.') !== -1 && a[0] !== '') a.unshift('');
                }
                if (e.match(/\//) || (A && e.match(/\\/))) i = [''];
                return {env: i, ext: a, extExe: o};
            }
            function which(e, t, r) {
                if (typeof t === 'function') {
                    r = t;
                    t = {};
                }
                var A = getPathInfo(e, t);
                var s = A.env;
                var o = A.ext;
                var n = A.extExe;
                var p = [];
                (function F(A, d) {
                    if (A === d) {
                        if (t.all && p.length) return r(null, p);
                        else return r(getNotFoundError(e));
                    }
                    var l = s[A];
                    if (l.charAt(0) === '"' && l.slice(-1) === '"') l = l.slice(1, -1);
                    var u = i.join(l, e);
                    if (!l && /^\.[\\\/]/.test(e)) {
                        u = e.slice(0, 2) + u;
                    }
                    (function E(e, i) {
                        if (e === i) return F(A + 1, d);
                        var s = o[e];
                        a(u + s, {pathExt: n}, function (A, a) {
                            if (!A && a) {
                                if (t.all) p.push(u + s);
                                else return r(null, u + s);
                            }
                            return E(e + 1, i);
                        });
                    })(0, o.length);
                })(0, s.length);
            }
            function whichSync(e, t) {
                t = t || {};
                var r = getPathInfo(e, t);
                var A = r.env;
                var s = r.ext;
                var o = r.extExe;
                var n = [];
                for (var p = 0, d = A.length; p < d; p++) {
                    var l = A[p];
                    if (l.charAt(0) === '"' && l.slice(-1) === '"') l = l.slice(1, -1);
                    var u = i.join(l, e);
                    if (!l && /^\.[\\\/]/.test(e)) {
                        u = e.slice(0, 2) + u;
                    }
                    for (var c = 0, g = s.length; c < g; c++) {
                        var m = u + s[c];
                        var h;
                        try {
                            h = a.sync(m, {pathExt: o});
                            if (h) {
                                if (t.all) n.push(m);
                                else return m;
                            }
                        } catch (e) {}
                    }
                }
                if (t.all && n.length) return n;
                if (t.nothrow) return null;
                throw getNotFoundError(e);
            }
        },
        1585: (e, t, r) => {
            'use strict';
            const {PassThrough: A} = r(2781);
            e.exports = (e) => {
                e = Object.assign({}, e);
                const {array: t} = e;
                let {encoding: r} = e;
                const i = r === 'buffer';
                let s = false;
                if (t) {
                    s = !(r || i);
                } else {
                    r = r || 'utf8';
                }
                if (i) {
                    r = null;
                }
                let a = 0;
                const o = [];
                const n = new A({objectMode: s});
                if (r) {
                    n.setEncoding(r);
                }
                n.on('data', (e) => {
                    o.push(e);
                    if (s) {
                        a = o.length;
                    } else {
                        a += e.length;
                    }
                });
                n.getBufferedValue = () => {
                    if (t) {
                        return o;
                    }
                    return i ? Buffer.concat(o, a) : o.join('');
                };
                n.getBufferedLength = () => a;
                return n;
            };
        },
        1766: (e, t, r) => {
            'use strict';
            const A = r(8341);
            const i = r(1585);
            class MaxBufferError extends Error {
                constructor() {
                    super('maxBuffer exceeded');
                    this.name = 'MaxBufferError';
                }
            }
            function getStream(e, t) {
                if (!e) {
                    return Promise.reject(new Error('Expected a stream'));
                }
                t = Object.assign({maxBuffer: Infinity}, t);
                const {maxBuffer: r} = t;
                let s;
                return new Promise((a, o) => {
                    const rejectPromise = (e) => {
                        if (e) {
                            e.bufferedData = s.getBufferedValue();
                        }
                        o(e);
                    };
                    s = A(e, i(t), (e) => {
                        if (e) {
                            rejectPromise(e);
                            return;
                        }
                        a();
                    });
                    s.on('data', () => {
                        if (s.getBufferedLength() > r) {
                            rejectPromise(new MaxBufferError());
                        }
                    });
                }).then(() => s.getBufferedValue());
            }
            e.exports = getStream;
            e.exports.buffer = (e, t) => getStream(e, Object.assign({}, t, {encoding: 'buffer'}));
            e.exports.array = (e, t) => getStream(e, Object.assign({}, t, {array: true}));
            e.exports.MaxBufferError = MaxBufferError;
        },
        1621: (e) => {
            'use strict';
            e.exports = (e, t = process.argv) => {
                const r = e.startsWith('-') ? '' : e.length === 1 ? '-' : '--';
                const A = t.indexOf(r + e);
                const i = t.indexOf('--');
                return A !== -1 && (i === -1 || A < i);
            };
        },
        7126: (e, t, r) => {
            var A = r(7147);
            var i;
            if (process.platform === 'win32' || global.TESTING_WINDOWS) {
                i = r(2001);
            } else {
                i = r(9728);
            }
            e.exports = isexe;
            isexe.sync = sync;
            function isexe(e, t, r) {
                if (typeof t === 'function') {
                    r = t;
                    t = {};
                }
                if (!r) {
                    if (typeof Promise !== 'function') {
                        throw new TypeError('callback not provided');
                    }
                    return new Promise(function (r, A) {
                        isexe(e, t || {}, function (e, t) {
                            if (e) {
                                A(e);
                            } else {
                                r(t);
                            }
                        });
                    });
                }
                i(e, t || {}, function (e, A) {
                    if (e) {
                        if (e.code === 'EACCES' || (t && t.ignoreErrors)) {
                            e = null;
                            A = false;
                        }
                    }
                    r(e, A);
                });
            }
            function sync(e, t) {
                try {
                    return i.sync(e, t || {});
                } catch (e) {
                    if ((t && t.ignoreErrors) || e.code === 'EACCES') {
                        return false;
                    } else {
                        throw e;
                    }
                }
            }
        },
        9728: (e, t, r) => {
            e.exports = isexe;
            isexe.sync = sync;
            var A = r(7147);
            function isexe(e, t, r) {
                A.stat(e, function (e, A) {
                    r(e, e ? false : checkStat(A, t));
                });
            }
            function sync(e, t) {
                return checkStat(A.statSync(e), t);
            }
            function checkStat(e, t) {
                return e.isFile() && checkMode(e, t);
            }
            function checkMode(e, t) {
                var r = e.mode;
                var A = e.uid;
                var i = e.gid;
                var s = t.uid !== undefined ? t.uid : process.getuid && process.getuid();
                var a = t.gid !== undefined ? t.gid : process.getgid && process.getgid();
                var o = parseInt('100', 8);
                var n = parseInt('010', 8);
                var p = parseInt('001', 8);
                var d = o | n;
                var l = r & p || (r & n && i === a) || (r & o && A === s) || (r & d && s === 0);
                return l;
            }
        },
        2001: (e, t, r) => {
            e.exports = isexe;
            isexe.sync = sync;
            var A = r(7147);
            function checkPathExt(e, t) {
                var r = t.pathExt !== undefined ? t.pathExt : process.env.PATHEXT;
                if (!r) {
                    return true;
                }
                r = r.split(';');
                if (r.indexOf('') !== -1) {
                    return true;
                }
                for (var A = 0; A < r.length; A++) {
                    var i = r[A].toLowerCase();
                    if (i && e.substr(-i.length).toLowerCase() === i) {
                        return true;
                    }
                }
                return false;
            }
            function checkStat(e, t, r) {
                if (!e.isSymbolicLink() && !e.isFile()) {
                    return false;
                }
                return checkPathExt(t, r);
            }
            function isexe(e, t, r) {
                A.stat(e, function (A, i) {
                    r(A, A ? false : checkStat(i, e, t));
                });
            }
            function sync(e, t) {
                return checkStat(A.statSync(e), e, t);
            }
        },
        9197: (e) => {
            var t = 'Expected a function';
            var r = '__lodash_hash_undefined__';
            var A = 1 / 0;
            var i = '[object Function]',
                s = '[object GeneratorFunction]',
                a = '[object Symbol]';
            var o = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                n = /^\w*$/,
                p = /^\./,
                d = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
            var l = /[\\^$.*+?()[\]{}|]/g;
            var u = /\\(\\)?/g;
            var c = /^\[object .+?Constructor\]$/;
            var g = typeof global == 'object' && global && global.Object === Object && global;
            var m = typeof self == 'object' && self && self.Object === Object && self;
            var h = g || m || Function('return this')();
            function getValue(e, t) {
                return e == null ? undefined : e[t];
            }
            function isHostObject(e) {
                var t = false;
                if (e != null && typeof e.toString != 'function') {
                    try {
                        t = !!(e + '');
                    } catch (e) {}
                }
                return t;
            }
            var C = Array.prototype,
                Q = Function.prototype,
                B = Object.prototype;
            var I = h['__core-js_shared__'];
            var y = (function () {
                var e = /[^.]+$/.exec((I && I.keys && I.keys.IE_PROTO) || '');
                return e ? 'Symbol(src)_1.' + e : '';
            })();
            var w = Q.toString;
            var b = B.hasOwnProperty;
            var v = B.toString;
            var D = RegExp(
                '^' +
                    w
                        .call(b)
                        .replace(l, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                    '$',
            );
            var R = h.Symbol,
                k = C.splice;
            var S = getNative(h, 'Map'),
                N = getNative(Object, 'create');
            var _ = R ? R.prototype : undefined,
                T = _ ? _.toString : undefined;
            function Hash(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function hashClear() {
                this.__data__ = N ? N(null) : {};
            }
            function hashDelete(e) {
                return this.has(e) && delete this.__data__[e];
            }
            function hashGet(e) {
                var t = this.__data__;
                if (N) {
                    var A = t[e];
                    return A === r ? undefined : A;
                }
                return b.call(t, e) ? t[e] : undefined;
            }
            function hashHas(e) {
                var t = this.__data__;
                return N ? t[e] !== undefined : b.call(t, e);
            }
            function hashSet(e, t) {
                var A = this.__data__;
                A[e] = N && t === undefined ? r : t;
                return this;
            }
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;
            function ListCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function listCacheClear() {
                this.__data__ = [];
            }
            function listCacheDelete(e) {
                var t = this.__data__,
                    r = assocIndexOf(t, e);
                if (r < 0) {
                    return false;
                }
                var A = t.length - 1;
                if (r == A) {
                    t.pop();
                } else {
                    k.call(t, r, 1);
                }
                return true;
            }
            function listCacheGet(e) {
                var t = this.__data__,
                    r = assocIndexOf(t, e);
                return r < 0 ? undefined : t[r][1];
            }
            function listCacheHas(e) {
                return assocIndexOf(this.__data__, e) > -1;
            }
            function listCacheSet(e, t) {
                var r = this.__data__,
                    A = assocIndexOf(r, e);
                if (A < 0) {
                    r.push([e, t]);
                } else {
                    r[A][1] = t;
                }
                return this;
            }
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;
            function MapCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function mapCacheClear() {
                this.__data__ = {hash: new Hash(), map: new (S || ListCache)(), string: new Hash()};
            }
            function mapCacheDelete(e) {
                return getMapData(this, e)['delete'](e);
            }
            function mapCacheGet(e) {
                return getMapData(this, e).get(e);
            }
            function mapCacheHas(e) {
                return getMapData(this, e).has(e);
            }
            function mapCacheSet(e, t) {
                getMapData(this, e).set(e, t);
                return this;
            }
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;
            function assocIndexOf(e, t) {
                var r = e.length;
                while (r--) {
                    if (eq(e[r][0], t)) {
                        return r;
                    }
                }
                return -1;
            }
            function baseGet(e, t) {
                t = isKey(t, e) ? [t] : castPath(t);
                var r = 0,
                    A = t.length;
                while (e != null && r < A) {
                    e = e[toKey(t[r++])];
                }
                return r && r == A ? e : undefined;
            }
            function baseIsNative(e) {
                if (!isObject(e) || isMasked(e)) {
                    return false;
                }
                var t = isFunction(e) || isHostObject(e) ? D : c;
                return t.test(toSource(e));
            }
            function baseToString(e) {
                if (typeof e == 'string') {
                    return e;
                }
                if (isSymbol(e)) {
                    return T ? T.call(e) : '';
                }
                var t = e + '';
                return t == '0' && 1 / e == -A ? '-0' : t;
            }
            function castPath(e) {
                return U(e) ? e : q(e);
            }
            function getMapData(e, t) {
                var r = e.__data__;
                return isKeyable(t) ? r[typeof t == 'string' ? 'string' : 'hash'] : r.map;
            }
            function getNative(e, t) {
                var r = getValue(e, t);
                return baseIsNative(r) ? r : undefined;
            }
            function isKey(e, t) {
                if (U(e)) {
                    return false;
                }
                var r = typeof e;
                if (r == 'number' || r == 'symbol' || r == 'boolean' || e == null || isSymbol(e)) {
                    return true;
                }
                return n.test(e) || !o.test(e) || (t != null && e in Object(t));
            }
            function isKeyable(e) {
                var t = typeof e;
                return t == 'string' || t == 'number' || t == 'symbol' || t == 'boolean'
                    ? e !== '__proto__'
                    : e === null;
            }
            function isMasked(e) {
                return !!y && y in e;
            }
            var q = memoize(function (e) {
                e = toString(e);
                var t = [];
                if (p.test(e)) {
                    t.push('');
                }
                e.replace(d, function (e, r, A, i) {
                    t.push(A ? i.replace(u, '$1') : r || e);
                });
                return t;
            });
            function toKey(e) {
                if (typeof e == 'string' || isSymbol(e)) {
                    return e;
                }
                var t = e + '';
                return t == '0' && 1 / e == -A ? '-0' : t;
            }
            function toSource(e) {
                if (e != null) {
                    try {
                        return w.call(e);
                    } catch (e) {}
                    try {
                        return e + '';
                    } catch (e) {}
                }
                return '';
            }
            function memoize(e, r) {
                if (typeof e != 'function' || (r && typeof r != 'function')) {
                    throw new TypeError(t);
                }
                var memoized = function () {
                    var t = arguments,
                        A = r ? r.apply(this, t) : t[0],
                        i = memoized.cache;
                    if (i.has(A)) {
                        return i.get(A);
                    }
                    var s = e.apply(this, t);
                    memoized.cache = i.set(A, s);
                    return s;
                };
                memoized.cache = new (memoize.Cache || MapCache)();
                return memoized;
            }
            memoize.Cache = MapCache;
            function eq(e, t) {
                return e === t || (e !== e && t !== t);
            }
            var U = Array.isArray;
            function isFunction(e) {
                var t = isObject(e) ? v.call(e) : '';
                return t == i || t == s;
            }
            function isObject(e) {
                var t = typeof e;
                return !!e && (t == 'object' || t == 'function');
            }
            function isObjectLike(e) {
                return !!e && typeof e == 'object';
            }
            function isSymbol(e) {
                return typeof e == 'symbol' || (isObjectLike(e) && v.call(e) == a);
            }
            function toString(e) {
                return e == null ? '' : baseToString(e);
            }
            function get(e, t, r) {
                var A = e == null ? undefined : baseGet(e, t);
                return A === undefined ? r : A;
            }
            e.exports = get;
        },
        1552: (e) => {
            var t = 'Expected a function';
            var r = '__lodash_hash_undefined__';
            var A = 1 / 0,
                i = 9007199254740991;
            var s = '[object Function]',
                a = '[object GeneratorFunction]',
                o = '[object Symbol]';
            var n = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                p = /^\w*$/,
                d = /^\./,
                l = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
            var u = /[\\^$.*+?()[\]{}|]/g;
            var c = /\\(\\)?/g;
            var g = /^\[object .+?Constructor\]$/;
            var m = /^(?:0|[1-9]\d*)$/;
            var h = typeof global == 'object' && global && global.Object === Object && global;
            var C = typeof self == 'object' && self && self.Object === Object && self;
            var Q = h || C || Function('return this')();
            function getValue(e, t) {
                return e == null ? undefined : e[t];
            }
            function isHostObject(e) {
                var t = false;
                if (e != null && typeof e.toString != 'function') {
                    try {
                        t = !!(e + '');
                    } catch (e) {}
                }
                return t;
            }
            var B = Array.prototype,
                I = Function.prototype,
                y = Object.prototype;
            var w = Q['__core-js_shared__'];
            var b = (function () {
                var e = /[^.]+$/.exec((w && w.keys && w.keys.IE_PROTO) || '');
                return e ? 'Symbol(src)_1.' + e : '';
            })();
            var v = I.toString;
            var D = y.hasOwnProperty;
            var R = y.toString;
            var k = RegExp(
                '^' +
                    v
                        .call(D)
                        .replace(u, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                    '$',
            );
            var S = Q.Symbol,
                N = B.splice;
            var _ = getNative(Q, 'Map'),
                T = getNative(Object, 'create');
            var q = S ? S.prototype : undefined,
                U = q ? q.toString : undefined;
            function Hash(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function hashClear() {
                this.__data__ = T ? T(null) : {};
            }
            function hashDelete(e) {
                return this.has(e) && delete this.__data__[e];
            }
            function hashGet(e) {
                var t = this.__data__;
                if (T) {
                    var A = t[e];
                    return A === r ? undefined : A;
                }
                return D.call(t, e) ? t[e] : undefined;
            }
            function hashHas(e) {
                var t = this.__data__;
                return T ? t[e] !== undefined : D.call(t, e);
            }
            function hashSet(e, t) {
                var A = this.__data__;
                A[e] = T && t === undefined ? r : t;
                return this;
            }
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;
            function ListCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function listCacheClear() {
                this.__data__ = [];
            }
            function listCacheDelete(e) {
                var t = this.__data__,
                    r = assocIndexOf(t, e);
                if (r < 0) {
                    return false;
                }
                var A = t.length - 1;
                if (r == A) {
                    t.pop();
                } else {
                    N.call(t, r, 1);
                }
                return true;
            }
            function listCacheGet(e) {
                var t = this.__data__,
                    r = assocIndexOf(t, e);
                return r < 0 ? undefined : t[r][1];
            }
            function listCacheHas(e) {
                return assocIndexOf(this.__data__, e) > -1;
            }
            function listCacheSet(e, t) {
                var r = this.__data__,
                    A = assocIndexOf(r, e);
                if (A < 0) {
                    r.push([e, t]);
                } else {
                    r[A][1] = t;
                }
                return this;
            }
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;
            function MapCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function mapCacheClear() {
                this.__data__ = {hash: new Hash(), map: new (_ || ListCache)(), string: new Hash()};
            }
            function mapCacheDelete(e) {
                return getMapData(this, e)['delete'](e);
            }
            function mapCacheGet(e) {
                return getMapData(this, e).get(e);
            }
            function mapCacheHas(e) {
                return getMapData(this, e).has(e);
            }
            function mapCacheSet(e, t) {
                getMapData(this, e).set(e, t);
                return this;
            }
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;
            function assignValue(e, t, r) {
                var A = e[t];
                if (!(D.call(e, t) && eq(A, r)) || (r === undefined && !(t in e))) {
                    e[t] = r;
                }
            }
            function assocIndexOf(e, t) {
                var r = e.length;
                while (r--) {
                    if (eq(e[r][0], t)) {
                        return r;
                    }
                }
                return -1;
            }
            function baseIsNative(e) {
                if (!isObject(e) || isMasked(e)) {
                    return false;
                }
                var t = isFunction(e) || isHostObject(e) ? k : g;
                return t.test(toSource(e));
            }
            function baseSet(e, t, r, A) {
                if (!isObject(e)) {
                    return e;
                }
                t = isKey(t, e) ? [t] : castPath(t);
                var i = -1,
                    s = t.length,
                    a = s - 1,
                    o = e;
                while (o != null && ++i < s) {
                    var n = toKey(t[i]),
                        p = r;
                    if (i != a) {
                        var d = o[n];
                        p = A ? A(d, n, o) : undefined;
                        if (p === undefined) {
                            p = isObject(d) ? d : isIndex(t[i + 1]) ? [] : {};
                        }
                    }
                    assignValue(o, n, p);
                    o = o[n];
                }
                return e;
            }
            function baseToString(e) {
                if (typeof e == 'string') {
                    return e;
                }
                if (isSymbol(e)) {
                    return U ? U.call(e) : '';
                }
                var t = e + '';
                return t == '0' && 1 / e == -A ? '-0' : t;
            }
            function castPath(e) {
                return M(e) ? e : L(e);
            }
            function getMapData(e, t) {
                var r = e.__data__;
                return isKeyable(t) ? r[typeof t == 'string' ? 'string' : 'hash'] : r.map;
            }
            function getNative(e, t) {
                var r = getValue(e, t);
                return baseIsNative(r) ? r : undefined;
            }
            function isIndex(e, t) {
                t = t == null ? i : t;
                return !!t && (typeof e == 'number' || m.test(e)) && e > -1 && e % 1 == 0 && e < t;
            }
            function isKey(e, t) {
                if (M(e)) {
                    return false;
                }
                var r = typeof e;
                if (r == 'number' || r == 'symbol' || r == 'boolean' || e == null || isSymbol(e)) {
                    return true;
                }
                return p.test(e) || !n.test(e) || (t != null && e in Object(t));
            }
            function isKeyable(e) {
                var t = typeof e;
                return t == 'string' || t == 'number' || t == 'symbol' || t == 'boolean'
                    ? e !== '__proto__'
                    : e === null;
            }
            function isMasked(e) {
                return !!b && b in e;
            }
            var L = memoize(function (e) {
                e = toString(e);
                var t = [];
                if (d.test(e)) {
                    t.push('');
                }
                e.replace(l, function (e, r, A, i) {
                    t.push(A ? i.replace(c, '$1') : r || e);
                });
                return t;
            });
            function toKey(e) {
                if (typeof e == 'string' || isSymbol(e)) {
                    return e;
                }
                var t = e + '';
                return t == '0' && 1 / e == -A ? '-0' : t;
            }
            function toSource(e) {
                if (e != null) {
                    try {
                        return v.call(e);
                    } catch (e) {}
                    try {
                        return e + '';
                    } catch (e) {}
                }
                return '';
            }
            function memoize(e, r) {
                if (typeof e != 'function' || (r && typeof r != 'function')) {
                    throw new TypeError(t);
                }
                var memoized = function () {
                    var t = arguments,
                        A = r ? r.apply(this, t) : t[0],
                        i = memoized.cache;
                    if (i.has(A)) {
                        return i.get(A);
                    }
                    var s = e.apply(this, t);
                    memoized.cache = i.set(A, s);
                    return s;
                };
                memoized.cache = new (memoize.Cache || MapCache)();
                return memoized;
            }
            memoize.Cache = MapCache;
            function eq(e, t) {
                return e === t || (e !== e && t !== t);
            }
            var M = Array.isArray;
            function isFunction(e) {
                var t = isObject(e) ? R.call(e) : '';
                return t == s || t == a;
            }
            function isObject(e) {
                var t = typeof e;
                return !!e && (t == 'object' || t == 'function');
            }
            function isObjectLike(e) {
                return !!e && typeof e == 'object';
            }
            function isSymbol(e) {
                return typeof e == 'symbol' || (isObjectLike(e) && R.call(e) == o);
            }
            function toString(e) {
                return e == null ? '' : baseToString(e);
            }
            function set(e, t, r) {
                return e == null ? e : baseSet(e, t, r);
            }
            e.exports = set;
        },
        8216: (e) => {
            var t = 200;
            var r = '__lodash_hash_undefined__';
            var A = 1 / 0;
            var i = '[object Function]',
                s = '[object GeneratorFunction]';
            var a = /[\\^$.*+?()[\]{}|]/g;
            var o = /^\[object .+?Constructor\]$/;
            var n = typeof global == 'object' && global && global.Object === Object && global;
            var p = typeof self == 'object' && self && self.Object === Object && self;
            var d = n || p || Function('return this')();
            function arrayIncludes(e, t) {
                var r = e ? e.length : 0;
                return !!r && baseIndexOf(e, t, 0) > -1;
            }
            function arrayIncludesWith(e, t, r) {
                var A = -1,
                    i = e ? e.length : 0;
                while (++A < i) {
                    if (r(t, e[A])) {
                        return true;
                    }
                }
                return false;
            }
            function baseFindIndex(e, t, r, A) {
                var i = e.length,
                    s = r + (A ? 1 : -1);
                while (A ? s-- : ++s < i) {
                    if (t(e[s], s, e)) {
                        return s;
                    }
                }
                return -1;
            }
            function baseIndexOf(e, t, r) {
                if (t !== t) {
                    return baseFindIndex(e, baseIsNaN, r);
                }
                var A = r - 1,
                    i = e.length;
                while (++A < i) {
                    if (e[A] === t) {
                        return A;
                    }
                }
                return -1;
            }
            function baseIsNaN(e) {
                return e !== e;
            }
            function cacheHas(e, t) {
                return e.has(t);
            }
            function getValue(e, t) {
                return e == null ? undefined : e[t];
            }
            function isHostObject(e) {
                var t = false;
                if (e != null && typeof e.toString != 'function') {
                    try {
                        t = !!(e + '');
                    } catch (e) {}
                }
                return t;
            }
            function setToArray(e) {
                var t = -1,
                    r = Array(e.size);
                e.forEach(function (e) {
                    r[++t] = e;
                });
                return r;
            }
            var l = Array.prototype,
                u = Function.prototype,
                c = Object.prototype;
            var g = d['__core-js_shared__'];
            var m = (function () {
                var e = /[^.]+$/.exec((g && g.keys && g.keys.IE_PROTO) || '');
                return e ? 'Symbol(src)_1.' + e : '';
            })();
            var h = u.toString;
            var C = c.hasOwnProperty;
            var Q = c.toString;
            var B = RegExp(
                '^' +
                    h
                        .call(C)
                        .replace(a, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                    '$',
            );
            var I = l.splice;
            var y = getNative(d, 'Map'),
                w = getNative(d, 'Set'),
                b = getNative(Object, 'create');
            function Hash(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function hashClear() {
                this.__data__ = b ? b(null) : {};
            }
            function hashDelete(e) {
                return this.has(e) && delete this.__data__[e];
            }
            function hashGet(e) {
                var t = this.__data__;
                if (b) {
                    var A = t[e];
                    return A === r ? undefined : A;
                }
                return C.call(t, e) ? t[e] : undefined;
            }
            function hashHas(e) {
                var t = this.__data__;
                return b ? t[e] !== undefined : C.call(t, e);
            }
            function hashSet(e, t) {
                var A = this.__data__;
                A[e] = b && t === undefined ? r : t;
                return this;
            }
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;
            function ListCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function listCacheClear() {
                this.__data__ = [];
            }
            function listCacheDelete(e) {
                var t = this.__data__,
                    r = assocIndexOf(t, e);
                if (r < 0) {
                    return false;
                }
                var A = t.length - 1;
                if (r == A) {
                    t.pop();
                } else {
                    I.call(t, r, 1);
                }
                return true;
            }
            function listCacheGet(e) {
                var t = this.__data__,
                    r = assocIndexOf(t, e);
                return r < 0 ? undefined : t[r][1];
            }
            function listCacheHas(e) {
                return assocIndexOf(this.__data__, e) > -1;
            }
            function listCacheSet(e, t) {
                var r = this.__data__,
                    A = assocIndexOf(r, e);
                if (A < 0) {
                    r.push([e, t]);
                } else {
                    r[A][1] = t;
                }
                return this;
            }
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;
            function MapCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.clear();
                while (++t < r) {
                    var A = e[t];
                    this.set(A[0], A[1]);
                }
            }
            function mapCacheClear() {
                this.__data__ = {hash: new Hash(), map: new (y || ListCache)(), string: new Hash()};
            }
            function mapCacheDelete(e) {
                return getMapData(this, e)['delete'](e);
            }
            function mapCacheGet(e) {
                return getMapData(this, e).get(e);
            }
            function mapCacheHas(e) {
                return getMapData(this, e).has(e);
            }
            function mapCacheSet(e, t) {
                getMapData(this, e).set(e, t);
                return this;
            }
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;
            function SetCache(e) {
                var t = -1,
                    r = e ? e.length : 0;
                this.__data__ = new MapCache();
                while (++t < r) {
                    this.add(e[t]);
                }
            }
            function setCacheAdd(e) {
                this.__data__.set(e, r);
                return this;
            }
            function setCacheHas(e) {
                return this.__data__.has(e);
            }
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;
            function assocIndexOf(e, t) {
                var r = e.length;
                while (r--) {
                    if (eq(e[r][0], t)) {
                        return r;
                    }
                }
                return -1;
            }
            function baseIsNative(e) {
                if (!isObject(e) || isMasked(e)) {
                    return false;
                }
                var t = isFunction(e) || isHostObject(e) ? B : o;
                return t.test(toSource(e));
            }
            function baseUniq(e, r, A) {
                var i = -1,
                    s = arrayIncludes,
                    a = e.length,
                    o = true,
                    n = [],
                    p = n;
                if (A) {
                    o = false;
                    s = arrayIncludesWith;
                } else if (a >= t) {
                    var d = r ? null : v(e);
                    if (d) {
                        return setToArray(d);
                    }
                    o = false;
                    s = cacheHas;
                    p = new SetCache();
                } else {
                    p = r ? [] : n;
                }
                e: while (++i < a) {
                    var l = e[i],
                        u = r ? r(l) : l;
                    l = A || l !== 0 ? l : 0;
                    if (o && u === u) {
                        var c = p.length;
                        while (c--) {
                            if (p[c] === u) {
                                continue e;
                            }
                        }
                        if (r) {
                            p.push(u);
                        }
                        n.push(l);
                    } else if (!s(p, u, A)) {
                        if (p !== n) {
                            p.push(u);
                        }
                        n.push(l);
                    }
                }
                return n;
            }
            var v = !(w && 1 / setToArray(new w([, -0]))[1] == A)
                ? noop
                : function (e) {
                      return new w(e);
                  };
            function getMapData(e, t) {
                var r = e.__data__;
                return isKeyable(t) ? r[typeof t == 'string' ? 'string' : 'hash'] : r.map;
            }
            function getNative(e, t) {
                var r = getValue(e, t);
                return baseIsNative(r) ? r : undefined;
            }
            function isKeyable(e) {
                var t = typeof e;
                return t == 'string' || t == 'number' || t == 'symbol' || t == 'boolean'
                    ? e !== '__proto__'
                    : e === null;
            }
            function isMasked(e) {
                return !!m && m in e;
            }
            function toSource(e) {
                if (e != null) {
                    try {
                        return h.call(e);
                    } catch (e) {}
                    try {
                        return e + '';
                    } catch (e) {}
                }
                return '';
            }
            function uniq(e) {
                return e && e.length ? baseUniq(e) : [];
            }
            function eq(e, t) {
                return e === t || (e !== e && t !== t);
            }
            function isFunction(e) {
                var t = isObject(e) ? Q.call(e) : '';
                return t == i || t == s;
            }
            function isObject(e) {
                var t = typeof e;
                return !!e && (t == 'object' || t == 'function');
            }
            function noop() {}
            e.exports = uniq;
        },
        7493: (e, t, r) => {
            'use strict';
            const A = r(2037);
            const i = new Map([
                [19, 'Catalina'],
                [18, 'Mojave'],
                [17, 'High Sierra'],
                [16, 'Sierra'],
                [15, 'El Capitan'],
                [14, 'Yosemite'],
                [13, 'Mavericks'],
                [12, 'Mountain Lion'],
                [11, 'Lion'],
                [10, 'Snow Leopard'],
                [9, 'Leopard'],
                [8, 'Tiger'],
                [7, 'Panther'],
                [6, 'Jaguar'],
                [5, 'Puma'],
            ]);
            const macosRelease = (e) => {
                e = Number((e || A.release()).split('.')[0]);
                return {name: i.get(e), version: '10.' + (e - 4)};
            };
            e.exports = macosRelease;
            e.exports['default'] = macosRelease;
        },
        8560: (e) => {
            'use strict';
            e.exports = function (e) {
                try {
                    return e();
                } catch (e) {}
            };
        },
        467: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = _interopDefault(r(2781));
            var i = _interopDefault(r(3685));
            var s = _interopDefault(r(7310));
            var a = _interopDefault(r(8665));
            var o = _interopDefault(r(5687));
            var n = _interopDefault(r(9796));
            const p = A.Readable;
            const d = Symbol('buffer');
            const l = Symbol('type');
            class Blob {
                constructor() {
                    this[l] = '';
                    const e = arguments[0];
                    const t = arguments[1];
                    const r = [];
                    let A = 0;
                    if (e) {
                        const t = e;
                        const i = Number(t.length);
                        for (let e = 0; e < i; e++) {
                            const i = t[e];
                            let s;
                            if (i instanceof Buffer) {
                                s = i;
                            } else if (ArrayBuffer.isView(i)) {
                                s = Buffer.from(i.buffer, i.byteOffset, i.byteLength);
                            } else if (i instanceof ArrayBuffer) {
                                s = Buffer.from(i);
                            } else if (i instanceof Blob) {
                                s = i[d];
                            } else {
                                s = Buffer.from(typeof i === 'string' ? i : String(i));
                            }
                            A += s.length;
                            r.push(s);
                        }
                    }
                    this[d] = Buffer.concat(r);
                    let i = t && t.type !== undefined && String(t.type).toLowerCase();
                    if (i && !/[^\u0020-\u007E]/.test(i)) {
                        this[l] = i;
                    }
                }
                get size() {
                    return this[d].length;
                }
                get type() {
                    return this[l];
                }
                text() {
                    return Promise.resolve(this[d].toString());
                }
                arrayBuffer() {
                    const e = this[d];
                    const t = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                    return Promise.resolve(t);
                }
                stream() {
                    const e = new p();
                    e._read = function () {};
                    e.push(this[d]);
                    e.push(null);
                    return e;
                }
                toString() {
                    return '[object Blob]';
                }
                slice() {
                    const e = this.size;
                    const t = arguments[0];
                    const r = arguments[1];
                    let A, i;
                    if (t === undefined) {
                        A = 0;
                    } else if (t < 0) {
                        A = Math.max(e + t, 0);
                    } else {
                        A = Math.min(t, e);
                    }
                    if (r === undefined) {
                        i = e;
                    } else if (r < 0) {
                        i = Math.max(e + r, 0);
                    } else {
                        i = Math.min(r, e);
                    }
                    const s = Math.max(i - A, 0);
                    const a = this[d];
                    const o = a.slice(A, A + s);
                    const n = new Blob([], {type: arguments[2]});
                    n[d] = o;
                    return n;
                }
            }
            Object.defineProperties(Blob.prototype, {
                size: {enumerable: true},
                type: {enumerable: true},
                slice: {enumerable: true},
            });
            Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
                value: 'Blob',
                writable: false,
                enumerable: false,
                configurable: true,
            });
            function FetchError(e, t, r) {
                Error.call(this, e);
                this.message = e;
                this.type = t;
                if (r) {
                    this.code = this.errno = r.code;
                }
                Error.captureStackTrace(this, this.constructor);
            }
            FetchError.prototype = Object.create(Error.prototype);
            FetchError.prototype.constructor = FetchError;
            FetchError.prototype.name = 'FetchError';
            let u;
            try {
                u = r(2877).convert;
            } catch (e) {}
            const c = Symbol('Body internals');
            const g = A.PassThrough;
            function Body(e) {
                var t = this;
                var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                    i = r.size;
                let s = i === undefined ? 0 : i;
                var a = r.timeout;
                let o = a === undefined ? 0 : a;
                if (e == null) {
                    e = null;
                } else if (isURLSearchParams(e)) {
                    e = Buffer.from(e.toString());
                } else if (isBlob(e));
                else if (Buffer.isBuffer(e));
                else if (Object.prototype.toString.call(e) === '[object ArrayBuffer]') {
                    e = Buffer.from(e);
                } else if (ArrayBuffer.isView(e)) {
                    e = Buffer.from(e.buffer, e.byteOffset, e.byteLength);
                } else if (e instanceof A);
                else {
                    e = Buffer.from(String(e));
                }
                this[c] = {body: e, disturbed: false, error: null};
                this.size = s;
                this.timeout = o;
                if (e instanceof A) {
                    e.on('error', function (e) {
                        const r =
                            e.name === 'AbortError'
                                ? e
                                : new FetchError(
                                      `Invalid response body while trying to fetch ${t.url}: ${e.message}`,
                                      'system',
                                      e,
                                  );
                        t[c].error = r;
                    });
                }
            }
            Body.prototype = {
                get body() {
                    return this[c].body;
                },
                get bodyUsed() {
                    return this[c].disturbed;
                },
                arrayBuffer() {
                    return consumeBody.call(this).then(function (e) {
                        return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                    });
                },
                blob() {
                    let e = (this.headers && this.headers.get('content-type')) || '';
                    return consumeBody.call(this).then(function (t) {
                        return Object.assign(new Blob([], {type: e.toLowerCase()}), {[d]: t});
                    });
                },
                json() {
                    var e = this;
                    return consumeBody.call(this).then(function (t) {
                        try {
                            return JSON.parse(t.toString());
                        } catch (t) {
                            return Body.Promise.reject(
                                new FetchError(
                                    `invalid json response body at ${e.url} reason: ${t.message}`,
                                    'invalid-json',
                                ),
                            );
                        }
                    });
                },
                text() {
                    return consumeBody.call(this).then(function (e) {
                        return e.toString();
                    });
                },
                buffer() {
                    return consumeBody.call(this);
                },
                textConverted() {
                    var e = this;
                    return consumeBody.call(this).then(function (t) {
                        return convertBody(t, e.headers);
                    });
                },
            };
            Object.defineProperties(Body.prototype, {
                body: {enumerable: true},
                bodyUsed: {enumerable: true},
                arrayBuffer: {enumerable: true},
                blob: {enumerable: true},
                json: {enumerable: true},
                text: {enumerable: true},
            });
            Body.mixIn = function (e) {
                for (const t of Object.getOwnPropertyNames(Body.prototype)) {
                    if (!(t in e)) {
                        const r = Object.getOwnPropertyDescriptor(Body.prototype, t);
                        Object.defineProperty(e, t, r);
                    }
                }
            };
            function consumeBody() {
                var e = this;
                if (this[c].disturbed) {
                    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
                }
                this[c].disturbed = true;
                if (this[c].error) {
                    return Body.Promise.reject(this[c].error);
                }
                let t = this.body;
                if (t === null) {
                    return Body.Promise.resolve(Buffer.alloc(0));
                }
                if (isBlob(t)) {
                    t = t.stream();
                }
                if (Buffer.isBuffer(t)) {
                    return Body.Promise.resolve(t);
                }
                if (!(t instanceof A)) {
                    return Body.Promise.resolve(Buffer.alloc(0));
                }
                let r = [];
                let i = 0;
                let s = false;
                return new Body.Promise(function (A, a) {
                    let o;
                    if (e.timeout) {
                        o = setTimeout(function () {
                            s = true;
                            a(
                                new FetchError(
                                    `Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,
                                    'body-timeout',
                                ),
                            );
                        }, e.timeout);
                    }
                    t.on('error', function (t) {
                        if (t.name === 'AbortError') {
                            s = true;
                            a(t);
                        } else {
                            a(
                                new FetchError(
                                    `Invalid response body while trying to fetch ${e.url}: ${t.message}`,
                                    'system',
                                    t,
                                ),
                            );
                        }
                    });
                    t.on('data', function (t) {
                        if (s || t === null) {
                            return;
                        }
                        if (e.size && i + t.length > e.size) {
                            s = true;
                            a(new FetchError(`content size at ${e.url} over limit: ${e.size}`, 'max-size'));
                            return;
                        }
                        i += t.length;
                        r.push(t);
                    });
                    t.on('end', function () {
                        if (s) {
                            return;
                        }
                        clearTimeout(o);
                        try {
                            A(Buffer.concat(r, i));
                        } catch (t) {
                            a(
                                new FetchError(
                                    `Could not create Buffer from response body for ${e.url}: ${t.message}`,
                                    'system',
                                    t,
                                ),
                            );
                        }
                    });
                });
            }
            function convertBody(e, t) {
                if (typeof u !== 'function') {
                    throw new Error('The package `encoding` must be installed to use the textConverted() function');
                }
                const r = t.get('content-type');
                let A = 'utf-8';
                let i, s;
                if (r) {
                    i = /charset=([^;]*)/i.exec(r);
                }
                s = e.slice(0, 1024).toString();
                if (!i && s) {
                    i = /<meta.+?charset=(['"])(.+?)\1/i.exec(s);
                }
                if (!i && s) {
                    i = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s);
                    if (!i) {
                        i = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s);
                        if (i) {
                            i.pop();
                        }
                    }
                    if (i) {
                        i = /charset=(.*)/i.exec(i.pop());
                    }
                }
                if (!i && s) {
                    i = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s);
                }
                if (i) {
                    A = i.pop();
                    if (A === 'gb2312' || A === 'gbk') {
                        A = 'gb18030';
                    }
                }
                return u(e, 'UTF-8', A).toString();
            }
            function isURLSearchParams(e) {
                if (
                    typeof e !== 'object' ||
                    typeof e.append !== 'function' ||
                    typeof e.delete !== 'function' ||
                    typeof e.get !== 'function' ||
                    typeof e.getAll !== 'function' ||
                    typeof e.has !== 'function' ||
                    typeof e.set !== 'function'
                ) {
                    return false;
                }
                return (
                    e.constructor.name === 'URLSearchParams' ||
                    Object.prototype.toString.call(e) === '[object URLSearchParams]' ||
                    typeof e.sort === 'function'
                );
            }
            function isBlob(e) {
                return (
                    typeof e === 'object' &&
                    typeof e.arrayBuffer === 'function' &&
                    typeof e.type === 'string' &&
                    typeof e.stream === 'function' &&
                    typeof e.constructor === 'function' &&
                    typeof e.constructor.name === 'string' &&
                    /^(Blob|File)$/.test(e.constructor.name) &&
                    /^(Blob|File)$/.test(e[Symbol.toStringTag])
                );
            }
            function clone(e) {
                let t, r;
                let i = e.body;
                if (e.bodyUsed) {
                    throw new Error('cannot clone body after it is used');
                }
                if (i instanceof A && typeof i.getBoundary !== 'function') {
                    t = new g();
                    r = new g();
                    i.pipe(t);
                    i.pipe(r);
                    e[c].body = t;
                    i = r;
                }
                return i;
            }
            function extractContentType(e) {
                if (e === null) {
                    return null;
                } else if (typeof e === 'string') {
                    return 'text/plain;charset=UTF-8';
                } else if (isURLSearchParams(e)) {
                    return 'application/x-www-form-urlencoded;charset=UTF-8';
                } else if (isBlob(e)) {
                    return e.type || null;
                } else if (Buffer.isBuffer(e)) {
                    return null;
                } else if (Object.prototype.toString.call(e) === '[object ArrayBuffer]') {
                    return null;
                } else if (ArrayBuffer.isView(e)) {
                    return null;
                } else if (typeof e.getBoundary === 'function') {
                    return `multipart/form-data;boundary=${e.getBoundary()}`;
                } else if (e instanceof A) {
                    return null;
                } else {
                    return 'text/plain;charset=UTF-8';
                }
            }
            function getTotalBytes(e) {
                const t = e.body;
                if (t === null) {
                    return 0;
                } else if (isBlob(t)) {
                    return t.size;
                } else if (Buffer.isBuffer(t)) {
                    return t.length;
                } else if (t && typeof t.getLengthSync === 'function') {
                    if (
                        (t._lengthRetrievers && t._lengthRetrievers.length == 0) ||
                        (t.hasKnownLength && t.hasKnownLength())
                    ) {
                        return t.getLengthSync();
                    }
                    return null;
                } else {
                    return null;
                }
            }
            function writeToStream(e, t) {
                const r = t.body;
                if (r === null) {
                    e.end();
                } else if (isBlob(r)) {
                    r.stream().pipe(e);
                } else if (Buffer.isBuffer(r)) {
                    e.write(r);
                    e.end();
                } else {
                    r.pipe(e);
                }
            }
            Body.Promise = global.Promise;
            const m = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
            const h = /[^\t\x20-\x7e\x80-\xff]/;
            function validateName(e) {
                e = `${e}`;
                if (m.test(e) || e === '') {
                    throw new TypeError(`${e} is not a legal HTTP header name`);
                }
            }
            function validateValue(e) {
                e = `${e}`;
                if (h.test(e)) {
                    throw new TypeError(`${e} is not a legal HTTP header value`);
                }
            }
            function find(e, t) {
                t = t.toLowerCase();
                for (const r in e) {
                    if (r.toLowerCase() === t) {
                        return r;
                    }
                }
                return undefined;
            }
            const C = Symbol('map');
            class Headers {
                constructor() {
                    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
                    this[C] = Object.create(null);
                    if (e instanceof Headers) {
                        const t = e.raw();
                        const r = Object.keys(t);
                        for (const e of r) {
                            for (const r of t[e]) {
                                this.append(e, r);
                            }
                        }
                        return;
                    }
                    if (e == null);
                    else if (typeof e === 'object') {
                        const t = e[Symbol.iterator];
                        if (t != null) {
                            if (typeof t !== 'function') {
                                throw new TypeError('Header pairs must be iterable');
                            }
                            const r = [];
                            for (const t of e) {
                                if (typeof t !== 'object' || typeof t[Symbol.iterator] !== 'function') {
                                    throw new TypeError('Each header pair must be iterable');
                                }
                                r.push(Array.from(t));
                            }
                            for (const e of r) {
                                if (e.length !== 2) {
                                    throw new TypeError('Each header pair must be a name/value tuple');
                                }
                                this.append(e[0], e[1]);
                            }
                        } else {
                            for (const t of Object.keys(e)) {
                                const r = e[t];
                                this.append(t, r);
                            }
                        }
                    } else {
                        throw new TypeError('Provided initializer must be an object');
                    }
                }
                get(e) {
                    e = `${e}`;
                    validateName(e);
                    const t = find(this[C], e);
                    if (t === undefined) {
                        return null;
                    }
                    return this[C][t].join(', ');
                }
                forEach(e) {
                    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
                    let r = getHeaders(this);
                    let A = 0;
                    while (A < r.length) {
                        var i = r[A];
                        const s = i[0],
                            a = i[1];
                        e.call(t, a, s, this);
                        r = getHeaders(this);
                        A++;
                    }
                }
                set(e, t) {
                    e = `${e}`;
                    t = `${t}`;
                    validateName(e);
                    validateValue(t);
                    const r = find(this[C], e);
                    this[C][r !== undefined ? r : e] = [t];
                }
                append(e, t) {
                    e = `${e}`;
                    t = `${t}`;
                    validateName(e);
                    validateValue(t);
                    const r = find(this[C], e);
                    if (r !== undefined) {
                        this[C][r].push(t);
                    } else {
                        this[C][e] = [t];
                    }
                }
                has(e) {
                    e = `${e}`;
                    validateName(e);
                    return find(this[C], e) !== undefined;
                }
                delete(e) {
                    e = `${e}`;
                    validateName(e);
                    const t = find(this[C], e);
                    if (t !== undefined) {
                        delete this[C][t];
                    }
                }
                raw() {
                    return this[C];
                }
                keys() {
                    return createHeadersIterator(this, 'key');
                }
                values() {
                    return createHeadersIterator(this, 'value');
                }
                [Symbol.iterator]() {
                    return createHeadersIterator(this, 'key+value');
                }
            }
            Headers.prototype.entries = Headers.prototype[Symbol.iterator];
            Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
                value: 'Headers',
                writable: false,
                enumerable: false,
                configurable: true,
            });
            Object.defineProperties(Headers.prototype, {
                get: {enumerable: true},
                forEach: {enumerable: true},
                set: {enumerable: true},
                append: {enumerable: true},
                has: {enumerable: true},
                delete: {enumerable: true},
                keys: {enumerable: true},
                values: {enumerable: true},
                entries: {enumerable: true},
            });
            function getHeaders(e) {
                let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
                const r = Object.keys(e[C]).sort();
                return r.map(
                    t === 'key'
                        ? function (e) {
                              return e.toLowerCase();
                          }
                        : t === 'value'
                        ? function (t) {
                              return e[C][t].join(', ');
                          }
                        : function (t) {
                              return [t.toLowerCase(), e[C][t].join(', ')];
                          },
                );
            }
            const Q = Symbol('internal');
            function createHeadersIterator(e, t) {
                const r = Object.create(B);
                r[Q] = {target: e, kind: t, index: 0};
                return r;
            }
            const B = Object.setPrototypeOf(
                {
                    next() {
                        if (!this || Object.getPrototypeOf(this) !== B) {
                            throw new TypeError('Value of `this` is not a HeadersIterator');
                        }
                        var e = this[Q];
                        const t = e.target,
                            r = e.kind,
                            A = e.index;
                        const i = getHeaders(t, r);
                        const s = i.length;
                        if (A >= s) {
                            return {value: undefined, done: true};
                        }
                        this[Q].index = A + 1;
                        return {value: i[A], done: false};
                    },
                },
                Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())),
            );
            Object.defineProperty(B, Symbol.toStringTag, {
                value: 'HeadersIterator',
                writable: false,
                enumerable: false,
                configurable: true,
            });
            function exportNodeCompatibleHeaders(e) {
                const t = Object.assign({__proto__: null}, e[C]);
                const r = find(e[C], 'Host');
                if (r !== undefined) {
                    t[r] = t[r][0];
                }
                return t;
            }
            function createHeadersLenient(e) {
                const t = new Headers();
                for (const r of Object.keys(e)) {
                    if (m.test(r)) {
                        continue;
                    }
                    if (Array.isArray(e[r])) {
                        for (const A of e[r]) {
                            if (h.test(A)) {
                                continue;
                            }
                            if (t[C][r] === undefined) {
                                t[C][r] = [A];
                            } else {
                                t[C][r].push(A);
                            }
                        }
                    } else if (!h.test(e[r])) {
                        t[C][r] = [e[r]];
                    }
                }
                return t;
            }
            const I = Symbol('Response internals');
            const y = i.STATUS_CODES;
            class Response {
                constructor() {
                    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    Body.call(this, e, t);
                    const r = t.status || 200;
                    const A = new Headers(t.headers);
                    if (e != null && !A.has('Content-Type')) {
                        const t = extractContentType(e);
                        if (t) {
                            A.append('Content-Type', t);
                        }
                    }
                    this[I] = {url: t.url, status: r, statusText: t.statusText || y[r], headers: A, counter: t.counter};
                }
                get url() {
                    return this[I].url || '';
                }
                get status() {
                    return this[I].status;
                }
                get ok() {
                    return this[I].status >= 200 && this[I].status < 300;
                }
                get redirected() {
                    return this[I].counter > 0;
                }
                get statusText() {
                    return this[I].statusText;
                }
                get headers() {
                    return this[I].headers;
                }
                clone() {
                    return new Response(clone(this), {
                        url: this.url,
                        status: this.status,
                        statusText: this.statusText,
                        headers: this.headers,
                        ok: this.ok,
                        redirected: this.redirected,
                    });
                }
            }
            Body.mixIn(Response.prototype);
            Object.defineProperties(Response.prototype, {
                url: {enumerable: true},
                status: {enumerable: true},
                ok: {enumerable: true},
                redirected: {enumerable: true},
                statusText: {enumerable: true},
                headers: {enumerable: true},
                clone: {enumerable: true},
            });
            Object.defineProperty(Response.prototype, Symbol.toStringTag, {
                value: 'Response',
                writable: false,
                enumerable: false,
                configurable: true,
            });
            const w = Symbol('Request internals');
            const b = s.URL || a.URL;
            const v = s.parse;
            const D = s.format;
            function parseURL(e) {
                if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)) {
                    e = new b(e).toString();
                }
                return v(e);
            }
            const R = 'destroy' in A.Readable.prototype;
            function isRequest(e) {
                return typeof e === 'object' && typeof e[w] === 'object';
            }
            function isAbortSignal(e) {
                const t = e && typeof e === 'object' && Object.getPrototypeOf(e);
                return !!(t && t.constructor.name === 'AbortSignal');
            }
            class Request {
                constructor(e) {
                    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    let r;
                    if (!isRequest(e)) {
                        if (e && e.href) {
                            r = parseURL(e.href);
                        } else {
                            r = parseURL(`${e}`);
                        }
                        e = {};
                    } else {
                        r = parseURL(e.url);
                    }
                    let A = t.method || e.method || 'GET';
                    A = A.toUpperCase();
                    if ((t.body != null || (isRequest(e) && e.body !== null)) && (A === 'GET' || A === 'HEAD')) {
                        throw new TypeError('Request with GET/HEAD method cannot have body');
                    }
                    let i = t.body != null ? t.body : isRequest(e) && e.body !== null ? clone(e) : null;
                    Body.call(this, i, {timeout: t.timeout || e.timeout || 0, size: t.size || e.size || 0});
                    const s = new Headers(t.headers || e.headers || {});
                    if (i != null && !s.has('Content-Type')) {
                        const e = extractContentType(i);
                        if (e) {
                            s.append('Content-Type', e);
                        }
                    }
                    let a = isRequest(e) ? e.signal : null;
                    if ('signal' in t) a = t.signal;
                    if (a != null && !isAbortSignal(a)) {
                        throw new TypeError('Expected signal to be an instanceof AbortSignal');
                    }
                    this[w] = {
                        method: A,
                        redirect: t.redirect || e.redirect || 'follow',
                        headers: s,
                        parsedURL: r,
                        signal: a,
                    };
                    this.follow = t.follow !== undefined ? t.follow : e.follow !== undefined ? e.follow : 20;
                    this.compress =
                        t.compress !== undefined ? t.compress : e.compress !== undefined ? e.compress : true;
                    this.counter = t.counter || e.counter || 0;
                    this.agent = t.agent || e.agent;
                }
                get method() {
                    return this[w].method;
                }
                get url() {
                    return D(this[w].parsedURL);
                }
                get headers() {
                    return this[w].headers;
                }
                get redirect() {
                    return this[w].redirect;
                }
                get signal() {
                    return this[w].signal;
                }
                clone() {
                    return new Request(this);
                }
            }
            Body.mixIn(Request.prototype);
            Object.defineProperty(Request.prototype, Symbol.toStringTag, {
                value: 'Request',
                writable: false,
                enumerable: false,
                configurable: true,
            });
            Object.defineProperties(Request.prototype, {
                method: {enumerable: true},
                url: {enumerable: true},
                headers: {enumerable: true},
                redirect: {enumerable: true},
                clone: {enumerable: true},
                signal: {enumerable: true},
            });
            function getNodeRequestOptions(e) {
                const t = e[w].parsedURL;
                const r = new Headers(e[w].headers);
                if (!r.has('Accept')) {
                    r.set('Accept', '*/*');
                }
                if (!t.protocol || !t.hostname) {
                    throw new TypeError('Only absolute URLs are supported');
                }
                if (!/^https?:$/.test(t.protocol)) {
                    throw new TypeError('Only HTTP(S) protocols are supported');
                }
                if (e.signal && e.body instanceof A.Readable && !R) {
                    throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
                }
                let i = null;
                if (e.body == null && /^(POST|PUT)$/i.test(e.method)) {
                    i = '0';
                }
                if (e.body != null) {
                    const t = getTotalBytes(e);
                    if (typeof t === 'number') {
                        i = String(t);
                    }
                }
                if (i) {
                    r.set('Content-Length', i);
                }
                if (!r.has('User-Agent')) {
                    r.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
                }
                if (e.compress && !r.has('Accept-Encoding')) {
                    r.set('Accept-Encoding', 'gzip,deflate');
                }
                let s = e.agent;
                if (typeof s === 'function') {
                    s = s(t);
                }
                return Object.assign({}, t, {method: e.method, headers: exportNodeCompatibleHeaders(r), agent: s});
            }
            function AbortError(e) {
                Error.call(this, e);
                this.type = 'aborted';
                this.message = e;
                Error.captureStackTrace(this, this.constructor);
            }
            AbortError.prototype = Object.create(Error.prototype);
            AbortError.prototype.constructor = AbortError;
            AbortError.prototype.name = 'AbortError';
            const k = s.URL || a.URL;
            const S = A.PassThrough;
            const N = function isDomainOrSubdomain(e, t) {
                const r = new k(t).hostname;
                const A = new k(e).hostname;
                return r === A || (r[r.length - A.length - 1] === '.' && r.endsWith(A));
            };
            const _ = function isSameProtocol(e, t) {
                const r = new k(t).protocol;
                const A = new k(e).protocol;
                return r === A;
            };
            function fetch(e, t) {
                if (!fetch.Promise) {
                    throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
                }
                Body.Promise = fetch.Promise;
                return new fetch.Promise(function (r, s) {
                    const a = new Request(e, t);
                    const p = getNodeRequestOptions(a);
                    const d = (p.protocol === 'https:' ? o : i).request;
                    const l = a.signal;
                    let u = null;
                    const c = function abort() {
                        let e = new AbortError('The user aborted a request.');
                        s(e);
                        if (a.body && a.body instanceof A.Readable) {
                            destroyStream(a.body, e);
                        }
                        if (!u || !u.body) return;
                        u.body.emit('error', e);
                    };
                    if (l && l.aborted) {
                        c();
                        return;
                    }
                    const g = function abortAndFinalize() {
                        c();
                        finalize();
                    };
                    const m = d(p);
                    let h;
                    if (l) {
                        l.addEventListener('abort', g);
                    }
                    function finalize() {
                        m.abort();
                        if (l) l.removeEventListener('abort', g);
                        clearTimeout(h);
                    }
                    if (a.timeout) {
                        m.once('socket', function (e) {
                            h = setTimeout(function () {
                                s(new FetchError(`network timeout at: ${a.url}`, 'request-timeout'));
                                finalize();
                            }, a.timeout);
                        });
                    }
                    m.on('error', function (e) {
                        s(new FetchError(`request to ${a.url} failed, reason: ${e.message}`, 'system', e));
                        if (u && u.body) {
                            destroyStream(u.body, e);
                        }
                        finalize();
                    });
                    fixResponseChunkedTransferBadEnding(m, function (e) {
                        if (l && l.aborted) {
                            return;
                        }
                        if (u && u.body) {
                            destroyStream(u.body, e);
                        }
                    });
                    if (parseInt(process.version.substring(1)) < 14) {
                        m.on('socket', function (e) {
                            e.addListener('close', function (t) {
                                const r = e.listenerCount('data') > 0;
                                if (u && r && !t && !(l && l.aborted)) {
                                    const e = new Error('Premature close');
                                    e.code = 'ERR_STREAM_PREMATURE_CLOSE';
                                    u.body.emit('error', e);
                                }
                            });
                        });
                    }
                    m.on('response', function (e) {
                        clearTimeout(h);
                        const t = createHeadersLenient(e.headers);
                        if (fetch.isRedirect(e.statusCode)) {
                            const A = t.get('Location');
                            let i = null;
                            try {
                                i = A === null ? null : new k(A, a.url).toString();
                            } catch (e) {
                                if (a.redirect !== 'manual') {
                                    s(
                                        new FetchError(
                                            `uri requested responds with an invalid redirect URL: ${A}`,
                                            'invalid-redirect',
                                        ),
                                    );
                                    finalize();
                                    return;
                                }
                            }
                            switch (a.redirect) {
                                case 'error':
                                    s(
                                        new FetchError(
                                            `uri requested responds with a redirect, redirect mode is set to error: ${a.url}`,
                                            'no-redirect',
                                        ),
                                    );
                                    finalize();
                                    return;
                                case 'manual':
                                    if (i !== null) {
                                        try {
                                            t.set('Location', i);
                                        } catch (e) {
                                            s(e);
                                        }
                                    }
                                    break;
                                case 'follow':
                                    if (i === null) {
                                        break;
                                    }
                                    if (a.counter >= a.follow) {
                                        s(new FetchError(`maximum redirect reached at: ${a.url}`, 'max-redirect'));
                                        finalize();
                                        return;
                                    }
                                    const A = {
                                        headers: new Headers(a.headers),
                                        follow: a.follow,
                                        counter: a.counter + 1,
                                        agent: a.agent,
                                        compress: a.compress,
                                        method: a.method,
                                        body: a.body,
                                        signal: a.signal,
                                        timeout: a.timeout,
                                        size: a.size,
                                    };
                                    if (!N(a.url, i) || !_(a.url, i)) {
                                        for (const e of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
                                            A.headers.delete(e);
                                        }
                                    }
                                    if (e.statusCode !== 303 && a.body && getTotalBytes(a) === null) {
                                        s(
                                            new FetchError(
                                                'Cannot follow redirect with body being a readable stream',
                                                'unsupported-redirect',
                                            ),
                                        );
                                        finalize();
                                        return;
                                    }
                                    if (
                                        e.statusCode === 303 ||
                                        ((e.statusCode === 301 || e.statusCode === 302) && a.method === 'POST')
                                    ) {
                                        A.method = 'GET';
                                        A.body = undefined;
                                        A.headers.delete('content-length');
                                    }
                                    r(fetch(new Request(i, A)));
                                    finalize();
                                    return;
                            }
                        }
                        e.once('end', function () {
                            if (l) l.removeEventListener('abort', g);
                        });
                        let A = e.pipe(new S());
                        const i = {
                            url: a.url,
                            status: e.statusCode,
                            statusText: e.statusMessage,
                            headers: t,
                            size: a.size,
                            timeout: a.timeout,
                            counter: a.counter,
                        };
                        const o = t.get('Content-Encoding');
                        if (
                            !a.compress ||
                            a.method === 'HEAD' ||
                            o === null ||
                            e.statusCode === 204 ||
                            e.statusCode === 304
                        ) {
                            u = new Response(A, i);
                            r(u);
                            return;
                        }
                        const p = {flush: n.Z_SYNC_FLUSH, finishFlush: n.Z_SYNC_FLUSH};
                        if (o == 'gzip' || o == 'x-gzip') {
                            A = A.pipe(n.createGunzip(p));
                            u = new Response(A, i);
                            r(u);
                            return;
                        }
                        if (o == 'deflate' || o == 'x-deflate') {
                            const t = e.pipe(new S());
                            t.once('data', function (e) {
                                if ((e[0] & 15) === 8) {
                                    A = A.pipe(n.createInflate());
                                } else {
                                    A = A.pipe(n.createInflateRaw());
                                }
                                u = new Response(A, i);
                                r(u);
                            });
                            t.on('end', function () {
                                if (!u) {
                                    u = new Response(A, i);
                                    r(u);
                                }
                            });
                            return;
                        }
                        if (o == 'br' && typeof n.createBrotliDecompress === 'function') {
                            A = A.pipe(n.createBrotliDecompress());
                            u = new Response(A, i);
                            r(u);
                            return;
                        }
                        u = new Response(A, i);
                        r(u);
                    });
                    writeToStream(m, a);
                });
            }
            function fixResponseChunkedTransferBadEnding(e, t) {
                let r;
                e.on('socket', function (e) {
                    r = e;
                });
                e.on('response', function (e) {
                    const A = e.headers;
                    if (A['transfer-encoding'] === 'chunked' && !A['content-length']) {
                        e.once('close', function (e) {
                            const A = r && r.listenerCount('data') > 0;
                            if (A && !e) {
                                const e = new Error('Premature close');
                                e.code = 'ERR_STREAM_PREMATURE_CLOSE';
                                t(e);
                            }
                        });
                    }
                });
            }
            function destroyStream(e, t) {
                if (e.destroy) {
                    e.destroy(t);
                } else {
                    e.emit('error', t);
                    e.end();
                }
            }
            fetch.isRedirect = function (e) {
                return e === 301 || e === 302 || e === 303 || e === 307 || e === 308;
            };
            fetch.Promise = global.Promise;
            e.exports = t = fetch;
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = t;
            t.Headers = Headers;
            t.Request = Request;
            t.Response = Response;
            t.FetchError = FetchError;
            t.AbortError = AbortError;
        },
        502: (e, t, r) => {
            'use strict';
            const A = r(1017);
            const i = r(539);
            e.exports = (e) => {
                e = Object.assign({cwd: process.cwd(), path: process.env[i()]}, e);
                let t;
                let r = A.resolve(e.cwd);
                const s = [];
                while (t !== r) {
                    s.push(A.join(r, 'node_modules/.bin'));
                    t = r;
                    r = A.resolve(r, '..');
                }
                s.push(A.dirname(process.execPath));
                return s.concat(e.path).join(A.delimiter);
            };
            e.exports.env = (t) => {
                t = Object.assign({env: process.env}, t);
                const r = Object.assign({}, t.env);
                const A = i({env: r});
                t.path = r[A];
                r[A] = e.exports(t);
                return r;
            };
        },
        2072: (e, t, r) => {
            e.exports = paginationMethodsPlugin;
            function paginationMethodsPlugin(e) {
                e.getFirstPage = r(9555).bind(null, e);
                e.getLastPage = r(2203).bind(null, e);
                e.getNextPage = r(6655).bind(null, e);
                e.getPreviousPage = r(3032).bind(null, e);
                e.hasFirstPage = r(9631);
                e.hasLastPage = r(4286);
                e.hasNextPage = r(500);
                e.hasPreviousPage = r(5996);
            }
        },
        191: (e) => {
            e.exports = deprecate;
            const t = {};
            function deprecate(e) {
                if (t[e]) {
                    return;
                }
                console.warn(`DEPRECATED (@octokit/rest): ${e}`);
                t[e] = 1;
            }
        },
        9555: (e, t, r) => {
            e.exports = getFirstPage;
            const A = r(8604);
            function getFirstPage(e, t, r) {
                return A(e, t, 'first', r);
            }
        },
        2203: (e, t, r) => {
            e.exports = getLastPage;
            const A = r(8604);
            function getLastPage(e, t, r) {
                return A(e, t, 'last', r);
            }
        },
        6655: (e, t, r) => {
            e.exports = getNextPage;
            const A = r(8604);
            function getNextPage(e, t, r) {
                return A(e, t, 'next', r);
            }
        },
        7889: (e) => {
            e.exports = getPageLinks;
            function getPageLinks(e) {
                e = e.link || e.headers.link || '';
                const t = {};
                e.replace(/<([^>]*)>;\s*rel="([\w]*)"/g, (e, r, A) => {
                    t[A] = r;
                });
                return t;
            }
        },
        8604: (e, t, r) => {
            e.exports = getPage;
            const A = r(191);
            const i = r(7889);
            const s = r(6058);
            function getPage(e, t, r, a) {
                A(
                    `octokit.get${
                        r.charAt(0).toUpperCase() + r.slice(1)
                    }Page() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`,
                );
                const o = i(t)[r];
                if (!o) {
                    const e = new s(`No ${r} page found`, 404);
                    return Promise.reject(e);
                }
                const n = {url: o, headers: applyAcceptHeader(t, a)};
                const p = e.request(n);
                return p;
            }
            function applyAcceptHeader(e, t) {
                const r = e.headers && e.headers['x-github-media-type'];
                if (!r || (t && t.accept)) {
                    return t;
                }
                t = t || {};
                t.accept = 'application/vnd.' + r.replace('; param=', '.').replace('; format=', '+');
                return t;
            }
        },
        3032: (e, t, r) => {
            e.exports = getPreviousPage;
            const A = r(8604);
            function getPreviousPage(e, t, r) {
                return A(e, t, 'prev', r);
            }
        },
        9631: (e, t, r) => {
            e.exports = hasFirstPage;
            const A = r(191);
            const i = r(7889);
            function hasFirstPage(e) {
                A(
                    `octokit.hasFirstPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`,
                );
                return i(e).first;
            }
        },
        4286: (e, t, r) => {
            e.exports = hasLastPage;
            const A = r(191);
            const i = r(7889);
            function hasLastPage(e) {
                A(
                    `octokit.hasLastPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`,
                );
                return i(e).last;
            }
        },
        500: (e, t, r) => {
            e.exports = hasNextPage;
            const A = r(191);
            const i = r(7889);
            function hasNextPage(e) {
                A(
                    `octokit.hasNextPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`,
                );
                return i(e).next;
            }
        },
        5996: (e, t, r) => {
            e.exports = hasPreviousPage;
            const A = r(191);
            const i = r(7889);
            function hasPreviousPage(e) {
                A(
                    `octokit.hasPreviousPage() – You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`,
                );
                return i(e).prev;
            }
        },
        6058: (e) => {
            e.exports = class HttpError extends Error {
                constructor(e, t, r) {
                    super(e);
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    }
                    this.name = 'HttpError';
                    this.code = t;
                    this.headers = r;
                }
            };
        },
        1223: (e, t, r) => {
            var A = r(2940);
            e.exports = A(once);
            e.exports.strict = A(onceStrict);
            once.proto = once(function () {
                Object.defineProperty(Function.prototype, 'once', {
                    value: function () {
                        return once(this);
                    },
                    configurable: true,
                });
                Object.defineProperty(Function.prototype, 'onceStrict', {
                    value: function () {
                        return onceStrict(this);
                    },
                    configurable: true,
                });
            });
            function once(e) {
                var f = function () {
                    if (f.called) return f.value;
                    f.called = true;
                    return (f.value = e.apply(this, arguments));
                };
                f.called = false;
                return f;
            }
            function onceStrict(e) {
                var f = function () {
                    if (f.called) throw new Error(f.onceError);
                    f.called = true;
                    return (f.value = e.apply(this, arguments));
                };
                var t = e.name || 'Function wrapped with `once`';
                f.onceError = t + " shouldn't be called more than once";
                f.called = false;
                return f;
            }
        },
        4824: (e, t, r) => {
            'use strict';
            const A = r(2037);
            const i = r(7493);
            const s = r(3515);
            const osName = (e, t) => {
                if (!e && t) {
                    throw new Error("You can't specify a `release` without specifying `platform`");
                }
                e = e || A.platform();
                let r;
                if (e === 'darwin') {
                    if (!t && A.platform() === 'darwin') {
                        t = A.release();
                    }
                    const e = t ? (Number(t.split('.')[0]) > 15 ? 'macOS' : 'OS X') : 'macOS';
                    r = t ? i(t).name : '';
                    return e + (r ? ' ' + r : '');
                }
                if (e === 'linux') {
                    if (!t && A.platform() === 'linux') {
                        t = A.release();
                    }
                    r = t ? t.replace(/^(\d+\.\d+).*/, '$1') : '';
                    return 'Linux' + (r ? ' ' + r : '');
                }
                if (e === 'win32') {
                    if (!t && A.platform() === 'win32') {
                        t = A.release();
                    }
                    r = t ? s(t) : '';
                    return 'Windows' + (r ? ' ' + r : '');
                }
                return e;
            };
            e.exports = osName;
        },
        1330: (e) => {
            'use strict';
            e.exports = (e, t) => {
                t = t || (() => {});
                return e.then(
                    (e) =>
                        new Promise((e) => {
                            e(t());
                        }).then(() => e),
                    (e) =>
                        new Promise((e) => {
                            e(t());
                        }).then(() => {
                            throw e;
                        }),
                );
            };
        },
        539: (e) => {
            'use strict';
            e.exports = (e) => {
                e = e || {};
                const t = e.env || process.env;
                const r = e.platform || process.platform;
                if (r !== 'win32') {
                    return 'PATH';
                }
                return Object.keys(t).find((e) => e.toUpperCase() === 'PATH') || 'Path';
            };
        },
        8341: (e, t, r) => {
            var A = r(1223);
            var i = r(1205);
            var s = r(7147);
            var noop = function () {};
            var a = /^v?\.0/.test(process.version);
            var isFn = function (e) {
                return typeof e === 'function';
            };
            var isFS = function (e) {
                if (!a) return false;
                if (!s) return false;
                return (e instanceof (s.ReadStream || noop) || e instanceof (s.WriteStream || noop)) && isFn(e.close);
            };
            var isRequest = function (e) {
                return e.setHeader && isFn(e.abort);
            };
            var destroyer = function (e, t, r, s) {
                s = A(s);
                var a = false;
                e.on('close', function () {
                    a = true;
                });
                i(e, {readable: t, writable: r}, function (e) {
                    if (e) return s(e);
                    a = true;
                    s();
                });
                var o = false;
                return function (t) {
                    if (a) return;
                    if (o) return;
                    o = true;
                    if (isFS(e)) return e.close(noop);
                    if (isRequest(e)) return e.abort();
                    if (isFn(e.destroy)) return e.destroy();
                    s(t || new Error('stream was destroyed'));
                };
            };
            var call = function (e) {
                e();
            };
            var pipe = function (e, t) {
                return e.pipe(t);
            };
            var pump = function () {
                var e = Array.prototype.slice.call(arguments);
                var t = (isFn(e[e.length - 1] || noop) && e.pop()) || noop;
                if (Array.isArray(e[0])) e = e[0];
                if (e.length < 2) throw new Error('pump requires two streams per minimum');
                var r;
                var A = e.map(function (i, s) {
                    var a = s < e.length - 1;
                    var o = s > 0;
                    return destroyer(i, a, o, function (e) {
                        if (!r) r = e;
                        if (e) A.forEach(call);
                        if (a) return;
                        A.forEach(call);
                        t(r);
                    });
                });
                return e.reduce(pipe);
            };
            e.exports = pump;
        },
        1370: function (e, t, r) {
            'use strict';
            var A =
                (this && this.__awaiter) ||
                function (e, t, r, A) {
                    return new (r || (r = Promise))(function (i, s) {
                        function fulfilled(e) {
                            try {
                                step(A.next(e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function rejected(e) {
                            try {
                                step(A['throw'](e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function step(e) {
                            e.done
                                ? i(e.value)
                                : new r(function (t) {
                                      t(e.value);
                                  }).then(fulfilled, rejected);
                        }
                        step((A = A.apply(e, t || [])).next());
                    });
                };
            Object.defineProperty(t, '__esModule', {value: true});
            const i = r(9580);
            const generateUniqueRef = (e) => `${e}-${i()}`;
            t.generateUniqueRef = generateUniqueRef;
            const getHeadRef = (e) => `heads/${e}`;
            t.getHeadRef = getHeadRef;
            const getFullyQualifiedRef = (e) => `refs/${getHeadRef(e)}`;
            const fetchRefSha = ({octokit: e, owner: t, ref: r, repo: i}) =>
                A(this, void 0, void 0, function* () {
                    const {
                        data: {
                            object: {sha: A},
                        },
                    } = yield e.git.getRef({owner: t, ref: getHeadRef(r), repo: i});
                    return A;
                });
            t.fetchRefSha = fetchRefSha;
            const updateRef = ({force: e, octokit: t, owner: r, ref: i, repo: s, sha: a}) =>
                A(this, void 0, void 0, function* () {
                    yield t.git.updateRef({force: e, owner: r, ref: getHeadRef(i), repo: s, sha: a});
                });
            t.updateRef = updateRef;
            const deleteRef = ({octokit: e, owner: t, ref: r, repo: i}) =>
                A(this, void 0, void 0, function* () {
                    yield e.git.deleteRef({owner: t, ref: getHeadRef(r), repo: i});
                });
            t.deleteRef = deleteRef;
            const createRef = ({octokit: e, owner: t, ref: r, repo: i, sha: s}) =>
                A(this, void 0, void 0, function* () {
                    yield e.git.createRef({owner: t, ref: getFullyQualifiedRef(r), repo: i, sha: s});
                });
            t.createRef = createRef;
            const createTemporaryRef = ({octokit: e, owner: t, ref: r, repo: i, sha: s}) =>
                A(this, void 0, void 0, function* () {
                    const a = generateUniqueRef(r);
                    yield createRef({octokit: e, owner: t, ref: a, repo: i, sha: s});
                    return {
                        deleteTemporaryRef() {
                            return A(this, void 0, void 0, function* () {
                                yield deleteRef({octokit: e, owner: t, ref: a, repo: i});
                            });
                        },
                        temporaryRef: a,
                    };
                });
            t.createTemporaryRef = createTemporaryRef;
            const withTemporaryRef = ({action: e, octokit: t, owner: r, ref: i, repo: s, sha: a}) =>
                A(this, void 0, void 0, function* () {
                    const {deleteTemporaryRef: A, temporaryRef: o} = yield createTemporaryRef({
                        octokit: t,
                        owner: r,
                        ref: i,
                        repo: s,
                        sha: a,
                    });
                    try {
                        return yield e(o);
                    } finally {
                        yield A();
                    }
                });
            t.withTemporaryRef = withTemporaryRef;
            const getCommitsDetails = ({
                commit: {
                    author: e,
                    committer: t,
                    message: r,
                    tree: {sha: A},
                },
                sha: i,
            }) => ({author: e, committer: t, message: r, sha: i, tree: A});
            const fetchCommitsDetails = ({octokit: e, owner: t, pullRequestNumber: r, repo: i}) =>
                A(this, void 0, void 0, function* () {
                    const A = e.pulls.listCommits.endpoint.merge({owner: t, pull_number: r, repo: i});
                    const s = yield e.paginate(A);
                    return s.map(getCommitsDetails);
                });
            t.fetchCommitsDetails = fetchCommitsDetails;
            const fetchCommits = ({octokit: e, owner: t, pullRequestNumber: r, repo: i}) =>
                A(this, void 0, void 0, function* () {
                    const A = yield fetchCommitsDetails({octokit: e, owner: t, pullRequestNumber: r, repo: i});
                    return A.map(({sha: e}) => e);
                });
            t.fetchCommits = fetchCommits;
        },
        1597: (e) => {
            var t = [];
            for (var r = 0; r < 256; ++r) {
                t[r] = (r + 256).toString(16).substr(1);
            }
            function bytesToUuid(e, r) {
                var A = r || 0;
                var i = t;
                return [
                    i[e[A++]],
                    i[e[A++]],
                    i[e[A++]],
                    i[e[A++]],
                    '-',
                    i[e[A++]],
                    i[e[A++]],
                    '-',
                    i[e[A++]],
                    i[e[A++]],
                    '-',
                    i[e[A++]],
                    i[e[A++]],
                    '-',
                    i[e[A++]],
                    i[e[A++]],
                    i[e[A++]],
                    i[e[A++]],
                    i[e[A++]],
                    i[e[A++]],
                ].join('');
            }
            e.exports = bytesToUuid;
        },
        2509: (e, t, r) => {
            var A = r(6113);
            e.exports = function nodeRNG() {
                return A.randomBytes(16);
            };
        },
        9580: (e, t, r) => {
            var A = r(2509);
            var i = r(1597);
            function v4(e, t, r) {
                var s = (t && r) || 0;
                if (typeof e == 'string') {
                    t = e === 'binary' ? new Array(16) : null;
                    e = null;
                }
                e = e || {};
                var a = e.random || (e.rng || A)();
                a[6] = (a[6] & 15) | 64;
                a[8] = (a[8] & 63) | 128;
                if (t) {
                    for (var o = 0; o < 16; ++o) {
                        t[s + o] = a[o];
                    }
                }
                return t || i(a);
            }
            e.exports = v4;
        },
        4931: (e, t, r) => {
            var A = r(9491);
            var i = r(3710);
            var s = /^win/i.test(process.platform);
            var a = r(2361);
            if (typeof a !== 'function') {
                a = a.EventEmitter;
            }
            var o;
            if (process.__signal_exit_emitter__) {
                o = process.__signal_exit_emitter__;
            } else {
                o = process.__signal_exit_emitter__ = new a();
                o.count = 0;
                o.emitted = {};
            }
            if (!o.infinite) {
                o.setMaxListeners(Infinity);
                o.infinite = true;
            }
            e.exports = function (e, t) {
                A.equal(typeof e, 'function', 'a callback must be provided for exit handler');
                if (p === false) {
                    load();
                }
                var r = 'exit';
                if (t && t.alwaysLast) {
                    r = 'afterexit';
                }
                var remove = function () {
                    o.removeListener(r, e);
                    if (o.listeners('exit').length === 0 && o.listeners('afterexit').length === 0) {
                        unload();
                    }
                };
                o.on(r, e);
                return remove;
            };
            e.exports.unload = unload;
            function unload() {
                if (!p) {
                    return;
                }
                p = false;
                i.forEach(function (e) {
                    try {
                        process.removeListener(e, n[e]);
                    } catch (e) {}
                });
                process.emit = l;
                process.reallyExit = d;
                o.count -= 1;
            }
            function emit(e, t, r) {
                if (o.emitted[e]) {
                    return;
                }
                o.emitted[e] = true;
                o.emit(e, t, r);
            }
            var n = {};
            i.forEach(function (e) {
                n[e] = function listener() {
                    var t = process.listeners(e);
                    if (t.length === o.count) {
                        unload();
                        emit('exit', null, e);
                        emit('afterexit', null, e);
                        if (s && e === 'SIGHUP') {
                            e = 'SIGINT';
                        }
                        process.kill(process.pid, e);
                    }
                };
            });
            e.exports.signals = function () {
                return i;
            };
            e.exports.load = load;
            var p = false;
            function load() {
                if (p) {
                    return;
                }
                p = true;
                o.count += 1;
                i = i.filter(function (e) {
                    try {
                        process.on(e, n[e]);
                        return true;
                    } catch (e) {
                        return false;
                    }
                });
                process.emit = processEmit;
                process.reallyExit = processReallyExit;
            }
            var d = process.reallyExit;
            function processReallyExit(e) {
                process.exitCode = e || 0;
                emit('exit', process.exitCode, null);
                emit('afterexit', process.exitCode, null);
                d.call(process, process.exitCode);
            }
            var l = process.emit;
            function processEmit(e, t) {
                if (e === 'exit') {
                    if (t !== undefined) {
                        process.exitCode = t;
                    }
                    var r = l.apply(this, arguments);
                    emit('exit', process.exitCode, null);
                    emit('afterexit', process.exitCode, null);
                    return r;
                } else {
                    return l.apply(this, arguments);
                }
            }
        },
        3710: (e) => {
            e.exports = ['SIGABRT', 'SIGALRM', 'SIGHUP', 'SIGINT', 'SIGTERM'];
            if (process.platform !== 'win32') {
                e.exports.push('SIGVTALRM', 'SIGXCPU', 'SIGXFSZ', 'SIGUSR2', 'SIGTRAP', 'SIGSYS', 'SIGQUIT', 'SIGIOT');
            }
            if (process.platform === 'linux') {
                e.exports.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT', 'SIGUNUSED');
            }
        },
        5774: (e) => {
            'use strict';
            e.exports = function (e) {
                var t = typeof e === 'string' ? '\n' : '\n'.charCodeAt();
                var r = typeof e === 'string' ? '\r' : '\r'.charCodeAt();
                if (e[e.length - 1] === t) {
                    e = e.slice(0, e.length - 1);
                }
                if (e[e.length - 1] === r) {
                    e = e.slice(0, e.length - 1);
                }
                return e;
            };
        },
        9318: (e, t, r) => {
            'use strict';
            const A = r(2037);
            const i = r(6224);
            const s = r(1621);
            const {env: a} = process;
            let o;
            if (s('no-color') || s('no-colors') || s('color=false') || s('color=never')) {
                o = 0;
            } else if (s('color') || s('colors') || s('color=true') || s('color=always')) {
                o = 1;
            }
            if ('FORCE_COLOR' in a) {
                if (a.FORCE_COLOR === 'true') {
                    o = 1;
                } else if (a.FORCE_COLOR === 'false') {
                    o = 0;
                } else {
                    o = a.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(a.FORCE_COLOR, 10), 3);
                }
            }
            function translateLevel(e) {
                if (e === 0) {
                    return false;
                }
                return {level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3};
            }
            function supportsColor(e, t) {
                if (o === 0) {
                    return 0;
                }
                if (s('color=16m') || s('color=full') || s('color=truecolor')) {
                    return 3;
                }
                if (s('color=256')) {
                    return 2;
                }
                if (e && !t && o === undefined) {
                    return 0;
                }
                const r = o || 0;
                if (a.TERM === 'dumb') {
                    return r;
                }
                if (process.platform === 'win32') {
                    const e = A.release().split('.');
                    if (Number(e[0]) >= 10 && Number(e[2]) >= 10586) {
                        return Number(e[2]) >= 14931 ? 3 : 2;
                    }
                    return 1;
                }
                if ('CI' in a) {
                    if (
                        ['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some((e) => e in a) ||
                        a.CI_NAME === 'codeship'
                    ) {
                        return 1;
                    }
                    return r;
                }
                if ('TEAMCITY_VERSION' in a) {
                    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(a.TEAMCITY_VERSION) ? 1 : 0;
                }
                if ('GITHUB_ACTIONS' in a) {
                    return 1;
                }
                if (a.COLORTERM === 'truecolor') {
                    return 3;
                }
                if ('TERM_PROGRAM' in a) {
                    const e = parseInt((a.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
                    switch (a.TERM_PROGRAM) {
                        case 'iTerm.app':
                            return e >= 3 ? 3 : 2;
                        case 'Apple_Terminal':
                            return 2;
                    }
                }
                if (/-256(color)?$/i.test(a.TERM)) {
                    return 2;
                }
                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(a.TERM)) {
                    return 1;
                }
                if ('COLORTERM' in a) {
                    return 1;
                }
                return r;
            }
            function getSupportLevel(e) {
                const t = supportsColor(e, e && e.isTTY);
                return translateLevel(t);
            }
            e.exports = {
                supportsColor: getSupportLevel,
                stdout: translateLevel(supportsColor(true, i.isatty(1))),
                stderr: translateLevel(supportsColor(true, i.isatty(2))),
            };
        },
        4256: (e, t, r) => {
            'use strict';
            var A = r(5477);
            var i = r(2020);
            var s = {TRANSITIONAL: 0, NONTRANSITIONAL: 1};
            function normalize(e) {
                return e
                    .split('\0')
                    .map(function (e) {
                        return e.normalize('NFC');
                    })
                    .join('\0');
            }
            function findStatus(e) {
                var t = 0;
                var r = i.length - 1;
                while (t <= r) {
                    var A = Math.floor((t + r) / 2);
                    var s = i[A];
                    if (s[0][0] <= e && s[0][1] >= e) {
                        return s;
                    } else if (s[0][0] > e) {
                        r = A - 1;
                    } else {
                        t = A + 1;
                    }
                }
                return null;
            }
            var a = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
            function countSymbols(e) {
                return e.replace(a, '_').length;
            }
            function mapChars(e, t, r) {
                var A = false;
                var i = '';
                var a = countSymbols(e);
                for (var o = 0; o < a; ++o) {
                    var n = e.codePointAt(o);
                    var p = findStatus(n);
                    switch (p[1]) {
                        case 'disallowed':
                            A = true;
                            i += String.fromCodePoint(n);
                            break;
                        case 'ignored':
                            break;
                        case 'mapped':
                            i += String.fromCodePoint.apply(String, p[2]);
                            break;
                        case 'deviation':
                            if (r === s.TRANSITIONAL) {
                                i += String.fromCodePoint.apply(String, p[2]);
                            } else {
                                i += String.fromCodePoint(n);
                            }
                            break;
                        case 'valid':
                            i += String.fromCodePoint(n);
                            break;
                        case 'disallowed_STD3_mapped':
                            if (t) {
                                A = true;
                                i += String.fromCodePoint(n);
                            } else {
                                i += String.fromCodePoint.apply(String, p[2]);
                            }
                            break;
                        case 'disallowed_STD3_valid':
                            if (t) {
                                A = true;
                            }
                            i += String.fromCodePoint(n);
                            break;
                    }
                }
                return {string: i, error: A};
            }
            var o = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
            function validateLabel(e, t) {
                if (e.substr(0, 4) === 'xn--') {
                    e = A.toUnicode(e);
                    t = s.NONTRANSITIONAL;
                }
                var r = false;
                if (
                    normalize(e) !== e ||
                    (e[3] === '-' && e[4] === '-') ||
                    e[0] === '-' ||
                    e[e.length - 1] === '-' ||
                    e.indexOf('.') !== -1 ||
                    e.search(o) === 0
                ) {
                    r = true;
                }
                var i = countSymbols(e);
                for (var a = 0; a < i; ++a) {
                    var n = findStatus(e.codePointAt(a));
                    if (
                        (processing === s.TRANSITIONAL && n[1] !== 'valid') ||
                        (processing === s.NONTRANSITIONAL && n[1] !== 'valid' && n[1] !== 'deviation')
                    ) {
                        r = true;
                        break;
                    }
                }
                return {label: e, error: r};
            }
            function processing(e, t, r) {
                var A = mapChars(e, t, r);
                A.string = normalize(A.string);
                var i = A.string.split('.');
                for (var s = 0; s < i.length; ++s) {
                    try {
                        var a = validateLabel(i[s]);
                        i[s] = a.label;
                        A.error = A.error || a.error;
                    } catch (e) {
                        A.error = true;
                    }
                }
                return {string: i.join('.'), error: A.error};
            }
            e.exports.toASCII = function (e, t, r, i) {
                var s = processing(e, t, r);
                var a = s.string.split('.');
                a = a.map(function (e) {
                    try {
                        return A.toASCII(e);
                    } catch (t) {
                        s.error = true;
                        return e;
                    }
                });
                if (i) {
                    var o = a.slice(0, a.length - 1).join('.').length;
                    if (o.length > 253 || o.length === 0) {
                        s.error = true;
                    }
                    for (var n = 0; n < a.length; ++n) {
                        if (a.length > 63 || a.length === 0) {
                            s.error = true;
                            break;
                        }
                    }
                }
                if (s.error) return null;
                return a.join('.');
            };
            e.exports.toUnicode = function (e, t) {
                var r = processing(e, t, s.NONTRANSITIONAL);
                return {domain: r.string, error: r.error};
            };
            e.exports.PROCESSING_OPTIONS = s;
        },
        4294: (e, t, r) => {
            e.exports = r(4219);
        },
        4219: (e, t, r) => {
            'use strict';
            var A = r(1808);
            var i = r(4404);
            var s = r(3685);
            var a = r(5687);
            var o = r(2361);
            var n = r(9491);
            var p = r(3837);
            t.httpOverHttp = httpOverHttp;
            t.httpsOverHttp = httpsOverHttp;
            t.httpOverHttps = httpOverHttps;
            t.httpsOverHttps = httpsOverHttps;
            function httpOverHttp(e) {
                var t = new TunnelingAgent(e);
                t.request = s.request;
                return t;
            }
            function httpsOverHttp(e) {
                var t = new TunnelingAgent(e);
                t.request = s.request;
                t.createSocket = createSecureSocket;
                t.defaultPort = 443;
                return t;
            }
            function httpOverHttps(e) {
                var t = new TunnelingAgent(e);
                t.request = a.request;
                return t;
            }
            function httpsOverHttps(e) {
                var t = new TunnelingAgent(e);
                t.request = a.request;
                t.createSocket = createSecureSocket;
                t.defaultPort = 443;
                return t;
            }
            function TunnelingAgent(e) {
                var t = this;
                t.options = e || {};
                t.proxyOptions = t.options.proxy || {};
                t.maxSockets = t.options.maxSockets || s.Agent.defaultMaxSockets;
                t.requests = [];
                t.sockets = [];
                t.on('free', function onFree(e, r, A, i) {
                    var s = toOptions(r, A, i);
                    for (var a = 0, o = t.requests.length; a < o; ++a) {
                        var n = t.requests[a];
                        if (n.host === s.host && n.port === s.port) {
                            t.requests.splice(a, 1);
                            n.request.onSocket(e);
                            return;
                        }
                    }
                    e.destroy();
                    t.removeSocket(e);
                });
            }
            p.inherits(TunnelingAgent, o.EventEmitter);
            TunnelingAgent.prototype.addRequest = function addRequest(e, t, r, A) {
                var i = this;
                var s = mergeOptions({request: e}, i.options, toOptions(t, r, A));
                if (i.sockets.length >= this.maxSockets) {
                    i.requests.push(s);
                    return;
                }
                i.createSocket(s, function (t) {
                    t.on('free', onFree);
                    t.on('close', onCloseOrRemove);
                    t.on('agentRemove', onCloseOrRemove);
                    e.onSocket(t);
                    function onFree() {
                        i.emit('free', t, s);
                    }
                    function onCloseOrRemove(e) {
                        i.removeSocket(t);
                        t.removeListener('free', onFree);
                        t.removeListener('close', onCloseOrRemove);
                        t.removeListener('agentRemove', onCloseOrRemove);
                    }
                });
            };
            TunnelingAgent.prototype.createSocket = function createSocket(e, t) {
                var r = this;
                var A = {};
                r.sockets.push(A);
                var i = mergeOptions({}, r.proxyOptions, {
                    method: 'CONNECT',
                    path: e.host + ':' + e.port,
                    agent: false,
                    headers: {host: e.host + ':' + e.port},
                });
                if (e.localAddress) {
                    i.localAddress = e.localAddress;
                }
                if (i.proxyAuth) {
                    i.headers = i.headers || {};
                    i.headers['Proxy-Authorization'] = 'Basic ' + new Buffer(i.proxyAuth).toString('base64');
                }
                d('making CONNECT request');
                var s = r.request(i);
                s.useChunkedEncodingByDefault = false;
                s.once('response', onResponse);
                s.once('upgrade', onUpgrade);
                s.once('connect', onConnect);
                s.once('error', onError);
                s.end();
                function onResponse(e) {
                    e.upgrade = true;
                }
                function onUpgrade(e, t, r) {
                    process.nextTick(function () {
                        onConnect(e, t, r);
                    });
                }
                function onConnect(i, a, o) {
                    s.removeAllListeners();
                    a.removeAllListeners();
                    if (i.statusCode !== 200) {
                        d('tunneling socket could not be established, statusCode=%d', i.statusCode);
                        a.destroy();
                        var n = new Error('tunneling socket could not be established, ' + 'statusCode=' + i.statusCode);
                        n.code = 'ECONNRESET';
                        e.request.emit('error', n);
                        r.removeSocket(A);
                        return;
                    }
                    if (o.length > 0) {
                        d('got illegal response body from proxy');
                        a.destroy();
                        var n = new Error('got illegal response body from proxy');
                        n.code = 'ECONNRESET';
                        e.request.emit('error', n);
                        r.removeSocket(A);
                        return;
                    }
                    d('tunneling connection has established');
                    r.sockets[r.sockets.indexOf(A)] = a;
                    return t(a);
                }
                function onError(t) {
                    s.removeAllListeners();
                    d('tunneling socket could not be established, cause=%s\n', t.message, t.stack);
                    var i = new Error('tunneling socket could not be established, ' + 'cause=' + t.message);
                    i.code = 'ECONNRESET';
                    e.request.emit('error', i);
                    r.removeSocket(A);
                }
            };
            TunnelingAgent.prototype.removeSocket = function removeSocket(e) {
                var t = this.sockets.indexOf(e);
                if (t === -1) {
                    return;
                }
                this.sockets.splice(t, 1);
                var r = this.requests.shift();
                if (r) {
                    this.createSocket(r, function (e) {
                        r.request.onSocket(e);
                    });
                }
            };
            function createSecureSocket(e, t) {
                var r = this;
                TunnelingAgent.prototype.createSocket.call(r, e, function (A) {
                    var s = e.request.getHeader('host');
                    var a = mergeOptions({}, r.options, {socket: A, servername: s ? s.replace(/:.*$/, '') : e.host});
                    var o = i.connect(0, a);
                    r.sockets[r.sockets.indexOf(A)] = o;
                    t(o);
                });
            }
            function toOptions(e, t, r) {
                if (typeof e === 'string') {
                    return {host: e, port: t, localAddress: r};
                }
                return e;
            }
            function mergeOptions(e) {
                for (var t = 1, r = arguments.length; t < r; ++t) {
                    var A = arguments[t];
                    if (typeof A === 'object') {
                        var i = Object.keys(A);
                        for (var s = 0, a = i.length; s < a; ++s) {
                            var o = i[s];
                            if (A[o] !== undefined) {
                                e[o] = A[o];
                            }
                        }
                    }
                }
                return e;
            }
            var d;
            if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
                d = function () {
                    var e = Array.prototype.slice.call(arguments);
                    if (typeof e[0] === 'string') {
                        e[0] = 'TUNNEL: ' + e[0];
                    } else {
                        e.unshift('TUNNEL:');
                    }
                    console.error.apply(console, e);
                };
            } else {
                d = function () {};
            }
            t.debug = d;
        },
        1773: (e, t, r) => {
            'use strict';
            const A = r(3598);
            const i = r(412);
            const s = r(8045);
            const a = r(4634);
            const o = r(7931);
            const n = r(7890);
            const p = r(3983);
            const {InvalidArgumentError: d} = s;
            const l = r(4059);
            const u = r(2067);
            const c = r(8687);
            const g = r(6771);
            const m = r(6193);
            const h = r(888);
            const C = r(7858);
            const Q = r(2286);
            const {getGlobalDispatcher: B, setGlobalDispatcher: I} = r(1892);
            const y = r(6930);
            const w = r(2860);
            const b = r(8861);
            let v;
            try {
                r(6113);
                v = true;
            } catch {
                v = false;
            }
            Object.assign(i.prototype, l);
            e.exports.Dispatcher = i;
            e.exports.Client = A;
            e.exports.Pool = a;
            e.exports.BalancedPool = o;
            e.exports.Agent = n;
            e.exports.ProxyAgent = C;
            e.exports.RetryHandler = Q;
            e.exports.DecoratorHandler = y;
            e.exports.RedirectHandler = w;
            e.exports.createRedirectInterceptor = b;
            e.exports.buildConnector = u;
            e.exports.errors = s;
            function makeDispatcher(e) {
                return (t, r, A) => {
                    if (typeof r === 'function') {
                        A = r;
                        r = null;
                    }
                    if (!t || (typeof t !== 'string' && typeof t !== 'object' && !(t instanceof URL))) {
                        throw new d('invalid url');
                    }
                    if (r != null && typeof r !== 'object') {
                        throw new d('invalid opts');
                    }
                    if (r && r.path != null) {
                        if (typeof r.path !== 'string') {
                            throw new d('invalid opts.path');
                        }
                        let e = r.path;
                        if (!r.path.startsWith('/')) {
                            e = `/${e}`;
                        }
                        t = new URL(p.parseOrigin(t).origin + e);
                    } else {
                        if (!r) {
                            r = typeof t === 'object' ? t : {};
                        }
                        t = p.parseURL(t);
                    }
                    const {agent: i, dispatcher: s = B()} = r;
                    if (i) {
                        throw new d('unsupported opts.agent. Did you mean opts.client?');
                    }
                    return e.call(
                        s,
                        {
                            ...r,
                            origin: t.origin,
                            path: t.search ? `${t.pathname}${t.search}` : t.pathname,
                            method: r.method || (r.body ? 'PUT' : 'GET'),
                        },
                        A,
                    );
                };
            }
            e.exports.setGlobalDispatcher = I;
            e.exports.getGlobalDispatcher = B;
            if (p.nodeMajor > 16 || (p.nodeMajor === 16 && p.nodeMinor >= 8)) {
                let t = null;
                e.exports.fetch = async function fetch(e) {
                    if (!t) {
                        t = r(4881).fetch;
                    }
                    try {
                        return await t(...arguments);
                    } catch (e) {
                        if (typeof e === 'object') {
                            Error.captureStackTrace(e, this);
                        }
                        throw e;
                    }
                };
                e.exports.Headers = r(554).Headers;
                e.exports.Response = r(7823).Response;
                e.exports.Request = r(8359).Request;
                e.exports.FormData = r(2015).FormData;
                e.exports.File = r(8511).File;
                e.exports.FileReader = r(1446).FileReader;
                const {setGlobalOrigin: A, getGlobalOrigin: i} = r(1246);
                e.exports.setGlobalOrigin = A;
                e.exports.getGlobalOrigin = i;
                const {CacheStorage: s} = r(7907);
                const {kConstruct: a} = r(9174);
                e.exports.caches = new s(a);
            }
            if (p.nodeMajor >= 16) {
                const {deleteCookie: t, getCookies: A, getSetCookies: i, setCookie: s} = r(1724);
                e.exports.deleteCookie = t;
                e.exports.getCookies = A;
                e.exports.getSetCookies = i;
                e.exports.setCookie = s;
                const {parseMIMEType: a, serializeAMimeType: o} = r(685);
                e.exports.parseMIMEType = a;
                e.exports.serializeAMimeType = o;
            }
            if (p.nodeMajor >= 18 && v) {
                const {WebSocket: t} = r(4284);
                e.exports.WebSocket = t;
            }
            e.exports.request = makeDispatcher(l.request);
            e.exports.stream = makeDispatcher(l.stream);
            e.exports.pipeline = makeDispatcher(l.pipeline);
            e.exports.connect = makeDispatcher(l.connect);
            e.exports.upgrade = makeDispatcher(l.upgrade);
            e.exports.MockClient = c;
            e.exports.MockPool = m;
            e.exports.MockAgent = g;
            e.exports.mockErrors = h;
        },
        7890: (e, t, r) => {
            'use strict';
            const {InvalidArgumentError: A} = r(8045);
            const {kClients: i, kRunning: s, kClose: a, kDestroy: o, kDispatch: n, kInterceptors: p} = r(2785);
            const d = r(4839);
            const l = r(4634);
            const u = r(3598);
            const c = r(3983);
            const g = r(8861);
            const {WeakRef: m, FinalizationRegistry: h} = r(6436)();
            const C = Symbol('onConnect');
            const Q = Symbol('onDisconnect');
            const B = Symbol('onConnectionError');
            const I = Symbol('maxRedirections');
            const y = Symbol('onDrain');
            const w = Symbol('factory');
            const b = Symbol('finalizer');
            const v = Symbol('options');
            function defaultFactory(e, t) {
                return t && t.connections === 1 ? new u(e, t) : new l(e, t);
            }
            class Agent extends d {
                constructor({factory: e = defaultFactory, maxRedirections: t = 0, connect: r, ...s} = {}) {
                    super();
                    if (typeof e !== 'function') {
                        throw new A('factory must be a function.');
                    }
                    if (r != null && typeof r !== 'function' && typeof r !== 'object') {
                        throw new A('connect must be a function or an object');
                    }
                    if (!Number.isInteger(t) || t < 0) {
                        throw new A('maxRedirections must be a positive number');
                    }
                    if (r && typeof r !== 'function') {
                        r = {...r};
                    }
                    this[p] =
                        s.interceptors && s.interceptors.Agent && Array.isArray(s.interceptors.Agent)
                            ? s.interceptors.Agent
                            : [g({maxRedirections: t})];
                    this[v] = {...c.deepClone(s), connect: r};
                    this[v].interceptors = s.interceptors ? {...s.interceptors} : undefined;
                    this[I] = t;
                    this[w] = e;
                    this[i] = new Map();
                    this[b] = new h((e) => {
                        const t = this[i].get(e);
                        if (t !== undefined && t.deref() === undefined) {
                            this[i].delete(e);
                        }
                    });
                    const a = this;
                    this[y] = (e, t) => {
                        a.emit('drain', e, [a, ...t]);
                    };
                    this[C] = (e, t) => {
                        a.emit('connect', e, [a, ...t]);
                    };
                    this[Q] = (e, t, r) => {
                        a.emit('disconnect', e, [a, ...t], r);
                    };
                    this[B] = (e, t, r) => {
                        a.emit('connectionError', e, [a, ...t], r);
                    };
                }
                get [s]() {
                    let e = 0;
                    for (const t of this[i].values()) {
                        const r = t.deref();
                        if (r) {
                            e += r[s];
                        }
                    }
                    return e;
                }
                [n](e, t) {
                    let r;
                    if (e.origin && (typeof e.origin === 'string' || e.origin instanceof URL)) {
                        r = String(e.origin);
                    } else {
                        throw new A('opts.origin must be a non-empty string or URL.');
                    }
                    const s = this[i].get(r);
                    let a = s ? s.deref() : null;
                    if (!a) {
                        a = this[w](e.origin, this[v])
                            .on('drain', this[y])
                            .on('connect', this[C])
                            .on('disconnect', this[Q])
                            .on('connectionError', this[B]);
                        this[i].set(r, new m(a));
                        this[b].register(a, r);
                    }
                    return a.dispatch(e, t);
                }
                async [a]() {
                    const e = [];
                    for (const t of this[i].values()) {
                        const r = t.deref();
                        if (r) {
                            e.push(r.close());
                        }
                    }
                    await Promise.all(e);
                }
                async [o](e) {
                    const t = [];
                    for (const r of this[i].values()) {
                        const A = r.deref();
                        if (A) {
                            t.push(A.destroy(e));
                        }
                    }
                    await Promise.all(t);
                }
            }
            e.exports = Agent;
        },
        7032: (e, t, r) => {
            const {addAbortListener: A} = r(3983);
            const {RequestAbortedError: i} = r(8045);
            const s = Symbol('kListener');
            const a = Symbol('kSignal');
            function abort(e) {
                if (e.abort) {
                    e.abort();
                } else {
                    e.onError(new i());
                }
            }
            function addSignal(e, t) {
                e[a] = null;
                e[s] = null;
                if (!t) {
                    return;
                }
                if (t.aborted) {
                    abort(e);
                    return;
                }
                e[a] = t;
                e[s] = () => {
                    abort(e);
                };
                A(e[a], e[s]);
            }
            function removeSignal(e) {
                if (!e[a]) {
                    return;
                }
                if ('removeEventListener' in e[a]) {
                    e[a].removeEventListener('abort', e[s]);
                } else {
                    e[a].removeListener('abort', e[s]);
                }
                e[a] = null;
                e[s] = null;
            }
            e.exports = {addSignal: addSignal, removeSignal: removeSignal};
        },
        9744: (e, t, r) => {
            'use strict';
            const {AsyncResource: A} = r(852);
            const {InvalidArgumentError: i, RequestAbortedError: s, SocketError: a} = r(8045);
            const o = r(3983);
            const {addSignal: n, removeSignal: p} = r(7032);
            class ConnectHandler extends A {
                constructor(e, t) {
                    if (!e || typeof e !== 'object') {
                        throw new i('invalid opts');
                    }
                    if (typeof t !== 'function') {
                        throw new i('invalid callback');
                    }
                    const {signal: r, opaque: A, responseHeaders: s} = e;
                    if (r && typeof r.on !== 'function' && typeof r.addEventListener !== 'function') {
                        throw new i('signal must be an EventEmitter or EventTarget');
                    }
                    super('UNDICI_CONNECT');
                    this.opaque = A || null;
                    this.responseHeaders = s || null;
                    this.callback = t;
                    this.abort = null;
                    n(this, r);
                }
                onConnect(e, t) {
                    if (!this.callback) {
                        throw new s();
                    }
                    this.abort = e;
                    this.context = t;
                }
                onHeaders() {
                    throw new a('bad connect', null);
                }
                onUpgrade(e, t, r) {
                    const {callback: A, opaque: i, context: s} = this;
                    p(this);
                    this.callback = null;
                    let a = t;
                    if (a != null) {
                        a = this.responseHeaders === 'raw' ? o.parseRawHeaders(t) : o.parseHeaders(t);
                    }
                    this.runInAsyncScope(A, null, null, {statusCode: e, headers: a, socket: r, opaque: i, context: s});
                }
                onError(e) {
                    const {callback: t, opaque: r} = this;
                    p(this);
                    if (t) {
                        this.callback = null;
                        queueMicrotask(() => {
                            this.runInAsyncScope(t, null, e, {opaque: r});
                        });
                    }
                }
            }
            function connect(e, t) {
                if (t === undefined) {
                    return new Promise((t, r) => {
                        connect.call(this, e, (e, A) => (e ? r(e) : t(A)));
                    });
                }
                try {
                    const r = new ConnectHandler(e, t);
                    this.dispatch({...e, method: 'CONNECT'}, r);
                } catch (r) {
                    if (typeof t !== 'function') {
                        throw r;
                    }
                    const A = e && e.opaque;
                    queueMicrotask(() => t(r, {opaque: A}));
                }
            }
            e.exports = connect;
        },
        8752: (e, t, r) => {
            'use strict';
            const {Readable: A, Duplex: i, PassThrough: s} = r(2781);
            const {InvalidArgumentError: a, InvalidReturnValueError: o, RequestAbortedError: n} = r(8045);
            const p = r(3983);
            const {AsyncResource: d} = r(852);
            const {addSignal: l, removeSignal: u} = r(7032);
            const c = r(9491);
            const g = Symbol('resume');
            class PipelineRequest extends A {
                constructor() {
                    super({autoDestroy: true});
                    this[g] = null;
                }
                _read() {
                    const {[g]: e} = this;
                    if (e) {
                        this[g] = null;
                        e();
                    }
                }
                _destroy(e, t) {
                    this._read();
                    t(e);
                }
            }
            class PipelineResponse extends A {
                constructor(e) {
                    super({autoDestroy: true});
                    this[g] = e;
                }
                _read() {
                    this[g]();
                }
                _destroy(e, t) {
                    if (!e && !this._readableState.endEmitted) {
                        e = new n();
                    }
                    t(e);
                }
            }
            class PipelineHandler extends d {
                constructor(e, t) {
                    if (!e || typeof e !== 'object') {
                        throw new a('invalid opts');
                    }
                    if (typeof t !== 'function') {
                        throw new a('invalid handler');
                    }
                    const {signal: r, method: A, opaque: s, onInfo: o, responseHeaders: d} = e;
                    if (r && typeof r.on !== 'function' && typeof r.addEventListener !== 'function') {
                        throw new a('signal must be an EventEmitter or EventTarget');
                    }
                    if (A === 'CONNECT') {
                        throw new a('invalid method');
                    }
                    if (o && typeof o !== 'function') {
                        throw new a('invalid onInfo callback');
                    }
                    super('UNDICI_PIPELINE');
                    this.opaque = s || null;
                    this.responseHeaders = d || null;
                    this.handler = t;
                    this.abort = null;
                    this.context = null;
                    this.onInfo = o || null;
                    this.req = new PipelineRequest().on('error', p.nop);
                    this.ret = new i({
                        readableObjectMode: e.objectMode,
                        autoDestroy: true,
                        read: () => {
                            const {body: e} = this;
                            if (e && e.resume) {
                                e.resume();
                            }
                        },
                        write: (e, t, r) => {
                            const {req: A} = this;
                            if (A.push(e, t) || A._readableState.destroyed) {
                                r();
                            } else {
                                A[g] = r;
                            }
                        },
                        destroy: (e, t) => {
                            const {body: r, req: A, res: i, ret: s, abort: a} = this;
                            if (!e && !s._readableState.endEmitted) {
                                e = new n();
                            }
                            if (a && e) {
                                a();
                            }
                            p.destroy(r, e);
                            p.destroy(A, e);
                            p.destroy(i, e);
                            u(this);
                            t(e);
                        },
                    }).on('prefinish', () => {
                        const {req: e} = this;
                        e.push(null);
                    });
                    this.res = null;
                    l(this, r);
                }
                onConnect(e, t) {
                    const {ret: r, res: A} = this;
                    c(!A, 'pipeline cannot be retried');
                    if (r.destroyed) {
                        throw new n();
                    }
                    this.abort = e;
                    this.context = t;
                }
                onHeaders(e, t, r) {
                    const {opaque: A, handler: i, context: s} = this;
                    if (e < 200) {
                        if (this.onInfo) {
                            const r = this.responseHeaders === 'raw' ? p.parseRawHeaders(t) : p.parseHeaders(t);
                            this.onInfo({statusCode: e, headers: r});
                        }
                        return;
                    }
                    this.res = new PipelineResponse(r);
                    let a;
                    try {
                        this.handler = null;
                        const r = this.responseHeaders === 'raw' ? p.parseRawHeaders(t) : p.parseHeaders(t);
                        a = this.runInAsyncScope(i, null, {
                            statusCode: e,
                            headers: r,
                            opaque: A,
                            body: this.res,
                            context: s,
                        });
                    } catch (e) {
                        this.res.on('error', p.nop);
                        throw e;
                    }
                    if (!a || typeof a.on !== 'function') {
                        throw new o('expected Readable');
                    }
                    a.on('data', (e) => {
                        const {ret: t, body: r} = this;
                        if (!t.push(e) && r.pause) {
                            r.pause();
                        }
                    })
                        .on('error', (e) => {
                            const {ret: t} = this;
                            p.destroy(t, e);
                        })
                        .on('end', () => {
                            const {ret: e} = this;
                            e.push(null);
                        })
                        .on('close', () => {
                            const {ret: e} = this;
                            if (!e._readableState.ended) {
                                p.destroy(e, new n());
                            }
                        });
                    this.body = a;
                }
                onData(e) {
                    const {res: t} = this;
                    return t.push(e);
                }
                onComplete(e) {
                    const {res: t} = this;
                    t.push(null);
                }
                onError(e) {
                    const {ret: t} = this;
                    this.handler = null;
                    p.destroy(t, e);
                }
            }
            function pipeline(e, t) {
                try {
                    const r = new PipelineHandler(e, t);
                    this.dispatch({...e, body: r.req}, r);
                    return r.ret;
                } catch (e) {
                    return new s().destroy(e);
                }
            }
            e.exports = pipeline;
        },
        5448: (e, t, r) => {
            'use strict';
            const A = r(3858);
            const {InvalidArgumentError: i, RequestAbortedError: s} = r(8045);
            const a = r(3983);
            const {getResolveErrorBodyCallback: o} = r(7474);
            const {AsyncResource: n} = r(852);
            const {addSignal: p, removeSignal: d} = r(7032);
            class RequestHandler extends n {
                constructor(e, t) {
                    if (!e || typeof e !== 'object') {
                        throw new i('invalid opts');
                    }
                    const {
                        signal: r,
                        method: A,
                        opaque: s,
                        body: o,
                        onInfo: n,
                        responseHeaders: d,
                        throwOnError: l,
                        highWaterMark: u,
                    } = e;
                    try {
                        if (typeof t !== 'function') {
                            throw new i('invalid callback');
                        }
                        if (u && (typeof u !== 'number' || u < 0)) {
                            throw new i('invalid highWaterMark');
                        }
                        if (r && typeof r.on !== 'function' && typeof r.addEventListener !== 'function') {
                            throw new i('signal must be an EventEmitter or EventTarget');
                        }
                        if (A === 'CONNECT') {
                            throw new i('invalid method');
                        }
                        if (n && typeof n !== 'function') {
                            throw new i('invalid onInfo callback');
                        }
                        super('UNDICI_REQUEST');
                    } catch (e) {
                        if (a.isStream(o)) {
                            a.destroy(o.on('error', a.nop), e);
                        }
                        throw e;
                    }
                    this.responseHeaders = d || null;
                    this.opaque = s || null;
                    this.callback = t;
                    this.res = null;
                    this.abort = null;
                    this.body = o;
                    this.trailers = {};
                    this.context = null;
                    this.onInfo = n || null;
                    this.throwOnError = l;
                    this.highWaterMark = u;
                    if (a.isStream(o)) {
                        o.on('error', (e) => {
                            this.onError(e);
                        });
                    }
                    p(this, r);
                }
                onConnect(e, t) {
                    if (!this.callback) {
                        throw new s();
                    }
                    this.abort = e;
                    this.context = t;
                }
                onHeaders(e, t, r, i) {
                    const {callback: s, opaque: n, abort: p, context: d, responseHeaders: l, highWaterMark: u} = this;
                    const c = l === 'raw' ? a.parseRawHeaders(t) : a.parseHeaders(t);
                    if (e < 200) {
                        if (this.onInfo) {
                            this.onInfo({statusCode: e, headers: c});
                        }
                        return;
                    }
                    const g = l === 'raw' ? a.parseHeaders(t) : c;
                    const m = g['content-type'];
                    const h = new A({resume: r, abort: p, contentType: m, highWaterMark: u});
                    this.callback = null;
                    this.res = h;
                    if (s !== null) {
                        if (this.throwOnError && e >= 400) {
                            this.runInAsyncScope(o, null, {
                                callback: s,
                                body: h,
                                contentType: m,
                                statusCode: e,
                                statusMessage: i,
                                headers: c,
                            });
                        } else {
                            this.runInAsyncScope(s, null, null, {
                                statusCode: e,
                                headers: c,
                                trailers: this.trailers,
                                opaque: n,
                                body: h,
                                context: d,
                            });
                        }
                    }
                }
                onData(e) {
                    const {res: t} = this;
                    return t.push(e);
                }
                onComplete(e) {
                    const {res: t} = this;
                    d(this);
                    a.parseHeaders(e, this.trailers);
                    t.push(null);
                }
                onError(e) {
                    const {res: t, callback: r, body: A, opaque: i} = this;
                    d(this);
                    if (r) {
                        this.callback = null;
                        queueMicrotask(() => {
                            this.runInAsyncScope(r, null, e, {opaque: i});
                        });
                    }
                    if (t) {
                        this.res = null;
                        queueMicrotask(() => {
                            a.destroy(t, e);
                        });
                    }
                    if (A) {
                        this.body = null;
                        a.destroy(A, e);
                    }
                }
            }
            function request(e, t) {
                if (t === undefined) {
                    return new Promise((t, r) => {
                        request.call(this, e, (e, A) => (e ? r(e) : t(A)));
                    });
                }
                try {
                    this.dispatch(e, new RequestHandler(e, t));
                } catch (r) {
                    if (typeof t !== 'function') {
                        throw r;
                    }
                    const A = e && e.opaque;
                    queueMicrotask(() => t(r, {opaque: A}));
                }
            }
            e.exports = request;
            e.exports.RequestHandler = RequestHandler;
        },
        5395: (e, t, r) => {
            'use strict';
            const {finished: A, PassThrough: i} = r(2781);
            const {InvalidArgumentError: s, InvalidReturnValueError: a, RequestAbortedError: o} = r(8045);
            const n = r(3983);
            const {getResolveErrorBodyCallback: p} = r(7474);
            const {AsyncResource: d} = r(852);
            const {addSignal: l, removeSignal: u} = r(7032);
            class StreamHandler extends d {
                constructor(e, t, r) {
                    if (!e || typeof e !== 'object') {
                        throw new s('invalid opts');
                    }
                    const {
                        signal: A,
                        method: i,
                        opaque: a,
                        body: o,
                        onInfo: p,
                        responseHeaders: d,
                        throwOnError: u,
                    } = e;
                    try {
                        if (typeof r !== 'function') {
                            throw new s('invalid callback');
                        }
                        if (typeof t !== 'function') {
                            throw new s('invalid factory');
                        }
                        if (A && typeof A.on !== 'function' && typeof A.addEventListener !== 'function') {
                            throw new s('signal must be an EventEmitter or EventTarget');
                        }
                        if (i === 'CONNECT') {
                            throw new s('invalid method');
                        }
                        if (p && typeof p !== 'function') {
                            throw new s('invalid onInfo callback');
                        }
                        super('UNDICI_STREAM');
                    } catch (e) {
                        if (n.isStream(o)) {
                            n.destroy(o.on('error', n.nop), e);
                        }
                        throw e;
                    }
                    this.responseHeaders = d || null;
                    this.opaque = a || null;
                    this.factory = t;
                    this.callback = r;
                    this.res = null;
                    this.abort = null;
                    this.context = null;
                    this.trailers = null;
                    this.body = o;
                    this.onInfo = p || null;
                    this.throwOnError = u || false;
                    if (n.isStream(o)) {
                        o.on('error', (e) => {
                            this.onError(e);
                        });
                    }
                    l(this, A);
                }
                onConnect(e, t) {
                    if (!this.callback) {
                        throw new o();
                    }
                    this.abort = e;
                    this.context = t;
                }
                onHeaders(e, t, r, s) {
                    const {factory: o, opaque: d, context: l, callback: u, responseHeaders: c} = this;
                    const g = c === 'raw' ? n.parseRawHeaders(t) : n.parseHeaders(t);
                    if (e < 200) {
                        if (this.onInfo) {
                            this.onInfo({statusCode: e, headers: g});
                        }
                        return;
                    }
                    this.factory = null;
                    let m;
                    if (this.throwOnError && e >= 400) {
                        const r = c === 'raw' ? n.parseHeaders(t) : g;
                        const A = r['content-type'];
                        m = new i();
                        this.callback = null;
                        this.runInAsyncScope(p, null, {
                            callback: u,
                            body: m,
                            contentType: A,
                            statusCode: e,
                            statusMessage: s,
                            headers: g,
                        });
                    } else {
                        if (o === null) {
                            return;
                        }
                        m = this.runInAsyncScope(o, null, {statusCode: e, headers: g, opaque: d, context: l});
                        if (
                            !m ||
                            typeof m.write !== 'function' ||
                            typeof m.end !== 'function' ||
                            typeof m.on !== 'function'
                        ) {
                            throw new a('expected Writable');
                        }
                        A(m, {readable: false}, (e) => {
                            const {callback: t, res: r, opaque: A, trailers: i, abort: s} = this;
                            this.res = null;
                            if (e || !r.readable) {
                                n.destroy(r, e);
                            }
                            this.callback = null;
                            this.runInAsyncScope(t, null, e || null, {opaque: A, trailers: i});
                            if (e) {
                                s();
                            }
                        });
                    }
                    m.on('drain', r);
                    this.res = m;
                    const h =
                        m.writableNeedDrain !== undefined
                            ? m.writableNeedDrain
                            : m._writableState && m._writableState.needDrain;
                    return h !== true;
                }
                onData(e) {
                    const {res: t} = this;
                    return t ? t.write(e) : true;
                }
                onComplete(e) {
                    const {res: t} = this;
                    u(this);
                    if (!t) {
                        return;
                    }
                    this.trailers = n.parseHeaders(e);
                    t.end();
                }
                onError(e) {
                    const {res: t, callback: r, opaque: A, body: i} = this;
                    u(this);
                    this.factory = null;
                    if (t) {
                        this.res = null;
                        n.destroy(t, e);
                    } else if (r) {
                        this.callback = null;
                        queueMicrotask(() => {
                            this.runInAsyncScope(r, null, e, {opaque: A});
                        });
                    }
                    if (i) {
                        this.body = null;
                        n.destroy(i, e);
                    }
                }
            }
            function stream(e, t, r) {
                if (r === undefined) {
                    return new Promise((r, A) => {
                        stream.call(this, e, t, (e, t) => (e ? A(e) : r(t)));
                    });
                }
                try {
                    this.dispatch(e, new StreamHandler(e, t, r));
                } catch (t) {
                    if (typeof r !== 'function') {
                        throw t;
                    }
                    const A = e && e.opaque;
                    queueMicrotask(() => r(t, {opaque: A}));
                }
            }
            e.exports = stream;
        },
        6923: (e, t, r) => {
            'use strict';
            const {InvalidArgumentError: A, RequestAbortedError: i, SocketError: s} = r(8045);
            const {AsyncResource: a} = r(852);
            const o = r(3983);
            const {addSignal: n, removeSignal: p} = r(7032);
            const d = r(9491);
            class UpgradeHandler extends a {
                constructor(e, t) {
                    if (!e || typeof e !== 'object') {
                        throw new A('invalid opts');
                    }
                    if (typeof t !== 'function') {
                        throw new A('invalid callback');
                    }
                    const {signal: r, opaque: i, responseHeaders: s} = e;
                    if (r && typeof r.on !== 'function' && typeof r.addEventListener !== 'function') {
                        throw new A('signal must be an EventEmitter or EventTarget');
                    }
                    super('UNDICI_UPGRADE');
                    this.responseHeaders = s || null;
                    this.opaque = i || null;
                    this.callback = t;
                    this.abort = null;
                    this.context = null;
                    n(this, r);
                }
                onConnect(e, t) {
                    if (!this.callback) {
                        throw new i();
                    }
                    this.abort = e;
                    this.context = null;
                }
                onHeaders() {
                    throw new s('bad upgrade', null);
                }
                onUpgrade(e, t, r) {
                    const {callback: A, opaque: i, context: s} = this;
                    d.strictEqual(e, 101);
                    p(this);
                    this.callback = null;
                    const a = this.responseHeaders === 'raw' ? o.parseRawHeaders(t) : o.parseHeaders(t);
                    this.runInAsyncScope(A, null, null, {headers: a, socket: r, opaque: i, context: s});
                }
                onError(e) {
                    const {callback: t, opaque: r} = this;
                    p(this);
                    if (t) {
                        this.callback = null;
                        queueMicrotask(() => {
                            this.runInAsyncScope(t, null, e, {opaque: r});
                        });
                    }
                }
            }
            function upgrade(e, t) {
                if (t === undefined) {
                    return new Promise((t, r) => {
                        upgrade.call(this, e, (e, A) => (e ? r(e) : t(A)));
                    });
                }
                try {
                    const r = new UpgradeHandler(e, t);
                    this.dispatch({...e, method: e.method || 'GET', upgrade: e.protocol || 'Websocket'}, r);
                } catch (r) {
                    if (typeof t !== 'function') {
                        throw r;
                    }
                    const A = e && e.opaque;
                    queueMicrotask(() => t(r, {opaque: A}));
                }
            }
            e.exports = upgrade;
        },
        4059: (e, t, r) => {
            'use strict';
            e.exports.request = r(5448);
            e.exports.stream = r(5395);
            e.exports.pipeline = r(8752);
            e.exports.upgrade = r(6923);
            e.exports.connect = r(9744);
        },
        3858: (e, t, r) => {
            'use strict';
            const A = r(9491);
            const {Readable: i} = r(2781);
            const {RequestAbortedError: s, NotSupportedError: a, InvalidArgumentError: o} = r(8045);
            const n = r(3983);
            const {ReadableStreamFrom: p, toUSVString: d} = r(3983);
            let l;
            const u = Symbol('kConsume');
            const c = Symbol('kReading');
            const g = Symbol('kBody');
            const m = Symbol('abort');
            const h = Symbol('kContentType');
            const noop = () => {};
            e.exports = class BodyReadable extends i {
                constructor({resume: e, abort: t, contentType: r = '', highWaterMark: A = 64 * 1024}) {
                    super({autoDestroy: true, read: e, highWaterMark: A});
                    this._readableState.dataEmitted = false;
                    this[m] = t;
                    this[u] = null;
                    this[g] = null;
                    this[h] = r;
                    this[c] = false;
                }
                destroy(e) {
                    if (this.destroyed) {
                        return this;
                    }
                    if (!e && !this._readableState.endEmitted) {
                        e = new s();
                    }
                    if (e) {
                        this[m]();
                    }
                    return super.destroy(e);
                }
                emit(e, ...t) {
                    if (e === 'data') {
                        this._readableState.dataEmitted = true;
                    } else if (e === 'error') {
                        this._readableState.errorEmitted = true;
                    }
                    return super.emit(e, ...t);
                }
                on(e, ...t) {
                    if (e === 'data' || e === 'readable') {
                        this[c] = true;
                    }
                    return super.on(e, ...t);
                }
                addListener(e, ...t) {
                    return this.on(e, ...t);
                }
                off(e, ...t) {
                    const r = super.off(e, ...t);
                    if (e === 'data' || e === 'readable') {
                        this[c] = this.listenerCount('data') > 0 || this.listenerCount('readable') > 0;
                    }
                    return r;
                }
                removeListener(e, ...t) {
                    return this.off(e, ...t);
                }
                push(e) {
                    if (this[u] && e !== null && this.readableLength === 0) {
                        consumePush(this[u], e);
                        return this[c] ? super.push(e) : true;
                    }
                    return super.push(e);
                }
                async text() {
                    return consume(this, 'text');
                }
                async json() {
                    return consume(this, 'json');
                }
                async blob() {
                    return consume(this, 'blob');
                }
                async arrayBuffer() {
                    return consume(this, 'arrayBuffer');
                }
                async formData() {
                    throw new a();
                }
                get bodyUsed() {
                    return n.isDisturbed(this);
                }
                get body() {
                    if (!this[g]) {
                        this[g] = p(this);
                        if (this[u]) {
                            this[g].getReader();
                            A(this[g].locked);
                        }
                    }
                    return this[g];
                }
                dump(e) {
                    let t = e && Number.isFinite(e.limit) ? e.limit : 262144;
                    const r = e && e.signal;
                    if (r) {
                        try {
                            if (typeof r !== 'object' || !('aborted' in r)) {
                                throw new o('signal must be an AbortSignal');
                            }
                            n.throwIfAborted(r);
                        } catch (e) {
                            return Promise.reject(e);
                        }
                    }
                    if (this.closed) {
                        return Promise.resolve(null);
                    }
                    return new Promise((e, A) => {
                        const i = r
                            ? n.addAbortListener(r, () => {
                                  this.destroy();
                              })
                            : noop;
                        this.on('close', function () {
                            i();
                            if (r && r.aborted) {
                                A(
                                    r.reason ||
                                        Object.assign(new Error('The operation was aborted'), {name: 'AbortError'}),
                                );
                            } else {
                                e(null);
                            }
                        })
                            .on('error', noop)
                            .on('data', function (e) {
                                t -= e.length;
                                if (t <= 0) {
                                    this.destroy();
                                }
                            })
                            .resume();
                    });
                }
            };
            function isLocked(e) {
                return (e[g] && e[g].locked === true) || e[u];
            }
            function isUnusable(e) {
                return n.isDisturbed(e) || isLocked(e);
            }
            async function consume(e, t) {
                if (isUnusable(e)) {
                    throw new TypeError('unusable');
                }
                A(!e[u]);
                return new Promise((r, A) => {
                    e[u] = {type: t, stream: e, resolve: r, reject: A, length: 0, body: []};
                    e.on('error', function (e) {
                        consumeFinish(this[u], e);
                    }).on('close', function () {
                        if (this[u].body !== null) {
                            consumeFinish(this[u], new s());
                        }
                    });
                    process.nextTick(consumeStart, e[u]);
                });
            }
            function consumeStart(e) {
                if (e.body === null) {
                    return;
                }
                const {_readableState: t} = e.stream;
                for (const r of t.buffer) {
                    consumePush(e, r);
                }
                if (t.endEmitted) {
                    consumeEnd(this[u]);
                } else {
                    e.stream.on('end', function () {
                        consumeEnd(this[u]);
                    });
                }
                e.stream.resume();
                while (e.stream.read() != null) {}
            }
            function consumeEnd(e) {
                const {type: t, body: A, resolve: i, stream: s, length: a} = e;
                try {
                    if (t === 'text') {
                        i(d(Buffer.concat(A)));
                    } else if (t === 'json') {
                        i(JSON.parse(Buffer.concat(A)));
                    } else if (t === 'arrayBuffer') {
                        const e = new Uint8Array(a);
                        let t = 0;
                        for (const r of A) {
                            e.set(r, t);
                            t += r.byteLength;
                        }
                        i(e.buffer);
                    } else if (t === 'blob') {
                        if (!l) {
                            l = r(4300).Blob;
                        }
                        i(new l(A, {type: s[h]}));
                    }
                    consumeFinish(e);
                } catch (e) {
                    s.destroy(e);
                }
            }
            function consumePush(e, t) {
                e.length += t.length;
                e.body.push(t);
            }
            function consumeFinish(e, t) {
                if (e.body === null) {
                    return;
                }
                if (t) {
                    e.reject(t);
                } else {
                    e.resolve();
                }
                e.type = null;
                e.stream = null;
                e.resolve = null;
                e.reject = null;
                e.length = 0;
                e.body = null;
            }
        },
        7474: (e, t, r) => {
            const A = r(9491);
            const {ResponseStatusCodeError: i} = r(8045);
            const {toUSVString: s} = r(3983);
            async function getResolveErrorBodyCallback({
                callback: e,
                body: t,
                contentType: r,
                statusCode: a,
                statusMessage: o,
                headers: n,
            }) {
                A(t);
                let p = [];
                let d = 0;
                for await (const e of t) {
                    p.push(e);
                    d += e.length;
                    if (d > 128 * 1024) {
                        p = null;
                        break;
                    }
                }
                if (a === 204 || !r || !p) {
                    process.nextTick(e, new i(`Response status code ${a}${o ? `: ${o}` : ''}`, a, n));
                    return;
                }
                try {
                    if (r.startsWith('application/json')) {
                        const t = JSON.parse(s(Buffer.concat(p)));
                        process.nextTick(e, new i(`Response status code ${a}${o ? `: ${o}` : ''}`, a, n, t));
                        return;
                    }
                    if (r.startsWith('text/')) {
                        const t = s(Buffer.concat(p));
                        process.nextTick(e, new i(`Response status code ${a}${o ? `: ${o}` : ''}`, a, n, t));
                        return;
                    }
                } catch (e) {}
                process.nextTick(e, new i(`Response status code ${a}${o ? `: ${o}` : ''}`, a, n));
            }
            e.exports = {getResolveErrorBodyCallback: getResolveErrorBodyCallback};
        },
        7931: (e, t, r) => {
            'use strict';
            const {BalancedPoolMissingUpstreamError: A, InvalidArgumentError: i} = r(8045);
            const {PoolBase: s, kClients: a, kNeedDrain: o, kAddClient: n, kRemoveClient: p, kGetDispatcher: d} = r(
                3198,
            );
            const l = r(4634);
            const {kUrl: u, kInterceptors: c} = r(2785);
            const {parseOrigin: g} = r(3983);
            const m = Symbol('factory');
            const h = Symbol('options');
            const C = Symbol('kGreatestCommonDivisor');
            const Q = Symbol('kCurrentWeight');
            const B = Symbol('kIndex');
            const I = Symbol('kWeight');
            const y = Symbol('kMaxWeightPerServer');
            const w = Symbol('kErrorPenalty');
            function getGreatestCommonDivisor(e, t) {
                if (t === 0) return e;
                return getGreatestCommonDivisor(t, e % t);
            }
            function defaultFactory(e, t) {
                return new l(e, t);
            }
            class BalancedPool extends s {
                constructor(e = [], {factory: t = defaultFactory, ...r} = {}) {
                    super();
                    this[h] = r;
                    this[B] = -1;
                    this[Q] = 0;
                    this[y] = this[h].maxWeightPerServer || 100;
                    this[w] = this[h].errorPenalty || 15;
                    if (!Array.isArray(e)) {
                        e = [e];
                    }
                    if (typeof t !== 'function') {
                        throw new i('factory must be a function.');
                    }
                    this[c] =
                        r.interceptors && r.interceptors.BalancedPool && Array.isArray(r.interceptors.BalancedPool)
                            ? r.interceptors.BalancedPool
                            : [];
                    this[m] = t;
                    for (const t of e) {
                        this.addUpstream(t);
                    }
                    this._updateBalancedPoolStats();
                }
                addUpstream(e) {
                    const t = g(e).origin;
                    if (this[a].find((e) => e[u].origin === t && e.closed !== true && e.destroyed !== true)) {
                        return this;
                    }
                    const r = this[m](t, Object.assign({}, this[h]));
                    this[n](r);
                    r.on('connect', () => {
                        r[I] = Math.min(this[y], r[I] + this[w]);
                    });
                    r.on('connectionError', () => {
                        r[I] = Math.max(1, r[I] - this[w]);
                        this._updateBalancedPoolStats();
                    });
                    r.on('disconnect', (...e) => {
                        const t = e[2];
                        if (t && t.code === 'UND_ERR_SOCKET') {
                            r[I] = Math.max(1, r[I] - this[w]);
                            this._updateBalancedPoolStats();
                        }
                    });
                    for (const e of this[a]) {
                        e[I] = this[y];
                    }
                    this._updateBalancedPoolStats();
                    return this;
                }
                _updateBalancedPoolStats() {
                    this[C] = this[a].map((e) => e[I]).reduce(getGreatestCommonDivisor, 0);
                }
                removeUpstream(e) {
                    const t = g(e).origin;
                    const r = this[a].find((e) => e[u].origin === t && e.closed !== true && e.destroyed !== true);
                    if (r) {
                        this[p](r);
                    }
                    return this;
                }
                get upstreams() {
                    return this[a].filter((e) => e.closed !== true && e.destroyed !== true).map((e) => e[u].origin);
                }
                [d]() {
                    if (this[a].length === 0) {
                        throw new A();
                    }
                    const e = this[a].find((e) => !e[o] && e.closed !== true && e.destroyed !== true);
                    if (!e) {
                        return;
                    }
                    const t = this[a].map((e) => e[o]).reduce((e, t) => e && t, true);
                    if (t) {
                        return;
                    }
                    let r = 0;
                    let i = this[a].findIndex((e) => !e[o]);
                    while (r++ < this[a].length) {
                        this[B] = (this[B] + 1) % this[a].length;
                        const e = this[a][this[B]];
                        if (e[I] > this[a][i][I] && !e[o]) {
                            i = this[B];
                        }
                        if (this[B] === 0) {
                            this[Q] = this[Q] - this[C];
                            if (this[Q] <= 0) {
                                this[Q] = this[y];
                            }
                        }
                        if (e[I] >= this[Q] && !e[o]) {
                            return e;
                        }
                    }
                    this[Q] = this[a][i][I];
                    this[B] = i;
                    return this[a][i];
                }
            }
            e.exports = BalancedPool;
        },
        6101: (e, t, r) => {
            'use strict';
            const {kConstruct: A} = r(9174);
            const {urlEquals: i, fieldValues: s} = r(2396);
            const {kEnumerableProperty: a, isDisturbed: o} = r(3983);
            const {kHeadersList: n} = r(2785);
            const {webidl: p} = r(1744);
            const {Response: d, cloneResponse: l} = r(7823);
            const {Request: u} = r(8359);
            const {kState: c, kHeaders: g, kGuard: m, kRealm: h} = r(5861);
            const {fetching: C} = r(4881);
            const {urlIsHttpHttpsScheme: Q, createDeferredPromise: B, readAllBytes: I} = r(2538);
            const y = r(9491);
            const {getGlobalDispatcher: w} = r(1892);
            class Cache {
                #e;
                constructor() {
                    if (arguments[0] !== A) {
                        p.illegalConstructor();
                    }
                    this.#e = arguments[1];
                }
                async match(e, t = {}) {
                    p.brandCheck(this, Cache);
                    p.argumentLengthCheck(arguments, 1, {header: 'Cache.match'});
                    e = p.converters.RequestInfo(e);
                    t = p.converters.CacheQueryOptions(t);
                    const r = await this.matchAll(e, t);
                    if (r.length === 0) {
                        return;
                    }
                    return r[0];
                }
                async matchAll(e = undefined, t = {}) {
                    p.brandCheck(this, Cache);
                    if (e !== undefined) e = p.converters.RequestInfo(e);
                    t = p.converters.CacheQueryOptions(t);
                    let r = null;
                    if (e !== undefined) {
                        if (e instanceof u) {
                            r = e[c];
                            if (r.method !== 'GET' && !t.ignoreMethod) {
                                return [];
                            }
                        } else if (typeof e === 'string') {
                            r = new u(e)[c];
                        }
                    }
                    const A = [];
                    if (e === undefined) {
                        for (const e of this.#e) {
                            A.push(e[1]);
                        }
                    } else {
                        const e = this.#t(r, t);
                        for (const t of e) {
                            A.push(t[1]);
                        }
                    }
                    const i = [];
                    for (const e of A) {
                        const t = new d(e.body?.source ?? null);
                        const r = t[c].body;
                        t[c] = e;
                        t[c].body = r;
                        t[g][n] = e.headersList;
                        t[g][m] = 'immutable';
                        i.push(t);
                    }
                    return Object.freeze(i);
                }
                async add(e) {
                    p.brandCheck(this, Cache);
                    p.argumentLengthCheck(arguments, 1, {header: 'Cache.add'});
                    e = p.converters.RequestInfo(e);
                    const t = [e];
                    const r = this.addAll(t);
                    return await r;
                }
                async addAll(e) {
                    p.brandCheck(this, Cache);
                    p.argumentLengthCheck(arguments, 1, {header: 'Cache.addAll'});
                    e = p.converters['sequence<RequestInfo>'](e);
                    const t = [];
                    const r = [];
                    for (const t of e) {
                        if (typeof t === 'string') {
                            continue;
                        }
                        const e = t[c];
                        if (!Q(e.url) || e.method !== 'GET') {
                            throw p.errors.exception({
                                header: 'Cache.addAll',
                                message: 'Expected http/s scheme when method is not GET.',
                            });
                        }
                    }
                    const A = [];
                    for (const i of e) {
                        const e = new u(i)[c];
                        if (!Q(e.url)) {
                            throw p.errors.exception({header: 'Cache.addAll', message: 'Expected http/s scheme.'});
                        }
                        e.initiator = 'fetch';
                        e.destination = 'subresource';
                        r.push(e);
                        const a = B();
                        A.push(
                            C({
                                request: e,
                                dispatcher: w(),
                                processResponse(e) {
                                    if (e.type === 'error' || e.status === 206 || e.status < 200 || e.status > 299) {
                                        a.reject(
                                            p.errors.exception({
                                                header: 'Cache.addAll',
                                                message: 'Received an invalid status code or the request failed.',
                                            }),
                                        );
                                    } else if (e.headersList.contains('vary')) {
                                        const t = s(e.headersList.get('vary'));
                                        for (const e of t) {
                                            if (e === '*') {
                                                a.reject(
                                                    p.errors.exception({
                                                        header: 'Cache.addAll',
                                                        message: 'invalid vary field value',
                                                    }),
                                                );
                                                for (const e of A) {
                                                    e.abort();
                                                }
                                                return;
                                            }
                                        }
                                    }
                                },
                                processResponseEndOfBody(e) {
                                    if (e.aborted) {
                                        a.reject(new DOMException('aborted', 'AbortError'));
                                        return;
                                    }
                                    a.resolve(e);
                                },
                            }),
                        );
                        t.push(a.promise);
                    }
                    const i = Promise.all(t);
                    const a = await i;
                    const o = [];
                    let n = 0;
                    for (const e of a) {
                        const t = {type: 'put', request: r[n], response: e};
                        o.push(t);
                        n++;
                    }
                    const d = B();
                    let l = null;
                    try {
                        this.#r(o);
                    } catch (e) {
                        l = e;
                    }
                    queueMicrotask(() => {
                        if (l === null) {
                            d.resolve(undefined);
                        } else {
                            d.reject(l);
                        }
                    });
                    return d.promise;
                }
                async put(e, t) {
                    p.brandCheck(this, Cache);
                    p.argumentLengthCheck(arguments, 2, {header: 'Cache.put'});
                    e = p.converters.RequestInfo(e);
                    t = p.converters.Response(t);
                    let r = null;
                    if (e instanceof u) {
                        r = e[c];
                    } else {
                        r = new u(e)[c];
                    }
                    if (!Q(r.url) || r.method !== 'GET') {
                        throw p.errors.exception({
                            header: 'Cache.put',
                            message: 'Expected an http/s scheme when method is not GET',
                        });
                    }
                    const A = t[c];
                    if (A.status === 206) {
                        throw p.errors.exception({header: 'Cache.put', message: 'Got 206 status'});
                    }
                    if (A.headersList.contains('vary')) {
                        const e = s(A.headersList.get('vary'));
                        for (const t of e) {
                            if (t === '*') {
                                throw p.errors.exception({header: 'Cache.put', message: 'Got * vary field value'});
                            }
                        }
                    }
                    if (A.body && (o(A.body.stream) || A.body.stream.locked)) {
                        throw p.errors.exception({
                            header: 'Cache.put',
                            message: 'Response body is locked or disturbed',
                        });
                    }
                    const i = l(A);
                    const a = B();
                    if (A.body != null) {
                        const e = A.body.stream;
                        const t = e.getReader();
                        I(t).then(a.resolve, a.reject);
                    } else {
                        a.resolve(undefined);
                    }
                    const n = [];
                    const d = {type: 'put', request: r, response: i};
                    n.push(d);
                    const g = await a.promise;
                    if (i.body != null) {
                        i.body.source = g;
                    }
                    const m = B();
                    let h = null;
                    try {
                        this.#r(n);
                    } catch (e) {
                        h = e;
                    }
                    queueMicrotask(() => {
                        if (h === null) {
                            m.resolve();
                        } else {
                            m.reject(h);
                        }
                    });
                    return m.promise;
                }
                async delete(e, t = {}) {
                    p.brandCheck(this, Cache);
                    p.argumentLengthCheck(arguments, 1, {header: 'Cache.delete'});
                    e = p.converters.RequestInfo(e);
                    t = p.converters.CacheQueryOptions(t);
                    let r = null;
                    if (e instanceof u) {
                        r = e[c];
                        if (r.method !== 'GET' && !t.ignoreMethod) {
                            return false;
                        }
                    } else {
                        y(typeof e === 'string');
                        r = new u(e)[c];
                    }
                    const A = [];
                    const i = {type: 'delete', request: r, options: t};
                    A.push(i);
                    const s = B();
                    let a = null;
                    let o;
                    try {
                        o = this.#r(A);
                    } catch (e) {
                        a = e;
                    }
                    queueMicrotask(() => {
                        if (a === null) {
                            s.resolve(!!o?.length);
                        } else {
                            s.reject(a);
                        }
                    });
                    return s.promise;
                }
                async keys(e = undefined, t = {}) {
                    p.brandCheck(this, Cache);
                    if (e !== undefined) e = p.converters.RequestInfo(e);
                    t = p.converters.CacheQueryOptions(t);
                    let r = null;
                    if (e !== undefined) {
                        if (e instanceof u) {
                            r = e[c];
                            if (r.method !== 'GET' && !t.ignoreMethod) {
                                return [];
                            }
                        } else if (typeof e === 'string') {
                            r = new u(e)[c];
                        }
                    }
                    const A = B();
                    const i = [];
                    if (e === undefined) {
                        for (const e of this.#e) {
                            i.push(e[0]);
                        }
                    } else {
                        const e = this.#t(r, t);
                        for (const t of e) {
                            i.push(t[0]);
                        }
                    }
                    queueMicrotask(() => {
                        const e = [];
                        for (const t of i) {
                            const r = new u('https://a');
                            r[c] = t;
                            r[g][n] = t.headersList;
                            r[g][m] = 'immutable';
                            r[h] = t.client;
                            e.push(r);
                        }
                        A.resolve(Object.freeze(e));
                    });
                    return A.promise;
                }
                #r(e) {
                    const t = this.#e;
                    const r = [...t];
                    const A = [];
                    const i = [];
                    try {
                        for (const r of e) {
                            if (r.type !== 'delete' && r.type !== 'put') {
                                throw p.errors.exception({
                                    header: 'Cache.#batchCacheOperations',
                                    message: 'operation type does not match "delete" or "put"',
                                });
                            }
                            if (r.type === 'delete' && r.response != null) {
                                throw p.errors.exception({
                                    header: 'Cache.#batchCacheOperations',
                                    message: 'delete operation should not have an associated response',
                                });
                            }
                            if (this.#t(r.request, r.options, A).length) {
                                throw new DOMException('???', 'InvalidStateError');
                            }
                            let e;
                            if (r.type === 'delete') {
                                e = this.#t(r.request, r.options);
                                if (e.length === 0) {
                                    return [];
                                }
                                for (const r of e) {
                                    const e = t.indexOf(r);
                                    y(e !== -1);
                                    t.splice(e, 1);
                                }
                            } else if (r.type === 'put') {
                                if (r.response == null) {
                                    throw p.errors.exception({
                                        header: 'Cache.#batchCacheOperations',
                                        message: 'put operation should have an associated response',
                                    });
                                }
                                const i = r.request;
                                if (!Q(i.url)) {
                                    throw p.errors.exception({
                                        header: 'Cache.#batchCacheOperations',
                                        message: 'expected http or https scheme',
                                    });
                                }
                                if (i.method !== 'GET') {
                                    throw p.errors.exception({
                                        header: 'Cache.#batchCacheOperations',
                                        message: 'not get method',
                                    });
                                }
                                if (r.options != null) {
                                    throw p.errors.exception({
                                        header: 'Cache.#batchCacheOperations',
                                        message: 'options must not be defined',
                                    });
                                }
                                e = this.#t(r.request);
                                for (const r of e) {
                                    const e = t.indexOf(r);
                                    y(e !== -1);
                                    t.splice(e, 1);
                                }
                                t.push([r.request, r.response]);
                                A.push([r.request, r.response]);
                            }
                            i.push([r.request, r.response]);
                        }
                        return i;
                    } catch (e) {
                        this.#e.length = 0;
                        this.#e = r;
                        throw e;
                    }
                }
                #t(e, t, r) {
                    const A = [];
                    const i = r ?? this.#e;
                    for (const r of i) {
                        const [i, s] = r;
                        if (this.#A(e, i, s, t)) {
                            A.push(r);
                        }
                    }
                    return A;
                }
                #A(e, t, r = null, A) {
                    const a = new URL(e.url);
                    const o = new URL(t.url);
                    if (A?.ignoreSearch) {
                        o.search = '';
                        a.search = '';
                    }
                    if (!i(a, o, true)) {
                        return false;
                    }
                    if (r == null || A?.ignoreVary || !r.headersList.contains('vary')) {
                        return true;
                    }
                    const n = s(r.headersList.get('vary'));
                    for (const r of n) {
                        if (r === '*') {
                            return false;
                        }
                        const A = t.headersList.get(r);
                        const i = e.headersList.get(r);
                        if (A !== i) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            Object.defineProperties(Cache.prototype, {
                [Symbol.toStringTag]: {value: 'Cache', configurable: true},
                match: a,
                matchAll: a,
                add: a,
                addAll: a,
                put: a,
                delete: a,
                keys: a,
            });
            const b = [
                {key: 'ignoreSearch', converter: p.converters.boolean, defaultValue: false},
                {key: 'ignoreMethod', converter: p.converters.boolean, defaultValue: false},
                {key: 'ignoreVary', converter: p.converters.boolean, defaultValue: false},
            ];
            p.converters.CacheQueryOptions = p.dictionaryConverter(b);
            p.converters.MultiCacheQueryOptions = p.dictionaryConverter([
                ...b,
                {key: 'cacheName', converter: p.converters.DOMString},
            ]);
            p.converters.Response = p.interfaceConverter(d);
            p.converters['sequence<RequestInfo>'] = p.sequenceConverter(p.converters.RequestInfo);
            e.exports = {Cache: Cache};
        },
        7907: (e, t, r) => {
            'use strict';
            const {kConstruct: A} = r(9174);
            const {Cache: i} = r(6101);
            const {webidl: s} = r(1744);
            const {kEnumerableProperty: a} = r(3983);
            class CacheStorage {
                #i = new Map();
                constructor() {
                    if (arguments[0] !== A) {
                        s.illegalConstructor();
                    }
                }
                async match(e, t = {}) {
                    s.brandCheck(this, CacheStorage);
                    s.argumentLengthCheck(arguments, 1, {header: 'CacheStorage.match'});
                    e = s.converters.RequestInfo(e);
                    t = s.converters.MultiCacheQueryOptions(t);
                    if (t.cacheName != null) {
                        if (this.#i.has(t.cacheName)) {
                            const r = this.#i.get(t.cacheName);
                            const s = new i(A, r);
                            return await s.match(e, t);
                        }
                    } else {
                        for (const r of this.#i.values()) {
                            const s = new i(A, r);
                            const a = await s.match(e, t);
                            if (a !== undefined) {
                                return a;
                            }
                        }
                    }
                }
                async has(e) {
                    s.brandCheck(this, CacheStorage);
                    s.argumentLengthCheck(arguments, 1, {header: 'CacheStorage.has'});
                    e = s.converters.DOMString(e);
                    return this.#i.has(e);
                }
                async open(e) {
                    s.brandCheck(this, CacheStorage);
                    s.argumentLengthCheck(arguments, 1, {header: 'CacheStorage.open'});
                    e = s.converters.DOMString(e);
                    if (this.#i.has(e)) {
                        const t = this.#i.get(e);
                        return new i(A, t);
                    }
                    const t = [];
                    this.#i.set(e, t);
                    return new i(A, t);
                }
                async delete(e) {
                    s.brandCheck(this, CacheStorage);
                    s.argumentLengthCheck(arguments, 1, {header: 'CacheStorage.delete'});
                    e = s.converters.DOMString(e);
                    return this.#i.delete(e);
                }
                async keys() {
                    s.brandCheck(this, CacheStorage);
                    const e = this.#i.keys();
                    return [...e];
                }
            }
            Object.defineProperties(CacheStorage.prototype, {
                [Symbol.toStringTag]: {value: 'CacheStorage', configurable: true},
                match: a,
                has: a,
                open: a,
                delete: a,
                keys: a,
            });
            e.exports = {CacheStorage: CacheStorage};
        },
        9174: (e, t, r) => {
            'use strict';
            e.exports = {kConstruct: r(2785).kConstruct};
        },
        2396: (e, t, r) => {
            'use strict';
            const A = r(9491);
            const {URLSerializer: i} = r(685);
            const {isValidHeaderName: s} = r(2538);
            function urlEquals(e, t, r = false) {
                const A = i(e, r);
                const s = i(t, r);
                return A === s;
            }
            function fieldValues(e) {
                A(e !== null);
                const t = [];
                for (let r of e.split(',')) {
                    r = r.trim();
                    if (!r.length) {
                        continue;
                    } else if (!s(r)) {
                        continue;
                    }
                    t.push(r);
                }
                return t;
            }
            e.exports = {urlEquals: urlEquals, fieldValues: fieldValues};
        },
        3598: (e, t, r) => {
            'use strict';
            const A = r(9491);
            const i = r(1808);
            const s = r(3685);
            const {pipeline: a} = r(2781);
            const o = r(3983);
            const n = r(9459);
            const p = r(2905);
            const d = r(4839);
            const {
                RequestContentLengthMismatchError: l,
                ResponseContentLengthMismatchError: u,
                InvalidArgumentError: c,
                RequestAbortedError: g,
                HeadersTimeoutError: m,
                HeadersOverflowError: h,
                SocketError: C,
                InformationalError: Q,
                BodyTimeoutError: B,
                HTTPParserError: I,
                ResponseExceededMaxSizeError: y,
                ClientDestroyedError: w,
            } = r(8045);
            const b = r(2067);
            const {
                kUrl: v,
                kReset: D,
                kServerName: R,
                kClient: k,
                kBusy: S,
                kParser: N,
                kConnect: _,
                kBlocking: T,
                kResuming: q,
                kRunning: U,
                kPending: L,
                kSize: M,
                kWriting: G,
                kQueue: V,
                kConnected: H,
                kConnecting: O,
                kNeedDrain: P,
                kNoRef: Y,
                kKeepAliveDefaultTimeout: x,
                kHostHeader: J,
                kPendingIdx: j,
                kRunningIdx: W,
                kError: z,
                kPipelining: Z,
                kSocket: X,
                kKeepAliveTimeoutValue: K,
                kMaxHeadersSize: $,
                kKeepAliveMaxTimeout: ee,
                kKeepAliveTimeoutThreshold: te,
                kHeadersTimeout: re,
                kBodyTimeout: Ae,
                kStrictContentLength: ie,
                kConnector: se,
                kMaxRedirections: ae,
                kMaxRequests: oe,
                kCounter: ne,
                kClose: pe,
                kDestroy: de,
                kDispatch: le,
                kInterceptors: ue,
                kLocalAddress: ce,
                kMaxResponseSize: ge,
                kHTTPConnVersion: me,
                kHost: he,
                kHTTP2Session: Ee,
                kHTTP2SessionState: Ce,
                kHTTP2BuildRequest: Qe,
                kHTTP2CopyHeaders: Be,
                kHTTP1BuildRequest: fe,
            } = r(2785);
            let Ie;
            try {
                Ie = r(5158);
            } catch {
                Ie = {constants: {}};
            }
            const {
                constants: {
                    HTTP2_HEADER_AUTHORITY: ye,
                    HTTP2_HEADER_METHOD: we,
                    HTTP2_HEADER_PATH: be,
                    HTTP2_HEADER_SCHEME: ve,
                    HTTP2_HEADER_CONTENT_LENGTH: De,
                    HTTP2_HEADER_EXPECT: Re,
                    HTTP2_HEADER_STATUS: ke,
                },
            } = Ie;
            let Se = false;
            const Ne = Buffer[Symbol.species];
            const Fe = Symbol('kClosedResolve');
            const _e = {};
            try {
                const e = r(7643);
                _e.sendHeaders = e.channel('undici:client:sendHeaders');
                _e.beforeConnect = e.channel('undici:client:beforeConnect');
                _e.connectError = e.channel('undici:client:connectError');
                _e.connected = e.channel('undici:client:connected');
            } catch {
                _e.sendHeaders = {hasSubscribers: false};
                _e.beforeConnect = {hasSubscribers: false};
                _e.connectError = {hasSubscribers: false};
                _e.connected = {hasSubscribers: false};
            }
            class Client extends d {
                constructor(
                    e,
                    {
                        interceptors: t,
                        maxHeaderSize: r,
                        headersTimeout: A,
                        socketTimeout: a,
                        requestTimeout: n,
                        connectTimeout: p,
                        bodyTimeout: d,
                        idleTimeout: l,
                        keepAlive: u,
                        keepAliveTimeout: g,
                        maxKeepAliveTimeout: m,
                        keepAliveMaxTimeout: h,
                        keepAliveTimeoutThreshold: C,
                        socketPath: Q,
                        pipelining: B,
                        tls: I,
                        strictContentLength: y,
                        maxCachedSessions: w,
                        maxRedirections: D,
                        connect: k,
                        maxRequestsPerClient: S,
                        localAddress: N,
                        maxResponseSize: _,
                        autoSelectFamily: T,
                        autoSelectFamilyAttemptTimeout: U,
                        allowH2: L,
                        maxConcurrentStreams: M,
                    } = {},
                ) {
                    super();
                    if (u !== undefined) {
                        throw new c('unsupported keepAlive, use pipelining=0 instead');
                    }
                    if (a !== undefined) {
                        throw new c('unsupported socketTimeout, use headersTimeout & bodyTimeout instead');
                    }
                    if (n !== undefined) {
                        throw new c('unsupported requestTimeout, use headersTimeout & bodyTimeout instead');
                    }
                    if (l !== undefined) {
                        throw new c('unsupported idleTimeout, use keepAliveTimeout instead');
                    }
                    if (m !== undefined) {
                        throw new c('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead');
                    }
                    if (r != null && !Number.isFinite(r)) {
                        throw new c('invalid maxHeaderSize');
                    }
                    if (Q != null && typeof Q !== 'string') {
                        throw new c('invalid socketPath');
                    }
                    if (p != null && (!Number.isFinite(p) || p < 0)) {
                        throw new c('invalid connectTimeout');
                    }
                    if (g != null && (!Number.isFinite(g) || g <= 0)) {
                        throw new c('invalid keepAliveTimeout');
                    }
                    if (h != null && (!Number.isFinite(h) || h <= 0)) {
                        throw new c('invalid keepAliveMaxTimeout');
                    }
                    if (C != null && !Number.isFinite(C)) {
                        throw new c('invalid keepAliveTimeoutThreshold');
                    }
                    if (A != null && (!Number.isInteger(A) || A < 0)) {
                        throw new c('headersTimeout must be a positive integer or zero');
                    }
                    if (d != null && (!Number.isInteger(d) || d < 0)) {
                        throw new c('bodyTimeout must be a positive integer or zero');
                    }
                    if (k != null && typeof k !== 'function' && typeof k !== 'object') {
                        throw new c('connect must be a function or an object');
                    }
                    if (D != null && (!Number.isInteger(D) || D < 0)) {
                        throw new c('maxRedirections must be a positive number');
                    }
                    if (S != null && (!Number.isInteger(S) || S < 0)) {
                        throw new c('maxRequestsPerClient must be a positive number');
                    }
                    if (N != null && (typeof N !== 'string' || i.isIP(N) === 0)) {
                        throw new c('localAddress must be valid string IP address');
                    }
                    if (_ != null && (!Number.isInteger(_) || _ < -1)) {
                        throw new c('maxResponseSize must be a positive number');
                    }
                    if (U != null && (!Number.isInteger(U) || U < -1)) {
                        throw new c('autoSelectFamilyAttemptTimeout must be a positive number');
                    }
                    if (L != null && typeof L !== 'boolean') {
                        throw new c('allowH2 must be a valid boolean value');
                    }
                    if (M != null && (typeof M !== 'number' || M < 1)) {
                        throw new c('maxConcurrentStreams must be a possitive integer, greater than 0');
                    }
                    if (typeof k !== 'function') {
                        k = b({
                            ...I,
                            maxCachedSessions: w,
                            allowH2: L,
                            socketPath: Q,
                            timeout: p,
                            ...(o.nodeHasAutoSelectFamily && T
                                ? {autoSelectFamily: T, autoSelectFamilyAttemptTimeout: U}
                                : undefined),
                            ...k,
                        });
                    }
                    this[ue] = t && t.Client && Array.isArray(t.Client) ? t.Client : [qe({maxRedirections: D})];
                    this[v] = o.parseOrigin(e);
                    this[se] = k;
                    this[X] = null;
                    this[Z] = B != null ? B : 1;
                    this[$] = r || s.maxHeaderSize;
                    this[x] = g == null ? 4e3 : g;
                    this[ee] = h == null ? 6e5 : h;
                    this[te] = C == null ? 1e3 : C;
                    this[K] = this[x];
                    this[R] = null;
                    this[ce] = N != null ? N : null;
                    this[q] = 0;
                    this[P] = 0;
                    this[J] = `host: ${this[v].hostname}${this[v].port ? `:${this[v].port}` : ''}\r\n`;
                    this[Ae] = d != null ? d : 3e5;
                    this[re] = A != null ? A : 3e5;
                    this[ie] = y == null ? true : y;
                    this[ae] = D;
                    this[oe] = S;
                    this[Fe] = null;
                    this[ge] = _ > -1 ? _ : -1;
                    this[me] = 'h1';
                    this[Ee] = null;
                    this[Ce] = !L ? null : {openStreams: 0, maxConcurrentStreams: M != null ? M : 100};
                    this[he] = `${this[v].hostname}${this[v].port ? `:${this[v].port}` : ''}`;
                    this[V] = [];
                    this[W] = 0;
                    this[j] = 0;
                }
                get pipelining() {
                    return this[Z];
                }
                set pipelining(e) {
                    this[Z] = e;
                    resume(this, true);
                }
                get [L]() {
                    return this[V].length - this[j];
                }
                get [U]() {
                    return this[j] - this[W];
                }
                get [M]() {
                    return this[V].length - this[W];
                }
                get [H]() {
                    return !!this[X] && !this[O] && !this[X].destroyed;
                }
                get [S]() {
                    const e = this[X];
                    return (e && (e[D] || e[G] || e[T])) || this[M] >= (this[Z] || 1) || this[L] > 0;
                }
                [_](e) {
                    connect(this);
                    this.once('connect', e);
                }
                [le](e, t) {
                    const r = e.origin || this[v].origin;
                    const A = this[me] === 'h2' ? p[Qe](r, e, t) : p[fe](r, e, t);
                    this[V].push(A);
                    if (this[q]) {
                    } else if (o.bodyLength(A.body) == null && o.isIterable(A.body)) {
                        this[q] = 1;
                        process.nextTick(resume, this);
                    } else {
                        resume(this, true);
                    }
                    if (this[q] && this[P] !== 2 && this[S]) {
                        this[P] = 2;
                    }
                    return this[P] < 2;
                }
                async [pe]() {
                    return new Promise((e) => {
                        if (!this[M]) {
                            e(null);
                        } else {
                            this[Fe] = e;
                        }
                    });
                }
                async [de](e) {
                    return new Promise((t) => {
                        const r = this[V].splice(this[j]);
                        for (let t = 0; t < r.length; t++) {
                            const A = r[t];
                            errorRequest(this, A, e);
                        }
                        const callback = () => {
                            if (this[Fe]) {
                                this[Fe]();
                                this[Fe] = null;
                            }
                            t();
                        };
                        if (this[Ee] != null) {
                            o.destroy(this[Ee], e);
                            this[Ee] = null;
                            this[Ce] = null;
                        }
                        if (!this[X]) {
                            queueMicrotask(callback);
                        } else {
                            o.destroy(this[X].on('close', callback), e);
                        }
                        resume(this);
                    });
                }
            }
            function onHttp2SessionError(e) {
                A(e.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');
                this[X][z] = e;
                onError(this[k], e);
            }
            function onHttp2FrameError(e, t, r) {
                const A = new Q(`HTTP/2: "frameError" received - type ${e}, code ${t}`);
                if (r === 0) {
                    this[X][z] = A;
                    onError(this[k], A);
                }
            }
            function onHttp2SessionEnd() {
                o.destroy(this, new C('other side closed'));
                o.destroy(this[X], new C('other side closed'));
            }
            function onHTTP2GoAway(e) {
                const t = this[k];
                const r = new Q(`HTTP/2: "GOAWAY" frame received with code ${e}`);
                t[X] = null;
                t[Ee] = null;
                if (t.destroyed) {
                    A(this[L] === 0);
                    const e = t[V].splice(t[W]);
                    for (let t = 0; t < e.length; t++) {
                        const A = e[t];
                        errorRequest(this, A, r);
                    }
                } else if (t[U] > 0) {
                    const e = t[V][t[W]];
                    t[V][t[W]++] = null;
                    errorRequest(t, e, r);
                }
                t[j] = t[W];
                A(t[U] === 0);
                t.emit('disconnect', t[v], [t], r);
                resume(t);
            }
            const Te = r(953);
            const qe = r(8861);
            const Ue = Buffer.alloc(0);
            async function lazyllhttp() {
                const e = process.env.JEST_WORKER_ID ? r(1145) : undefined;
                let t;
                try {
                    t = await WebAssembly.compile(Buffer.from(r(5627), 'base64'));
                } catch (A) {
                    t = await WebAssembly.compile(Buffer.from(e || r(1145), 'base64'));
                }
                return await WebAssembly.instantiate(t, {
                    env: {
                        wasm_on_url: (e, t, r) => 0,
                        wasm_on_status: (e, t, r) => {
                            A.strictEqual(Ge.ptr, e);
                            const i = t - Oe + Ve.byteOffset;
                            return Ge.onStatus(new Ne(Ve.buffer, i, r)) || 0;
                        },
                        wasm_on_message_begin: (e) => {
                            A.strictEqual(Ge.ptr, e);
                            return Ge.onMessageBegin() || 0;
                        },
                        wasm_on_header_field: (e, t, r) => {
                            A.strictEqual(Ge.ptr, e);
                            const i = t - Oe + Ve.byteOffset;
                            return Ge.onHeaderField(new Ne(Ve.buffer, i, r)) || 0;
                        },
                        wasm_on_header_value: (e, t, r) => {
                            A.strictEqual(Ge.ptr, e);
                            const i = t - Oe + Ve.byteOffset;
                            return Ge.onHeaderValue(new Ne(Ve.buffer, i, r)) || 0;
                        },
                        wasm_on_headers_complete: (e, t, r, i) => {
                            A.strictEqual(Ge.ptr, e);
                            return Ge.onHeadersComplete(t, Boolean(r), Boolean(i)) || 0;
                        },
                        wasm_on_body: (e, t, r) => {
                            A.strictEqual(Ge.ptr, e);
                            const i = t - Oe + Ve.byteOffset;
                            return Ge.onBody(new Ne(Ve.buffer, i, r)) || 0;
                        },
                        wasm_on_message_complete: (e) => {
                            A.strictEqual(Ge.ptr, e);
                            return Ge.onMessageComplete() || 0;
                        },
                    },
                });
            }
            let Le = null;
            let Me = lazyllhttp();
            Me.catch();
            let Ge = null;
            let Ve = null;
            let He = 0;
            let Oe = null;
            const Pe = 1;
            const Ye = 2;
            const xe = 3;
            class Parser {
                constructor(e, t, {exports: r}) {
                    A(Number.isFinite(e[$]) && e[$] > 0);
                    this.llhttp = r;
                    this.ptr = this.llhttp.llhttp_alloc(Te.TYPE.RESPONSE);
                    this.client = e;
                    this.socket = t;
                    this.timeout = null;
                    this.timeoutValue = null;
                    this.timeoutType = null;
                    this.statusCode = null;
                    this.statusText = '';
                    this.upgrade = false;
                    this.headers = [];
                    this.headersSize = 0;
                    this.headersMaxSize = e[$];
                    this.shouldKeepAlive = false;
                    this.paused = false;
                    this.resume = this.resume.bind(this);
                    this.bytesRead = 0;
                    this.keepAlive = '';
                    this.contentLength = '';
                    this.connection = '';
                    this.maxResponseSize = e[ge];
                }
                setTimeout(e, t) {
                    this.timeoutType = t;
                    if (e !== this.timeoutValue) {
                        n.clearTimeout(this.timeout);
                        if (e) {
                            this.timeout = n.setTimeout(onParserTimeout, e, this);
                            if (this.timeout.unref) {
                                this.timeout.unref();
                            }
                        } else {
                            this.timeout = null;
                        }
                        this.timeoutValue = e;
                    } else if (this.timeout) {
                        if (this.timeout.refresh) {
                            this.timeout.refresh();
                        }
                    }
                }
                resume() {
                    if (this.socket.destroyed || !this.paused) {
                        return;
                    }
                    A(this.ptr != null);
                    A(Ge == null);
                    this.llhttp.llhttp_resume(this.ptr);
                    A(this.timeoutType === Ye);
                    if (this.timeout) {
                        if (this.timeout.refresh) {
                            this.timeout.refresh();
                        }
                    }
                    this.paused = false;
                    this.execute(this.socket.read() || Ue);
                    this.readMore();
                }
                readMore() {
                    while (!this.paused && this.ptr) {
                        const e = this.socket.read();
                        if (e === null) {
                            break;
                        }
                        this.execute(e);
                    }
                }
                execute(e) {
                    A(this.ptr != null);
                    A(Ge == null);
                    A(!this.paused);
                    const {socket: t, llhttp: r} = this;
                    if (e.length > He) {
                        if (Oe) {
                            r.free(Oe);
                        }
                        He = Math.ceil(e.length / 4096) * 4096;
                        Oe = r.malloc(He);
                    }
                    new Uint8Array(r.memory.buffer, Oe, He).set(e);
                    try {
                        let A;
                        try {
                            Ve = e;
                            Ge = this;
                            A = r.llhttp_execute(this.ptr, Oe, e.length);
                        } catch (e) {
                            throw e;
                        } finally {
                            Ge = null;
                            Ve = null;
                        }
                        const i = r.llhttp_get_error_pos(this.ptr) - Oe;
                        if (A === Te.ERROR.PAUSED_UPGRADE) {
                            this.onUpgrade(e.slice(i));
                        } else if (A === Te.ERROR.PAUSED) {
                            this.paused = true;
                            t.unshift(e.slice(i));
                        } else if (A !== Te.ERROR.OK) {
                            const t = r.llhttp_get_error_reason(this.ptr);
                            let s = '';
                            if (t) {
                                const e = new Uint8Array(r.memory.buffer, t).indexOf(0);
                                s =
                                    'Response does not match the HTTP/1.1 protocol (' +
                                    Buffer.from(r.memory.buffer, t, e).toString() +
                                    ')';
                            }
                            throw new I(s, Te.ERROR[A], e.slice(i));
                        }
                    } catch (e) {
                        o.destroy(t, e);
                    }
                }
                destroy() {
                    A(this.ptr != null);
                    A(Ge == null);
                    this.llhttp.llhttp_free(this.ptr);
                    this.ptr = null;
                    n.clearTimeout(this.timeout);
                    this.timeout = null;
                    this.timeoutValue = null;
                    this.timeoutType = null;
                    this.paused = false;
                }
                onStatus(e) {
                    this.statusText = e.toString();
                }
                onMessageBegin() {
                    const {socket: e, client: t} = this;
                    if (e.destroyed) {
                        return -1;
                    }
                    const r = t[V][t[W]];
                    if (!r) {
                        return -1;
                    }
                }
                onHeaderField(e) {
                    const t = this.headers.length;
                    if ((t & 1) === 0) {
                        this.headers.push(e);
                    } else {
                        this.headers[t - 1] = Buffer.concat([this.headers[t - 1], e]);
                    }
                    this.trackHeader(e.length);
                }
                onHeaderValue(e) {
                    let t = this.headers.length;
                    if ((t & 1) === 1) {
                        this.headers.push(e);
                        t += 1;
                    } else {
                        this.headers[t - 1] = Buffer.concat([this.headers[t - 1], e]);
                    }
                    const r = this.headers[t - 2];
                    if (r.length === 10 && r.toString().toLowerCase() === 'keep-alive') {
                        this.keepAlive += e.toString();
                    } else if (r.length === 10 && r.toString().toLowerCase() === 'connection') {
                        this.connection += e.toString();
                    } else if (r.length === 14 && r.toString().toLowerCase() === 'content-length') {
                        this.contentLength += e.toString();
                    }
                    this.trackHeader(e.length);
                }
                trackHeader(e) {
                    this.headersSize += e;
                    if (this.headersSize >= this.headersMaxSize) {
                        o.destroy(this.socket, new h());
                    }
                }
                onUpgrade(e) {
                    const {upgrade: t, client: r, socket: i, headers: s, statusCode: a} = this;
                    A(t);
                    const n = r[V][r[W]];
                    A(n);
                    A(!i.destroyed);
                    A(i === r[X]);
                    A(!this.paused);
                    A(n.upgrade || n.method === 'CONNECT');
                    this.statusCode = null;
                    this.statusText = '';
                    this.shouldKeepAlive = null;
                    A(this.headers.length % 2 === 0);
                    this.headers = [];
                    this.headersSize = 0;
                    i.unshift(e);
                    i[N].destroy();
                    i[N] = null;
                    i[k] = null;
                    i[z] = null;
                    i.removeListener('error', onSocketError)
                        .removeListener('readable', onSocketReadable)
                        .removeListener('end', onSocketEnd)
                        .removeListener('close', onSocketClose);
                    r[X] = null;
                    r[V][r[W]++] = null;
                    r.emit('disconnect', r[v], [r], new Q('upgrade'));
                    try {
                        n.onUpgrade(a, s, i);
                    } catch (e) {
                        o.destroy(i, e);
                    }
                    resume(r);
                }
                onHeadersComplete(e, t, r) {
                    const {client: i, socket: s, headers: a, statusText: n} = this;
                    if (s.destroyed) {
                        return -1;
                    }
                    const p = i[V][i[W]];
                    if (!p) {
                        return -1;
                    }
                    A(!this.upgrade);
                    A(this.statusCode < 200);
                    if (e === 100) {
                        o.destroy(s, new C('bad response', o.getSocketInfo(s)));
                        return -1;
                    }
                    if (t && !p.upgrade) {
                        o.destroy(s, new C('bad upgrade', o.getSocketInfo(s)));
                        return -1;
                    }
                    A.strictEqual(this.timeoutType, Pe);
                    this.statusCode = e;
                    this.shouldKeepAlive =
                        r || (p.method === 'HEAD' && !s[D] && this.connection.toLowerCase() === 'keep-alive');
                    if (this.statusCode >= 200) {
                        const e = p.bodyTimeout != null ? p.bodyTimeout : i[Ae];
                        this.setTimeout(e, Ye);
                    } else if (this.timeout) {
                        if (this.timeout.refresh) {
                            this.timeout.refresh();
                        }
                    }
                    if (p.method === 'CONNECT') {
                        A(i[U] === 1);
                        this.upgrade = true;
                        return 2;
                    }
                    if (t) {
                        A(i[U] === 1);
                        this.upgrade = true;
                        return 2;
                    }
                    A(this.headers.length % 2 === 0);
                    this.headers = [];
                    this.headersSize = 0;
                    if (this.shouldKeepAlive && i[Z]) {
                        const e = this.keepAlive ? o.parseKeepAliveTimeout(this.keepAlive) : null;
                        if (e != null) {
                            const t = Math.min(e - i[te], i[ee]);
                            if (t <= 0) {
                                s[D] = true;
                            } else {
                                i[K] = t;
                            }
                        } else {
                            i[K] = i[x];
                        }
                    } else {
                        s[D] = true;
                    }
                    const d = p.onHeaders(e, a, this.resume, n) === false;
                    if (p.aborted) {
                        return -1;
                    }
                    if (p.method === 'HEAD') {
                        return 1;
                    }
                    if (e < 200) {
                        return 1;
                    }
                    if (s[T]) {
                        s[T] = false;
                        resume(i);
                    }
                    return d ? Te.ERROR.PAUSED : 0;
                }
                onBody(e) {
                    const {client: t, socket: r, statusCode: i, maxResponseSize: s} = this;
                    if (r.destroyed) {
                        return -1;
                    }
                    const a = t[V][t[W]];
                    A(a);
                    A.strictEqual(this.timeoutType, Ye);
                    if (this.timeout) {
                        if (this.timeout.refresh) {
                            this.timeout.refresh();
                        }
                    }
                    A(i >= 200);
                    if (s > -1 && this.bytesRead + e.length > s) {
                        o.destroy(r, new y());
                        return -1;
                    }
                    this.bytesRead += e.length;
                    if (a.onData(e) === false) {
                        return Te.ERROR.PAUSED;
                    }
                }
                onMessageComplete() {
                    const {
                        client: e,
                        socket: t,
                        statusCode: r,
                        upgrade: i,
                        headers: s,
                        contentLength: a,
                        bytesRead: n,
                        shouldKeepAlive: p,
                    } = this;
                    if (t.destroyed && (!r || p)) {
                        return -1;
                    }
                    if (i) {
                        return;
                    }
                    const d = e[V][e[W]];
                    A(d);
                    A(r >= 100);
                    this.statusCode = null;
                    this.statusText = '';
                    this.bytesRead = 0;
                    this.contentLength = '';
                    this.keepAlive = '';
                    this.connection = '';
                    A(this.headers.length % 2 === 0);
                    this.headers = [];
                    this.headersSize = 0;
                    if (r < 200) {
                        return;
                    }
                    if (d.method !== 'HEAD' && a && n !== parseInt(a, 10)) {
                        o.destroy(t, new u());
                        return -1;
                    }
                    d.onComplete(s);
                    e[V][e[W]++] = null;
                    if (t[G]) {
                        A.strictEqual(e[U], 0);
                        o.destroy(t, new Q('reset'));
                        return Te.ERROR.PAUSED;
                    } else if (!p) {
                        o.destroy(t, new Q('reset'));
                        return Te.ERROR.PAUSED;
                    } else if (t[D] && e[U] === 0) {
                        o.destroy(t, new Q('reset'));
                        return Te.ERROR.PAUSED;
                    } else if (e[Z] === 1) {
                        setImmediate(resume, e);
                    } else {
                        resume(e);
                    }
                }
            }
            function onParserTimeout(e) {
                const {socket: t, timeoutType: r, client: i} = e;
                if (r === Pe) {
                    if (!t[G] || t.writableNeedDrain || i[U] > 1) {
                        A(!e.paused, 'cannot be paused while waiting for headers');
                        o.destroy(t, new m());
                    }
                } else if (r === Ye) {
                    if (!e.paused) {
                        o.destroy(t, new B());
                    }
                } else if (r === xe) {
                    A(i[U] === 0 && i[K]);
                    o.destroy(t, new Q('socket idle timeout'));
                }
            }
            function onSocketReadable() {
                const {[N]: e} = this;
                if (e) {
                    e.readMore();
                }
            }
            function onSocketError(e) {
                const {[k]: t, [N]: r} = this;
                A(e.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');
                if (t[me] !== 'h2') {
                    if (e.code === 'ECONNRESET' && r.statusCode && !r.shouldKeepAlive) {
                        r.onMessageComplete();
                        return;
                    }
                }
                this[z] = e;
                onError(this[k], e);
            }
            function onError(e, t) {
                if (e[U] === 0 && t.code !== 'UND_ERR_INFO' && t.code !== 'UND_ERR_SOCKET') {
                    A(e[j] === e[W]);
                    const r = e[V].splice(e[W]);
                    for (let A = 0; A < r.length; A++) {
                        const i = r[A];
                        errorRequest(e, i, t);
                    }
                    A(e[M] === 0);
                }
            }
            function onSocketEnd() {
                const {[N]: e, [k]: t} = this;
                if (t[me] !== 'h2') {
                    if (e.statusCode && !e.shouldKeepAlive) {
                        e.onMessageComplete();
                        return;
                    }
                }
                o.destroy(this, new C('other side closed', o.getSocketInfo(this)));
            }
            function onSocketClose() {
                const {[k]: e, [N]: t} = this;
                if (e[me] === 'h1' && t) {
                    if (!this[z] && t.statusCode && !t.shouldKeepAlive) {
                        t.onMessageComplete();
                    }
                    this[N].destroy();
                    this[N] = null;
                }
                const r = this[z] || new C('closed', o.getSocketInfo(this));
                e[X] = null;
                if (e.destroyed) {
                    A(e[L] === 0);
                    const t = e[V].splice(e[W]);
                    for (let A = 0; A < t.length; A++) {
                        const i = t[A];
                        errorRequest(e, i, r);
                    }
                } else if (e[U] > 0 && r.code !== 'UND_ERR_INFO') {
                    const t = e[V][e[W]];
                    e[V][e[W]++] = null;
                    errorRequest(e, t, r);
                }
                e[j] = e[W];
                A(e[U] === 0);
                e.emit('disconnect', e[v], [e], r);
                resume(e);
            }
            async function connect(e) {
                A(!e[O]);
                A(!e[X]);
                let {host: t, hostname: r, protocol: s, port: a} = e[v];
                if (r[0] === '[') {
                    const e = r.indexOf(']');
                    A(e !== -1);
                    const t = r.substring(1, e);
                    A(i.isIP(t));
                    r = t;
                }
                e[O] = true;
                if (_e.beforeConnect.hasSubscribers) {
                    _e.beforeConnect.publish({
                        connectParams: {
                            host: t,
                            hostname: r,
                            protocol: s,
                            port: a,
                            servername: e[R],
                            localAddress: e[ce],
                        },
                        connector: e[se],
                    });
                }
                try {
                    const i = await new Promise((A, i) => {
                        e[se](
                            {host: t, hostname: r, protocol: s, port: a, servername: e[R], localAddress: e[ce]},
                            (e, t) => {
                                if (e) {
                                    i(e);
                                } else {
                                    A(t);
                                }
                            },
                        );
                    });
                    if (e.destroyed) {
                        o.destroy(
                            i.on('error', () => {}),
                            new w(),
                        );
                        return;
                    }
                    e[O] = false;
                    A(i);
                    const n = i.alpnProtocol === 'h2';
                    if (n) {
                        if (!Se) {
                            Se = true;
                            process.emitWarning('H2 support is experimental, expect them to change at any time.', {
                                code: 'UNDICI-H2',
                            });
                        }
                        const t = Ie.connect(e[v], {
                            createConnection: () => i,
                            peerMaxConcurrentStreams: e[Ce].maxConcurrentStreams,
                        });
                        e[me] = 'h2';
                        t[k] = e;
                        t[X] = i;
                        t.on('error', onHttp2SessionError);
                        t.on('frameError', onHttp2FrameError);
                        t.on('end', onHttp2SessionEnd);
                        t.on('goaway', onHTTP2GoAway);
                        t.on('close', onSocketClose);
                        t.unref();
                        e[Ee] = t;
                        i[Ee] = t;
                    } else {
                        if (!Le) {
                            Le = await Me;
                            Me = null;
                        }
                        i[Y] = false;
                        i[G] = false;
                        i[D] = false;
                        i[T] = false;
                        i[N] = new Parser(e, i, Le);
                    }
                    i[ne] = 0;
                    i[oe] = e[oe];
                    i[k] = e;
                    i[z] = null;
                    i.on('error', onSocketError)
                        .on('readable', onSocketReadable)
                        .on('end', onSocketEnd)
                        .on('close', onSocketClose);
                    e[X] = i;
                    if (_e.connected.hasSubscribers) {
                        _e.connected.publish({
                            connectParams: {
                                host: t,
                                hostname: r,
                                protocol: s,
                                port: a,
                                servername: e[R],
                                localAddress: e[ce],
                            },
                            connector: e[se],
                            socket: i,
                        });
                    }
                    e.emit('connect', e[v], [e]);
                } catch (i) {
                    if (e.destroyed) {
                        return;
                    }
                    e[O] = false;
                    if (_e.connectError.hasSubscribers) {
                        _e.connectError.publish({
                            connectParams: {
                                host: t,
                                hostname: r,
                                protocol: s,
                                port: a,
                                servername: e[R],
                                localAddress: e[ce],
                            },
                            connector: e[se],
                            error: i,
                        });
                    }
                    if (i.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
                        A(e[U] === 0);
                        while (e[L] > 0 && e[V][e[j]].servername === e[R]) {
                            const t = e[V][e[j]++];
                            errorRequest(e, t, i);
                        }
                    } else {
                        onError(e, i);
                    }
                    e.emit('connectionError', e[v], [e], i);
                }
                resume(e);
            }
            function emitDrain(e) {
                e[P] = 0;
                e.emit('drain', e[v], [e]);
            }
            function resume(e, t) {
                if (e[q] === 2) {
                    return;
                }
                e[q] = 2;
                _resume(e, t);
                e[q] = 0;
                if (e[W] > 256) {
                    e[V].splice(0, e[W]);
                    e[j] -= e[W];
                    e[W] = 0;
                }
            }
            function _resume(e, t) {
                while (true) {
                    if (e.destroyed) {
                        A(e[L] === 0);
                        return;
                    }
                    if (e[Fe] && !e[M]) {
                        e[Fe]();
                        e[Fe] = null;
                        return;
                    }
                    const r = e[X];
                    if (r && !r.destroyed && r.alpnProtocol !== 'h2') {
                        if (e[M] === 0) {
                            if (!r[Y] && r.unref) {
                                r.unref();
                                r[Y] = true;
                            }
                        } else if (r[Y] && r.ref) {
                            r.ref();
                            r[Y] = false;
                        }
                        if (e[M] === 0) {
                            if (r[N].timeoutType !== xe) {
                                r[N].setTimeout(e[K], xe);
                            }
                        } else if (e[U] > 0 && r[N].statusCode < 200) {
                            if (r[N].timeoutType !== Pe) {
                                const t = e[V][e[W]];
                                const A = t.headersTimeout != null ? t.headersTimeout : e[re];
                                r[N].setTimeout(A, Pe);
                            }
                        }
                    }
                    if (e[S]) {
                        e[P] = 2;
                    } else if (e[P] === 2) {
                        if (t) {
                            e[P] = 1;
                            process.nextTick(emitDrain, e);
                        } else {
                            emitDrain(e);
                        }
                        continue;
                    }
                    if (e[L] === 0) {
                        return;
                    }
                    if (e[U] >= (e[Z] || 1)) {
                        return;
                    }
                    const i = e[V][e[j]];
                    if (e[v].protocol === 'https:' && e[R] !== i.servername) {
                        if (e[U] > 0) {
                            return;
                        }
                        e[R] = i.servername;
                        if (r && r.servername !== i.servername) {
                            o.destroy(r, new Q('servername changed'));
                            return;
                        }
                    }
                    if (e[O]) {
                        return;
                    }
                    if (!r && !e[Ee]) {
                        connect(e);
                        return;
                    }
                    if (r.destroyed || r[G] || r[D] || r[T]) {
                        return;
                    }
                    if (e[U] > 0 && !i.idempotent) {
                        return;
                    }
                    if (e[U] > 0 && (i.upgrade || i.method === 'CONNECT')) {
                        return;
                    }
                    if (e[U] > 0 && o.bodyLength(i.body) !== 0 && (o.isStream(i.body) || o.isAsyncIterable(i.body))) {
                        return;
                    }
                    if (!i.aborted && write(e, i)) {
                        e[j]++;
                    } else {
                        e[V].splice(e[j], 1);
                    }
                }
            }
            function shouldSendContentLength(e) {
                return e !== 'GET' && e !== 'HEAD' && e !== 'OPTIONS' && e !== 'TRACE' && e !== 'CONNECT';
            }
            function write(e, t) {
                if (e[me] === 'h2') {
                    writeH2(e, e[Ee], t);
                    return;
                }
                const {body: r, method: i, path: s, host: a, upgrade: n, headers: p, blocking: d, reset: u} = t;
                const c = i === 'PUT' || i === 'POST' || i === 'PATCH';
                if (r && typeof r.read === 'function') {
                    r.read(0);
                }
                const m = o.bodyLength(r);
                let h = m;
                if (h === null) {
                    h = t.contentLength;
                }
                if (h === 0 && !c) {
                    h = null;
                }
                if (shouldSendContentLength(i) && h > 0 && t.contentLength !== null && t.contentLength !== h) {
                    if (e[ie]) {
                        errorRequest(e, t, new l());
                        return false;
                    }
                    process.emitWarning(new l());
                }
                const C = e[X];
                try {
                    t.onConnect((r) => {
                        if (t.aborted || t.completed) {
                            return;
                        }
                        errorRequest(e, t, r || new g());
                        o.destroy(C, new Q('aborted'));
                    });
                } catch (r) {
                    errorRequest(e, t, r);
                }
                if (t.aborted) {
                    return false;
                }
                if (i === 'HEAD') {
                    C[D] = true;
                }
                if (n || i === 'CONNECT') {
                    C[D] = true;
                }
                if (u != null) {
                    C[D] = u;
                }
                if (e[oe] && C[ne]++ >= e[oe]) {
                    C[D] = true;
                }
                if (d) {
                    C[T] = true;
                }
                let B = `${i} ${s} HTTP/1.1\r\n`;
                if (typeof a === 'string') {
                    B += `host: ${a}\r\n`;
                } else {
                    B += e[J];
                }
                if (n) {
                    B += `connection: upgrade\r\nupgrade: ${n}\r\n`;
                } else if (e[Z] && !C[D]) {
                    B += 'connection: keep-alive\r\n';
                } else {
                    B += 'connection: close\r\n';
                }
                if (p) {
                    B += p;
                }
                if (_e.sendHeaders.hasSubscribers) {
                    _e.sendHeaders.publish({request: t, headers: B, socket: C});
                }
                if (!r || m === 0) {
                    if (h === 0) {
                        C.write(`${B}content-length: 0\r\n\r\n`, 'latin1');
                    } else {
                        A(h === null, 'no body must not have content length');
                        C.write(`${B}\r\n`, 'latin1');
                    }
                    t.onRequestSent();
                } else if (o.isBuffer(r)) {
                    A(h === r.byteLength, 'buffer body must have content length');
                    C.cork();
                    C.write(`${B}content-length: ${h}\r\n\r\n`, 'latin1');
                    C.write(r);
                    C.uncork();
                    t.onBodySent(r);
                    t.onRequestSent();
                    if (!c) {
                        C[D] = true;
                    }
                } else if (o.isBlobLike(r)) {
                    if (typeof r.stream === 'function') {
                        writeIterable({
                            body: r.stream(),
                            client: e,
                            request: t,
                            socket: C,
                            contentLength: h,
                            header: B,
                            expectsPayload: c,
                        });
                    } else {
                        writeBlob({
                            body: r,
                            client: e,
                            request: t,
                            socket: C,
                            contentLength: h,
                            header: B,
                            expectsPayload: c,
                        });
                    }
                } else if (o.isStream(r)) {
                    writeStream({
                        body: r,
                        client: e,
                        request: t,
                        socket: C,
                        contentLength: h,
                        header: B,
                        expectsPayload: c,
                    });
                } else if (o.isIterable(r)) {
                    writeIterable({
                        body: r,
                        client: e,
                        request: t,
                        socket: C,
                        contentLength: h,
                        header: B,
                        expectsPayload: c,
                    });
                } else {
                    A(false);
                }
                return true;
            }
            function writeH2(e, t, r) {
                const {body: i, method: s, path: a, host: n, upgrade: d, expectContinue: u, signal: c, headers: m} = r;
                let h;
                if (typeof m === 'string') h = p[Be](m.trim());
                else h = m;
                if (d) {
                    errorRequest(e, r, new Error('Upgrade not supported for H2'));
                    return false;
                }
                try {
                    r.onConnect((t) => {
                        if (r.aborted || r.completed) {
                            return;
                        }
                        errorRequest(e, r, t || new g());
                    });
                } catch (t) {
                    errorRequest(e, r, t);
                }
                if (r.aborted) {
                    return false;
                }
                let C;
                const B = e[Ce];
                h[ye] = n || e[he];
                h[we] = s;
                if (s === 'CONNECT') {
                    t.ref();
                    C = t.request(h, {endStream: false, signal: c});
                    if (C.id && !C.pending) {
                        r.onUpgrade(null, null, C);
                        ++B.openStreams;
                    } else {
                        C.once('ready', () => {
                            r.onUpgrade(null, null, C);
                            ++B.openStreams;
                        });
                    }
                    C.once('close', () => {
                        B.openStreams -= 1;
                        if (B.openStreams === 0) t.unref();
                    });
                    return true;
                }
                h[be] = a;
                h[ve] = 'https';
                const I = s === 'PUT' || s === 'POST' || s === 'PATCH';
                if (i && typeof i.read === 'function') {
                    i.read(0);
                }
                let y = o.bodyLength(i);
                if (y == null) {
                    y = r.contentLength;
                }
                if (y === 0 || !I) {
                    y = null;
                }
                if (shouldSendContentLength(s) && y > 0 && r.contentLength != null && r.contentLength !== y) {
                    if (e[ie]) {
                        errorRequest(e, r, new l());
                        return false;
                    }
                    process.emitWarning(new l());
                }
                if (y != null) {
                    A(i, 'no body must not have content length');
                    h[De] = `${y}`;
                }
                t.ref();
                const w = s === 'GET' || s === 'HEAD';
                if (u) {
                    h[Re] = '100-continue';
                    C = t.request(h, {endStream: w, signal: c});
                    C.once('continue', writeBodyH2);
                } else {
                    C = t.request(h, {endStream: w, signal: c});
                    writeBodyH2();
                }
                ++B.openStreams;
                C.once('response', (e) => {
                    const {[ke]: t, ...A} = e;
                    if (r.onHeaders(Number(t), A, C.resume.bind(C), '') === false) {
                        C.pause();
                    }
                });
                C.once('end', () => {
                    r.onComplete([]);
                });
                C.on('data', (e) => {
                    if (r.onData(e) === false) {
                        C.pause();
                    }
                });
                C.once('close', () => {
                    B.openStreams -= 1;
                    if (B.openStreams === 0) {
                        t.unref();
                    }
                });
                C.once('error', function (t) {
                    if (e[Ee] && !e[Ee].destroyed && !this.closed && !this.destroyed) {
                        B.streams -= 1;
                        o.destroy(C, t);
                    }
                });
                C.once('frameError', (t, A) => {
                    const i = new Q(`HTTP/2: "frameError" received - type ${t}, code ${A}`);
                    errorRequest(e, r, i);
                    if (e[Ee] && !e[Ee].destroyed && !this.closed && !this.destroyed) {
                        B.streams -= 1;
                        o.destroy(C, i);
                    }
                });
                return true;
                function writeBodyH2() {
                    if (!i) {
                        r.onRequestSent();
                    } else if (o.isBuffer(i)) {
                        A(y === i.byteLength, 'buffer body must have content length');
                        C.cork();
                        C.write(i);
                        C.uncork();
                        C.end();
                        r.onBodySent(i);
                        r.onRequestSent();
                    } else if (o.isBlobLike(i)) {
                        if (typeof i.stream === 'function') {
                            writeIterable({
                                client: e,
                                request: r,
                                contentLength: y,
                                h2stream: C,
                                expectsPayload: I,
                                body: i.stream(),
                                socket: e[X],
                                header: '',
                            });
                        } else {
                            writeBlob({
                                body: i,
                                client: e,
                                request: r,
                                contentLength: y,
                                expectsPayload: I,
                                h2stream: C,
                                header: '',
                                socket: e[X],
                            });
                        }
                    } else if (o.isStream(i)) {
                        writeStream({
                            body: i,
                            client: e,
                            request: r,
                            contentLength: y,
                            expectsPayload: I,
                            socket: e[X],
                            h2stream: C,
                            header: '',
                        });
                    } else if (o.isIterable(i)) {
                        writeIterable({
                            body: i,
                            client: e,
                            request: r,
                            contentLength: y,
                            expectsPayload: I,
                            header: '',
                            h2stream: C,
                            socket: e[X],
                        });
                    } else {
                        A(false);
                    }
                }
            }
            function writeStream({
                h2stream: e,
                body: t,
                client: r,
                request: i,
                socket: s,
                contentLength: n,
                header: p,
                expectsPayload: d,
            }) {
                A(n !== 0 || r[U] === 0, 'stream body cannot be pipelined');
                if (r[me] === 'h2') {
                    const c = a(t, e, (r) => {
                        if (r) {
                            o.destroy(t, r);
                            o.destroy(e, r);
                        } else {
                            i.onRequestSent();
                        }
                    });
                    c.on('data', onPipeData);
                    c.once('end', () => {
                        c.removeListener('data', onPipeData);
                        o.destroy(c);
                    });
                    function onPipeData(e) {
                        i.onBodySent(e);
                    }
                    return;
                }
                let l = false;
                const u = new AsyncWriter({
                    socket: s,
                    request: i,
                    contentLength: n,
                    client: r,
                    expectsPayload: d,
                    header: p,
                });
                const onData = function (e) {
                    if (l) {
                        return;
                    }
                    try {
                        if (!u.write(e) && this.pause) {
                            this.pause();
                        }
                    } catch (e) {
                        o.destroy(this, e);
                    }
                };
                const onDrain = function () {
                    if (l) {
                        return;
                    }
                    if (t.resume) {
                        t.resume();
                    }
                };
                const onAbort = function () {
                    if (l) {
                        return;
                    }
                    const e = new g();
                    queueMicrotask(() => onFinished(e));
                };
                const onFinished = function (e) {
                    if (l) {
                        return;
                    }
                    l = true;
                    A(s.destroyed || (s[G] && r[U] <= 1));
                    s.off('drain', onDrain).off('error', onFinished);
                    t.removeListener('data', onData)
                        .removeListener('end', onFinished)
                        .removeListener('error', onFinished)
                        .removeListener('close', onAbort);
                    if (!e) {
                        try {
                            u.end();
                        } catch (t) {
                            e = t;
                        }
                    }
                    u.destroy(e);
                    if (e && (e.code !== 'UND_ERR_INFO' || e.message !== 'reset')) {
                        o.destroy(t, e);
                    } else {
                        o.destroy(t);
                    }
                };
                t.on('data', onData).on('end', onFinished).on('error', onFinished).on('close', onAbort);
                if (t.resume) {
                    t.resume();
                }
                s.on('drain', onDrain).on('error', onFinished);
            }
            async function writeBlob({
                h2stream: e,
                body: t,
                client: r,
                request: i,
                socket: s,
                contentLength: a,
                header: n,
                expectsPayload: p,
            }) {
                A(a === t.size, 'blob body must have content length');
                const d = r[me] === 'h2';
                try {
                    if (a != null && a !== t.size) {
                        throw new l();
                    }
                    const A = Buffer.from(await t.arrayBuffer());
                    if (d) {
                        e.cork();
                        e.write(A);
                        e.uncork();
                    } else {
                        s.cork();
                        s.write(`${n}content-length: ${a}\r\n\r\n`, 'latin1');
                        s.write(A);
                        s.uncork();
                    }
                    i.onBodySent(A);
                    i.onRequestSent();
                    if (!p) {
                        s[D] = true;
                    }
                    resume(r);
                } catch (t) {
                    o.destroy(d ? e : s, t);
                }
            }
            async function writeIterable({
                h2stream: e,
                body: t,
                client: r,
                request: i,
                socket: s,
                contentLength: a,
                header: o,
                expectsPayload: n,
            }) {
                A(a !== 0 || r[U] === 0, 'iterator body cannot be pipelined');
                let p = null;
                function onDrain() {
                    if (p) {
                        const e = p;
                        p = null;
                        e();
                    }
                }
                const waitForDrain = () =>
                    new Promise((e, t) => {
                        A(p === null);
                        if (s[z]) {
                            t(s[z]);
                        } else {
                            p = e;
                        }
                    });
                if (r[me] === 'h2') {
                    e.on('close', onDrain).on('drain', onDrain);
                    try {
                        for await (const r of t) {
                            if (s[z]) {
                                throw s[z];
                            }
                            const t = e.write(r);
                            i.onBodySent(r);
                            if (!t) {
                                await waitForDrain();
                            }
                        }
                    } catch (t) {
                        e.destroy(t);
                    } finally {
                        i.onRequestSent();
                        e.end();
                        e.off('close', onDrain).off('drain', onDrain);
                    }
                    return;
                }
                s.on('close', onDrain).on('drain', onDrain);
                const d = new AsyncWriter({
                    socket: s,
                    request: i,
                    contentLength: a,
                    client: r,
                    expectsPayload: n,
                    header: o,
                });
                try {
                    for await (const e of t) {
                        if (s[z]) {
                            throw s[z];
                        }
                        if (!d.write(e)) {
                            await waitForDrain();
                        }
                    }
                    d.end();
                } catch (e) {
                    d.destroy(e);
                } finally {
                    s.off('close', onDrain).off('drain', onDrain);
                }
            }
            class AsyncWriter {
                constructor({socket: e, request: t, contentLength: r, client: A, expectsPayload: i, header: s}) {
                    this.socket = e;
                    this.request = t;
                    this.contentLength = r;
                    this.client = A;
                    this.bytesWritten = 0;
                    this.expectsPayload = i;
                    this.header = s;
                    e[G] = true;
                }
                write(e) {
                    const {
                        socket: t,
                        request: r,
                        contentLength: A,
                        client: i,
                        bytesWritten: s,
                        expectsPayload: a,
                        header: o,
                    } = this;
                    if (t[z]) {
                        throw t[z];
                    }
                    if (t.destroyed) {
                        return false;
                    }
                    const n = Buffer.byteLength(e);
                    if (!n) {
                        return true;
                    }
                    if (A !== null && s + n > A) {
                        if (i[ie]) {
                            throw new l();
                        }
                        process.emitWarning(new l());
                    }
                    t.cork();
                    if (s === 0) {
                        if (!a) {
                            t[D] = true;
                        }
                        if (A === null) {
                            t.write(`${o}transfer-encoding: chunked\r\n`, 'latin1');
                        } else {
                            t.write(`${o}content-length: ${A}\r\n\r\n`, 'latin1');
                        }
                    }
                    if (A === null) {
                        t.write(`\r\n${n.toString(16)}\r\n`, 'latin1');
                    }
                    this.bytesWritten += n;
                    const p = t.write(e);
                    t.uncork();
                    r.onBodySent(e);
                    if (!p) {
                        if (t[N].timeout && t[N].timeoutType === Pe) {
                            if (t[N].timeout.refresh) {
                                t[N].timeout.refresh();
                            }
                        }
                    }
                    return p;
                }
                end() {
                    const {
                        socket: e,
                        contentLength: t,
                        client: r,
                        bytesWritten: A,
                        expectsPayload: i,
                        header: s,
                        request: a,
                    } = this;
                    a.onRequestSent();
                    e[G] = false;
                    if (e[z]) {
                        throw e[z];
                    }
                    if (e.destroyed) {
                        return;
                    }
                    if (A === 0) {
                        if (i) {
                            e.write(`${s}content-length: 0\r\n\r\n`, 'latin1');
                        } else {
                            e.write(`${s}\r\n`, 'latin1');
                        }
                    } else if (t === null) {
                        e.write('\r\n0\r\n\r\n', 'latin1');
                    }
                    if (t !== null && A !== t) {
                        if (r[ie]) {
                            throw new l();
                        } else {
                            process.emitWarning(new l());
                        }
                    }
                    if (e[N].timeout && e[N].timeoutType === Pe) {
                        if (e[N].timeout.refresh) {
                            e[N].timeout.refresh();
                        }
                    }
                    resume(r);
                }
                destroy(e) {
                    const {socket: t, client: r} = this;
                    t[G] = false;
                    if (e) {
                        A(r[U] <= 1, 'pipeline should only contain this request');
                        o.destroy(t, e);
                    }
                }
            }
            function errorRequest(e, t, r) {
                try {
                    t.onError(r);
                    A(t.aborted);
                } catch (r) {
                    e.emit('error', r);
                }
            }
            e.exports = Client;
        },
        6436: (e, t, r) => {
            'use strict';
            const {kConnected: A, kSize: i} = r(2785);
            class CompatWeakRef {
                constructor(e) {
                    this.value = e;
                }
                deref() {
                    return this.value[A] === 0 && this.value[i] === 0 ? undefined : this.value;
                }
            }
            class CompatFinalizer {
                constructor(e) {
                    this.finalizer = e;
                }
                register(e, t) {
                    if (e.on) {
                        e.on('disconnect', () => {
                            if (e[A] === 0 && e[i] === 0) {
                                this.finalizer(t);
                            }
                        });
                    }
                }
            }
            e.exports = function () {
                if (process.env.NODE_V8_COVERAGE) {
                    return {WeakRef: CompatWeakRef, FinalizationRegistry: CompatFinalizer};
                }
                return {
                    WeakRef: global.WeakRef || CompatWeakRef,
                    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer,
                };
            };
        },
        663: (e) => {
            'use strict';
            const t = 1024;
            const r = 4096;
            e.exports = {maxAttributeValueSize: t, maxNameValuePairSize: r};
        },
        1724: (e, t, r) => {
            'use strict';
            const {parseSetCookie: A} = r(4408);
            const {stringify: i, getHeadersList: s} = r(3121);
            const {webidl: a} = r(1744);
            const {Headers: o} = r(554);
            function getCookies(e) {
                a.argumentLengthCheck(arguments, 1, {header: 'getCookies'});
                a.brandCheck(e, o, {strict: false});
                const t = e.get('cookie');
                const r = {};
                if (!t) {
                    return r;
                }
                for (const e of t.split(';')) {
                    const [t, ...A] = e.split('=');
                    r[t.trim()] = A.join('=');
                }
                return r;
            }
            function deleteCookie(e, t, r) {
                a.argumentLengthCheck(arguments, 2, {header: 'deleteCookie'});
                a.brandCheck(e, o, {strict: false});
                t = a.converters.DOMString(t);
                r = a.converters.DeleteCookieAttributes(r);
                setCookie(e, {name: t, value: '', expires: new Date(0), ...r});
            }
            function getSetCookies(e) {
                a.argumentLengthCheck(arguments, 1, {header: 'getSetCookies'});
                a.brandCheck(e, o, {strict: false});
                const t = s(e).cookies;
                if (!t) {
                    return [];
                }
                return t.map((e) => A(Array.isArray(e) ? e[1] : e));
            }
            function setCookie(e, t) {
                a.argumentLengthCheck(arguments, 2, {header: 'setCookie'});
                a.brandCheck(e, o, {strict: false});
                t = a.converters.Cookie(t);
                const r = i(t);
                if (r) {
                    e.append('Set-Cookie', i(t));
                }
            }
            a.converters.DeleteCookieAttributes = a.dictionaryConverter([
                {converter: a.nullableConverter(a.converters.DOMString), key: 'path', defaultValue: null},
                {converter: a.nullableConverter(a.converters.DOMString), key: 'domain', defaultValue: null},
            ]);
            a.converters.Cookie = a.dictionaryConverter([
                {converter: a.converters.DOMString, key: 'name'},
                {converter: a.converters.DOMString, key: 'value'},
                {
                    converter: a.nullableConverter((e) => {
                        if (typeof e === 'number') {
                            return a.converters['unsigned long long'](e);
                        }
                        return new Date(e);
                    }),
                    key: 'expires',
                    defaultValue: null,
                },
                {converter: a.nullableConverter(a.converters['long long']), key: 'maxAge', defaultValue: null},
                {converter: a.nullableConverter(a.converters.DOMString), key: 'domain', defaultValue: null},
                {converter: a.nullableConverter(a.converters.DOMString), key: 'path', defaultValue: null},
                {converter: a.nullableConverter(a.converters.boolean), key: 'secure', defaultValue: null},
                {converter: a.nullableConverter(a.converters.boolean), key: 'httpOnly', defaultValue: null},
                {converter: a.converters.USVString, key: 'sameSite', allowedValues: ['Strict', 'Lax', 'None']},
                {converter: a.sequenceConverter(a.converters.DOMString), key: 'unparsed', defaultValue: []},
            ]);
            e.exports = {
                getCookies: getCookies,
                deleteCookie: deleteCookie,
                getSetCookies: getSetCookies,
                setCookie: setCookie,
            };
        },
        4408: (e, t, r) => {
            'use strict';
            const {maxNameValuePairSize: A, maxAttributeValueSize: i} = r(663);
            const {isCTLExcludingHtab: s} = r(3121);
            const {collectASequenceOfCodePointsFast: a} = r(685);
            const o = r(9491);
            function parseSetCookie(e) {
                if (s(e)) {
                    return null;
                }
                let t = '';
                let r = '';
                let i = '';
                let o = '';
                if (e.includes(';')) {
                    const A = {position: 0};
                    t = a(';', e, A);
                    r = e.slice(A.position);
                } else {
                    t = e;
                }
                if (!t.includes('=')) {
                    o = t;
                } else {
                    const e = {position: 0};
                    i = a('=', t, e);
                    o = t.slice(e.position + 1);
                }
                i = i.trim();
                o = o.trim();
                if (i.length + o.length > A) {
                    return null;
                }
                return {name: i, value: o, ...parseUnparsedAttributes(r)};
            }
            function parseUnparsedAttributes(e, t = {}) {
                if (e.length === 0) {
                    return t;
                }
                o(e[0] === ';');
                e = e.slice(1);
                let r = '';
                if (e.includes(';')) {
                    r = a(';', e, {position: 0});
                    e = e.slice(r.length);
                } else {
                    r = e;
                    e = '';
                }
                let A = '';
                let s = '';
                if (r.includes('=')) {
                    const e = {position: 0};
                    A = a('=', r, e);
                    s = r.slice(e.position + 1);
                } else {
                    A = r;
                }
                A = A.trim();
                s = s.trim();
                if (s.length > i) {
                    return parseUnparsedAttributes(e, t);
                }
                const n = A.toLowerCase();
                if (n === 'expires') {
                    const e = new Date(s);
                    t.expires = e;
                } else if (n === 'max-age') {
                    const r = s.charCodeAt(0);
                    if ((r < 48 || r > 57) && s[0] !== '-') {
                        return parseUnparsedAttributes(e, t);
                    }
                    if (!/^\d+$/.test(s)) {
                        return parseUnparsedAttributes(e, t);
                    }
                    const A = Number(s);
                    t.maxAge = A;
                } else if (n === 'domain') {
                    let e = s;
                    if (e[0] === '.') {
                        e = e.slice(1);
                    }
                    e = e.toLowerCase();
                    t.domain = e;
                } else if (n === 'path') {
                    let e = '';
                    if (s.length === 0 || s[0] !== '/') {
                        e = '/';
                    } else {
                        e = s;
                    }
                    t.path = e;
                } else if (n === 'secure') {
                    t.secure = true;
                } else if (n === 'httponly') {
                    t.httpOnly = true;
                } else if (n === 'samesite') {
                    let e = 'Default';
                    const r = s.toLowerCase();
                    if (r.includes('none')) {
                        e = 'None';
                    }
                    if (r.includes('strict')) {
                        e = 'Strict';
                    }
                    if (r.includes('lax')) {
                        e = 'Lax';
                    }
                    t.sameSite = e;
                } else {
                    t.unparsed ??= [];
                    t.unparsed.push(`${A}=${s}`);
                }
                return parseUnparsedAttributes(e, t);
            }
            e.exports = {parseSetCookie: parseSetCookie, parseUnparsedAttributes: parseUnparsedAttributes};
        },
        3121: (e, t, r) => {
            'use strict';
            const A = r(9491);
            const {kHeadersList: i} = r(2785);
            function isCTLExcludingHtab(e) {
                if (e.length === 0) {
                    return false;
                }
                for (const t of e) {
                    const e = t.charCodeAt(0);
                    if (e >= 0 || e <= 8 || e >= 10 || e <= 31 || e === 127) {
                        return false;
                    }
                }
            }
            function validateCookieName(e) {
                for (const t of e) {
                    const e = t.charCodeAt(0);
                    if (
                        e <= 32 ||
                        e > 127 ||
                        t === '(' ||
                        t === ')' ||
                        t === '>' ||
                        t === '<' ||
                        t === '@' ||
                        t === ',' ||
                        t === ';' ||
                        t === ':' ||
                        t === '\\' ||
                        t === '"' ||
                        t === '/' ||
                        t === '[' ||
                        t === ']' ||
                        t === '?' ||
                        t === '=' ||
                        t === '{' ||
                        t === '}'
                    ) {
                        throw new Error('Invalid cookie name');
                    }
                }
            }
            function validateCookieValue(e) {
                for (const t of e) {
                    const e = t.charCodeAt(0);
                    if (e < 33 || e === 34 || e === 44 || e === 59 || e === 92 || e > 126) {
                        throw new Error('Invalid header value');
                    }
                }
            }
            function validateCookiePath(e) {
                for (const t of e) {
                    const e = t.charCodeAt(0);
                    if (e < 33 || t === ';') {
                        throw new Error('Invalid cookie path');
                    }
                }
            }
            function validateCookieDomain(e) {
                if (e.startsWith('-') || e.endsWith('.') || e.endsWith('-')) {
                    throw new Error('Invalid cookie domain');
                }
            }
            function toIMFDate(e) {
                if (typeof e === 'number') {
                    e = new Date(e);
                }
                const t = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                const r = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                const A = t[e.getUTCDay()];
                const i = e.getUTCDate().toString().padStart(2, '0');
                const s = r[e.getUTCMonth()];
                const a = e.getUTCFullYear();
                const o = e.getUTCHours().toString().padStart(2, '0');
                const n = e.getUTCMinutes().toString().padStart(2, '0');
                const p = e.getUTCSeconds().toString().padStart(2, '0');
                return `${A}, ${i} ${s} ${a} ${o}:${n}:${p} GMT`;
            }
            function validateCookieMaxAge(e) {
                if (e < 0) {
                    throw new Error('Invalid cookie max-age');
                }
            }
            function stringify(e) {
                if (e.name.length === 0) {
                    return null;
                }
                validateCookieName(e.name);
                validateCookieValue(e.value);
                const t = [`${e.name}=${e.value}`];
                if (e.name.startsWith('__Secure-')) {
                    e.secure = true;
                }
                if (e.name.startsWith('__Host-')) {
                    e.secure = true;
                    e.domain = null;
                    e.path = '/';
                }
                if (e.secure) {
                    t.push('Secure');
                }
                if (e.httpOnly) {
                    t.push('HttpOnly');
                }
                if (typeof e.maxAge === 'number') {
                    validateCookieMaxAge(e.maxAge);
                    t.push(`Max-Age=${e.maxAge}`);
                }
                if (e.domain) {
                    validateCookieDomain(e.domain);
                    t.push(`Domain=${e.domain}`);
                }
                if (e.path) {
                    validateCookiePath(e.path);
                    t.push(`Path=${e.path}`);
                }
                if (e.expires && e.expires.toString() !== 'Invalid Date') {
                    t.push(`Expires=${toIMFDate(e.expires)}`);
                }
                if (e.sameSite) {
                    t.push(`SameSite=${e.sameSite}`);
                }
                for (const r of e.unparsed) {
                    if (!r.includes('=')) {
                        throw new Error('Invalid unparsed');
                    }
                    const [e, ...A] = r.split('=');
                    t.push(`${e.trim()}=${A.join('=')}`);
                }
                return t.join('; ');
            }
            let s;
            function getHeadersList(e) {
                if (e[i]) {
                    return e[i];
                }
                if (!s) {
                    s = Object.getOwnPropertySymbols(e).find((e) => e.description === 'headers list');
                    A(s, 'Headers cannot be parsed');
                }
                const t = e[s];
                A(t);
                return t;
            }
            e.exports = {isCTLExcludingHtab: isCTLExcludingHtab, stringify: stringify, getHeadersList: getHeadersList};
        },
        2067: (e, t, r) => {
            'use strict';
            const A = r(1808);
            const i = r(9491);
            const s = r(3983);
            const {InvalidArgumentError: a, ConnectTimeoutError: o} = r(8045);
            let n;
            let p;
            if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
                p = class WeakSessionCache {
                    constructor(e) {
                        this._maxCachedSessions = e;
                        this._sessionCache = new Map();
                        this._sessionRegistry = new global.FinalizationRegistry((e) => {
                            if (this._sessionCache.size < this._maxCachedSessions) {
                                return;
                            }
                            const t = this._sessionCache.get(e);
                            if (t !== undefined && t.deref() === undefined) {
                                this._sessionCache.delete(e);
                            }
                        });
                    }
                    get(e) {
                        const t = this._sessionCache.get(e);
                        return t ? t.deref() : null;
                    }
                    set(e, t) {
                        if (this._maxCachedSessions === 0) {
                            return;
                        }
                        this._sessionCache.set(e, new WeakRef(t));
                        this._sessionRegistry.register(t, e);
                    }
                };
            } else {
                p = class SimpleSessionCache {
                    constructor(e) {
                        this._maxCachedSessions = e;
                        this._sessionCache = new Map();
                    }
                    get(e) {
                        return this._sessionCache.get(e);
                    }
                    set(e, t) {
                        if (this._maxCachedSessions === 0) {
                            return;
                        }
                        if (this._sessionCache.size >= this._maxCachedSessions) {
                            const {value: e} = this._sessionCache.keys().next();
                            this._sessionCache.delete(e);
                        }
                        this._sessionCache.set(e, t);
                    }
                };
            }
            function buildConnector({allowH2: e, maxCachedSessions: t, socketPath: o, timeout: d, ...l}) {
                if (t != null && (!Number.isInteger(t) || t < 0)) {
                    throw new a('maxCachedSessions must be a positive integer or zero');
                }
                const u = {path: o, ...l};
                const c = new p(t == null ? 100 : t);
                d = d == null ? 1e4 : d;
                e = e != null ? e : false;
                return function connect(
                    {hostname: t, host: a, protocol: o, port: p, servername: l, localAddress: g, httpSocket: m},
                    h,
                ) {
                    let C;
                    if (o === 'https:') {
                        if (!n) {
                            n = r(4404);
                        }
                        l = l || u.servername || s.getServerName(a) || null;
                        const A = l || t;
                        const o = c.get(A) || null;
                        i(A);
                        C = n.connect({
                            highWaterMark: 16384,
                            ...u,
                            servername: l,
                            session: o,
                            localAddress: g,
                            ALPNProtocols: e ? ['http/1.1', 'h2'] : ['http/1.1'],
                            socket: m,
                            port: p || 443,
                            host: t,
                        });
                        C.on('session', function (e) {
                            c.set(A, e);
                        });
                    } else {
                        i(!m, 'httpSocket can only be sent on TLS update');
                        C = A.connect({highWaterMark: 64 * 1024, ...u, localAddress: g, port: p || 80, host: t});
                    }
                    if (u.keepAlive == null || u.keepAlive) {
                        const e = u.keepAliveInitialDelay === undefined ? 6e4 : u.keepAliveInitialDelay;
                        C.setKeepAlive(true, e);
                    }
                    const Q = setupTimeout(() => onConnectTimeout(C), d);
                    C.setNoDelay(true)
                        .once(o === 'https:' ? 'secureConnect' : 'connect', function () {
                            Q();
                            if (h) {
                                const e = h;
                                h = null;
                                e(null, this);
                            }
                        })
                        .on('error', function (e) {
                            Q();
                            if (h) {
                                const t = h;
                                h = null;
                                t(e);
                            }
                        });
                    return C;
                };
            }
            function setupTimeout(e, t) {
                if (!t) {
                    return () => {};
                }
                let r = null;
                let A = null;
                const i = setTimeout(() => {
                    r = setImmediate(() => {
                        if (process.platform === 'win32') {
                            A = setImmediate(() => e());
                        } else {
                            e();
                        }
                    });
                }, t);
                return () => {
                    clearTimeout(i);
                    clearImmediate(r);
                    clearImmediate(A);
                };
            }
            function onConnectTimeout(e) {
                s.destroy(e, new o());
            }
            e.exports = buildConnector;
        },
        8045: (e) => {
            'use strict';
            class UndiciError extends Error {
                constructor(e) {
                    super(e);
                    this.name = 'UndiciError';
                    this.code = 'UND_ERR';
                }
            }
            class ConnectTimeoutError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, ConnectTimeoutError);
                    this.name = 'ConnectTimeoutError';
                    this.message = e || 'Connect Timeout Error';
                    this.code = 'UND_ERR_CONNECT_TIMEOUT';
                }
            }
            class HeadersTimeoutError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, HeadersTimeoutError);
                    this.name = 'HeadersTimeoutError';
                    this.message = e || 'Headers Timeout Error';
                    this.code = 'UND_ERR_HEADERS_TIMEOUT';
                }
            }
            class HeadersOverflowError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, HeadersOverflowError);
                    this.name = 'HeadersOverflowError';
                    this.message = e || 'Headers Overflow Error';
                    this.code = 'UND_ERR_HEADERS_OVERFLOW';
                }
            }
            class BodyTimeoutError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, BodyTimeoutError);
                    this.name = 'BodyTimeoutError';
                    this.message = e || 'Body Timeout Error';
                    this.code = 'UND_ERR_BODY_TIMEOUT';
                }
            }
            class ResponseStatusCodeError extends UndiciError {
                constructor(e, t, r, A) {
                    super(e);
                    Error.captureStackTrace(this, ResponseStatusCodeError);
                    this.name = 'ResponseStatusCodeError';
                    this.message = e || 'Response Status Code Error';
                    this.code = 'UND_ERR_RESPONSE_STATUS_CODE';
                    this.body = A;
                    this.status = t;
                    this.statusCode = t;
                    this.headers = r;
                }
            }
            class InvalidArgumentError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, InvalidArgumentError);
                    this.name = 'InvalidArgumentError';
                    this.message = e || 'Invalid Argument Error';
                    this.code = 'UND_ERR_INVALID_ARG';
                }
            }
            class InvalidReturnValueError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, InvalidReturnValueError);
                    this.name = 'InvalidReturnValueError';
                    this.message = e || 'Invalid Return Value Error';
                    this.code = 'UND_ERR_INVALID_RETURN_VALUE';
                }
            }
            class RequestAbortedError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, RequestAbortedError);
                    this.name = 'AbortError';
                    this.message = e || 'Request aborted';
                    this.code = 'UND_ERR_ABORTED';
                }
            }
            class InformationalError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, InformationalError);
                    this.name = 'InformationalError';
                    this.message = e || 'Request information';
                    this.code = 'UND_ERR_INFO';
                }
            }
            class RequestContentLengthMismatchError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, RequestContentLengthMismatchError);
                    this.name = 'RequestContentLengthMismatchError';
                    this.message = e || 'Request body length does not match content-length header';
                    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';
                }
            }
            class ResponseContentLengthMismatchError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, ResponseContentLengthMismatchError);
                    this.name = 'ResponseContentLengthMismatchError';
                    this.message = e || 'Response body length does not match content-length header';
                    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';
                }
            }
            class ClientDestroyedError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, ClientDestroyedError);
                    this.name = 'ClientDestroyedError';
                    this.message = e || 'The client is destroyed';
                    this.code = 'UND_ERR_DESTROYED';
                }
            }
            class ClientClosedError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, ClientClosedError);
                    this.name = 'ClientClosedError';
                    this.message = e || 'The client is closed';
                    this.code = 'UND_ERR_CLOSED';
                }
            }
            class SocketError extends UndiciError {
                constructor(e, t) {
                    super(e);
                    Error.captureStackTrace(this, SocketError);
                    this.name = 'SocketError';
                    this.message = e || 'Socket error';
                    this.code = 'UND_ERR_SOCKET';
                    this.socket = t;
                }
            }
            class NotSupportedError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, NotSupportedError);
                    this.name = 'NotSupportedError';
                    this.message = e || 'Not supported error';
                    this.code = 'UND_ERR_NOT_SUPPORTED';
                }
            }
            class BalancedPoolMissingUpstreamError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, NotSupportedError);
                    this.name = 'MissingUpstreamError';
                    this.message = e || 'No upstream has been added to the BalancedPool';
                    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM';
                }
            }
            class HTTPParserError extends Error {
                constructor(e, t, r) {
                    super(e);
                    Error.captureStackTrace(this, HTTPParserError);
                    this.name = 'HTTPParserError';
                    this.code = t ? `HPE_${t}` : undefined;
                    this.data = r ? r.toString() : undefined;
                }
            }
            class ResponseExceededMaxSizeError extends UndiciError {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, ResponseExceededMaxSizeError);
                    this.name = 'ResponseExceededMaxSizeError';
                    this.message = e || 'Response content exceeded max size';
                    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE';
                }
            }
            class RequestRetryError extends UndiciError {
                constructor(e, t, {headers: r, data: A}) {
                    super(e);
                    Error.captureStackTrace(this, RequestRetryError);
                    this.name = 'RequestRetryError';
                    this.message = e || 'Request retry error';
                    this.code = 'UND_ERR_REQ_RETRY';
                    this.statusCode = t;
                    this.data = A;
                    this.headers = r;
                }
            }
            e.exports = {
                HTTPParserError: HTTPParserError,
                UndiciError: UndiciError,
                HeadersTimeoutError: HeadersTimeoutError,
                HeadersOverflowError: HeadersOverflowError,
                BodyTimeoutError: BodyTimeoutError,
                RequestContentLengthMismatchError: RequestContentLengthMismatchError,
                ConnectTimeoutError: ConnectTimeoutError,
                ResponseStatusCodeError: ResponseStatusCodeError,
                InvalidArgumentError: InvalidArgumentError,
                InvalidReturnValueError: InvalidReturnValueError,
                RequestAbortedError: RequestAbortedError,
                ClientDestroyedError: ClientDestroyedError,
                ClientClosedError: ClientClosedError,
                InformationalError: InformationalError,
                SocketError: SocketError,
                NotSupportedError: NotSupportedError,
                ResponseContentLengthMismatchError: ResponseContentLengthMismatchError,
                BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError,
                ResponseExceededMaxSizeError: ResponseExceededMaxSizeError,
                RequestRetryError: RequestRetryError,
            };
        },
        2905: (e, t, r) => {
            'use strict';
            const {InvalidArgumentError: A, NotSupportedError: i} = r(8045);
            const s = r(9491);
            const {kHTTP2BuildRequest: a, kHTTP2CopyHeaders: o, kHTTP1BuildRequest: n} = r(2785);
            const p = r(3983);
            const d = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
            const l = /[^\t\x20-\x7e\x80-\xff]/;
            const u = /[^\u0021-\u00ff]/;
            const c = Symbol('handler');
            const g = {};
            let m;
            try {
                const e = r(7643);
                g.create = e.channel('undici:request:create');
                g.bodySent = e.channel('undici:request:bodySent');
                g.headers = e.channel('undici:request:headers');
                g.trailers = e.channel('undici:request:trailers');
                g.error = e.channel('undici:request:error');
            } catch {
                g.create = {hasSubscribers: false};
                g.bodySent = {hasSubscribers: false};
                g.headers = {hasSubscribers: false};
                g.trailers = {hasSubscribers: false};
                g.error = {hasSubscribers: false};
            }
            class Request {
                constructor(
                    e,
                    {
                        path: t,
                        method: i,
                        body: s,
                        headers: a,
                        query: o,
                        idempotent: n,
                        blocking: l,
                        upgrade: h,
                        headersTimeout: C,
                        bodyTimeout: Q,
                        reset: B,
                        throwOnError: I,
                        expectContinue: y,
                    },
                    w,
                ) {
                    if (typeof t !== 'string') {
                        throw new A('path must be a string');
                    } else if (
                        t[0] !== '/' &&
                        !(t.startsWith('http://') || t.startsWith('https://')) &&
                        i !== 'CONNECT'
                    ) {
                        throw new A('path must be an absolute URL or start with a slash');
                    } else if (u.exec(t) !== null) {
                        throw new A('invalid request path');
                    }
                    if (typeof i !== 'string') {
                        throw new A('method must be a string');
                    } else if (d.exec(i) === null) {
                        throw new A('invalid request method');
                    }
                    if (h && typeof h !== 'string') {
                        throw new A('upgrade must be a string');
                    }
                    if (C != null && (!Number.isFinite(C) || C < 0)) {
                        throw new A('invalid headersTimeout');
                    }
                    if (Q != null && (!Number.isFinite(Q) || Q < 0)) {
                        throw new A('invalid bodyTimeout');
                    }
                    if (B != null && typeof B !== 'boolean') {
                        throw new A('invalid reset');
                    }
                    if (y != null && typeof y !== 'boolean') {
                        throw new A('invalid expectContinue');
                    }
                    this.headersTimeout = C;
                    this.bodyTimeout = Q;
                    this.throwOnError = I === true;
                    this.method = i;
                    this.abort = null;
                    if (s == null) {
                        this.body = null;
                    } else if (p.isStream(s)) {
                        this.body = s;
                        const e = this.body._readableState;
                        if (!e || !e.autoDestroy) {
                            this.endHandler = function autoDestroy() {
                                p.destroy(this);
                            };
                            this.body.on('end', this.endHandler);
                        }
                        this.errorHandler = (e) => {
                            if (this.abort) {
                                this.abort(e);
                            } else {
                                this.error = e;
                            }
                        };
                        this.body.on('error', this.errorHandler);
                    } else if (p.isBuffer(s)) {
                        this.body = s.byteLength ? s : null;
                    } else if (ArrayBuffer.isView(s)) {
                        this.body = s.buffer.byteLength ? Buffer.from(s.buffer, s.byteOffset, s.byteLength) : null;
                    } else if (s instanceof ArrayBuffer) {
                        this.body = s.byteLength ? Buffer.from(s) : null;
                    } else if (typeof s === 'string') {
                        this.body = s.length ? Buffer.from(s) : null;
                    } else if (p.isFormDataLike(s) || p.isIterable(s) || p.isBlobLike(s)) {
                        this.body = s;
                    } else {
                        throw new A(
                            'body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable',
                        );
                    }
                    this.completed = false;
                    this.aborted = false;
                    this.upgrade = h || null;
                    this.path = o ? p.buildURL(t, o) : t;
                    this.origin = e;
                    this.idempotent = n == null ? i === 'HEAD' || i === 'GET' : n;
                    this.blocking = l == null ? false : l;
                    this.reset = B == null ? null : B;
                    this.host = null;
                    this.contentLength = null;
                    this.contentType = null;
                    this.headers = '';
                    this.expectContinue = y != null ? y : false;
                    if (Array.isArray(a)) {
                        if (a.length % 2 !== 0) {
                            throw new A('headers array must be even');
                        }
                        for (let e = 0; e < a.length; e += 2) {
                            processHeader(this, a[e], a[e + 1]);
                        }
                    } else if (a && typeof a === 'object') {
                        const e = Object.keys(a);
                        for (let t = 0; t < e.length; t++) {
                            const r = e[t];
                            processHeader(this, r, a[r]);
                        }
                    } else if (a != null) {
                        throw new A('headers must be an object or an array');
                    }
                    if (p.isFormDataLike(this.body)) {
                        if (p.nodeMajor < 16 || (p.nodeMajor === 16 && p.nodeMinor < 8)) {
                            throw new A('Form-Data bodies are only supported in node v16.8 and newer.');
                        }
                        if (!m) {
                            m = r(1472).extractBody;
                        }
                        const [e, t] = m(s);
                        if (this.contentType == null) {
                            this.contentType = t;
                            this.headers += `content-type: ${t}\r\n`;
                        }
                        this.body = e.stream;
                        this.contentLength = e.length;
                    } else if (p.isBlobLike(s) && this.contentType == null && s.type) {
                        this.contentType = s.type;
                        this.headers += `content-type: ${s.type}\r\n`;
                    }
                    p.validateHandler(w, i, h);
                    this.servername = p.getServerName(this.host);
                    this[c] = w;
                    if (g.create.hasSubscribers) {
                        g.create.publish({request: this});
                    }
                }
                onBodySent(e) {
                    if (this[c].onBodySent) {
                        try {
                            return this[c].onBodySent(e);
                        } catch (e) {
                            this.abort(e);
                        }
                    }
                }
                onRequestSent() {
                    if (g.bodySent.hasSubscribers) {
                        g.bodySent.publish({request: this});
                    }
                    if (this[c].onRequestSent) {
                        try {
                            return this[c].onRequestSent();
                        } catch (e) {
                            this.abort(e);
                        }
                    }
                }
                onConnect(e) {
                    s(!this.aborted);
                    s(!this.completed);
                    if (this.error) {
                        e(this.error);
                    } else {
                        this.abort = e;
                        return this[c].onConnect(e);
                    }
                }
                onHeaders(e, t, r, A) {
                    s(!this.aborted);
                    s(!this.completed);
                    if (g.headers.hasSubscribers) {
                        g.headers.publish({request: this, response: {statusCode: e, headers: t, statusText: A}});
                    }
                    try {
                        return this[c].onHeaders(e, t, r, A);
                    } catch (e) {
                        this.abort(e);
                    }
                }
                onData(e) {
                    s(!this.aborted);
                    s(!this.completed);
                    try {
                        return this[c].onData(e);
                    } catch (e) {
                        this.abort(e);
                        return false;
                    }
                }
                onUpgrade(e, t, r) {
                    s(!this.aborted);
                    s(!this.completed);
                    return this[c].onUpgrade(e, t, r);
                }
                onComplete(e) {
                    this.onFinally();
                    s(!this.aborted);
                    this.completed = true;
                    if (g.trailers.hasSubscribers) {
                        g.trailers.publish({request: this, trailers: e});
                    }
                    try {
                        return this[c].onComplete(e);
                    } catch (e) {
                        this.onError(e);
                    }
                }
                onError(e) {
                    this.onFinally();
                    if (g.error.hasSubscribers) {
                        g.error.publish({request: this, error: e});
                    }
                    if (this.aborted) {
                        return;
                    }
                    this.aborted = true;
                    return this[c].onError(e);
                }
                onFinally() {
                    if (this.errorHandler) {
                        this.body.off('error', this.errorHandler);
                        this.errorHandler = null;
                    }
                    if (this.endHandler) {
                        this.body.off('end', this.endHandler);
                        this.endHandler = null;
                    }
                }
                addHeader(e, t) {
                    processHeader(this, e, t);
                    return this;
                }
                static [n](e, t, r) {
                    return new Request(e, t, r);
                }
                static [a](e, t, r) {
                    const i = t.headers;
                    t = {...t, headers: null};
                    const s = new Request(e, t, r);
                    s.headers = {};
                    if (Array.isArray(i)) {
                        if (i.length % 2 !== 0) {
                            throw new A('headers array must be even');
                        }
                        for (let e = 0; e < i.length; e += 2) {
                            processHeader(s, i[e], i[e + 1], true);
                        }
                    } else if (i && typeof i === 'object') {
                        const e = Object.keys(i);
                        for (let t = 0; t < e.length; t++) {
                            const r = e[t];
                            processHeader(s, r, i[r], true);
                        }
                    } else if (i != null) {
                        throw new A('headers must be an object or an array');
                    }
                    return s;
                }
                static [o](e) {
                    const t = e.split('\r\n');
                    const r = {};
                    for (const e of t) {
                        const [t, A] = e.split(': ');
                        if (A == null || A.length === 0) continue;
                        if (r[t]) r[t] += `,${A}`;
                        else r[t] = A;
                    }
                    return r;
                }
            }
            function processHeaderValue(e, t, r) {
                if (t && typeof t === 'object') {
                    throw new A(`invalid ${e} header`);
                }
                t = t != null ? `${t}` : '';
                if (l.exec(t) !== null) {
                    throw new A(`invalid ${e} header`);
                }
                return r ? t : `${e}: ${t}\r\n`;
            }
            function processHeader(e, t, r, s = false) {
                if (r && typeof r === 'object' && !Array.isArray(r)) {
                    throw new A(`invalid ${t} header`);
                } else if (r === undefined) {
                    return;
                }
                if (e.host === null && t.length === 4 && t.toLowerCase() === 'host') {
                    if (l.exec(r) !== null) {
                        throw new A(`invalid ${t} header`);
                    }
                    e.host = r;
                } else if (e.contentLength === null && t.length === 14 && t.toLowerCase() === 'content-length') {
                    e.contentLength = parseInt(r, 10);
                    if (!Number.isFinite(e.contentLength)) {
                        throw new A('invalid content-length header');
                    }
                } else if (e.contentType === null && t.length === 12 && t.toLowerCase() === 'content-type') {
                    e.contentType = r;
                    if (s) e.headers[t] = processHeaderValue(t, r, s);
                    else e.headers += processHeaderValue(t, r);
                } else if (t.length === 17 && t.toLowerCase() === 'transfer-encoding') {
                    throw new A('invalid transfer-encoding header');
                } else if (t.length === 10 && t.toLowerCase() === 'connection') {
                    const t = typeof r === 'string' ? r.toLowerCase() : null;
                    if (t !== 'close' && t !== 'keep-alive') {
                        throw new A('invalid connection header');
                    } else if (t === 'close') {
                        e.reset = true;
                    }
                } else if (t.length === 10 && t.toLowerCase() === 'keep-alive') {
                    throw new A('invalid keep-alive header');
                } else if (t.length === 7 && t.toLowerCase() === 'upgrade') {
                    throw new A('invalid upgrade header');
                } else if (t.length === 6 && t.toLowerCase() === 'expect') {
                    throw new i('expect header not supported');
                } else if (d.exec(t) === null) {
                    throw new A('invalid header key');
                } else {
                    if (Array.isArray(r)) {
                        for (let A = 0; A < r.length; A++) {
                            if (s) {
                                if (e.headers[t]) e.headers[t] += `,${processHeaderValue(t, r[A], s)}`;
                                else e.headers[t] = processHeaderValue(t, r[A], s);
                            } else {
                                e.headers += processHeaderValue(t, r[A]);
                            }
                        }
                    } else {
                        if (s) e.headers[t] = processHeaderValue(t, r, s);
                        else e.headers += processHeaderValue(t, r);
                    }
                }
            }
            e.exports = Request;
        },
        2785: (e) => {
            e.exports = {
                kClose: Symbol('close'),
                kDestroy: Symbol('destroy'),
                kDispatch: Symbol('dispatch'),
                kUrl: Symbol('url'),
                kWriting: Symbol('writing'),
                kResuming: Symbol('resuming'),
                kQueue: Symbol('queue'),
                kConnect: Symbol('connect'),
                kConnecting: Symbol('connecting'),
                kHeadersList: Symbol('headers list'),
                kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
                kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
                kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
                kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
                kKeepAlive: Symbol('keep alive'),
                kHeadersTimeout: Symbol('headers timeout'),
                kBodyTimeout: Symbol('body timeout'),
                kServerName: Symbol('server name'),
                kLocalAddress: Symbol('local address'),
                kHost: Symbol('host'),
                kNoRef: Symbol('no ref'),
                kBodyUsed: Symbol('used'),
                kRunning: Symbol('running'),
                kBlocking: Symbol('blocking'),
                kPending: Symbol('pending'),
                kSize: Symbol('size'),
                kBusy: Symbol('busy'),
                kQueued: Symbol('queued'),
                kFree: Symbol('free'),
                kConnected: Symbol('connected'),
                kClosed: Symbol('closed'),
                kNeedDrain: Symbol('need drain'),
                kReset: Symbol('reset'),
                kDestroyed: Symbol.for('nodejs.stream.destroyed'),
                kMaxHeadersSize: Symbol('max headers size'),
                kRunningIdx: Symbol('running index'),
                kPendingIdx: Symbol('pending index'),
                kError: Symbol('error'),
                kClients: Symbol('clients'),
                kClient: Symbol('client'),
                kParser: Symbol('parser'),
                kOnDestroyed: Symbol('destroy callbacks'),
                kPipelining: Symbol('pipelining'),
                kSocket: Symbol('socket'),
                kHostHeader: Symbol('host header'),
                kConnector: Symbol('connector'),
                kStrictContentLength: Symbol('strict content length'),
                kMaxRedirections: Symbol('maxRedirections'),
                kMaxRequests: Symbol('maxRequestsPerClient'),
                kProxy: Symbol('proxy agent options'),
                kCounter: Symbol('socket request counter'),
                kInterceptors: Symbol('dispatch interceptors'),
                kMaxResponseSize: Symbol('max response size'),
                kHTTP2Session: Symbol('http2Session'),
                kHTTP2SessionState: Symbol('http2Session state'),
                kHTTP2BuildRequest: Symbol('http2 build request'),
                kHTTP1BuildRequest: Symbol('http1 build request'),
                kHTTP2CopyHeaders: Symbol('http2 copy headers'),
                kHTTPConnVersion: Symbol('http connection version'),
                kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
                kConstruct: Symbol('constructable'),
            };
        },
        3983: (e, t, r) => {
            'use strict';
            const A = r(9491);
            const {kDestroyed: i, kBodyUsed: s} = r(2785);
            const {IncomingMessage: a} = r(3685);
            const o = r(2781);
            const n = r(1808);
            const {InvalidArgumentError: p} = r(8045);
            const {Blob: d} = r(4300);
            const l = r(3837);
            const {stringify: u} = r(3477);
            const [c, g] = process.versions.node.split('.').map((e) => Number(e));
            function nop() {}
            function isStream(e) {
                return e && typeof e === 'object' && typeof e.pipe === 'function' && typeof e.on === 'function';
            }
            function isBlobLike(e) {
                return (
                    (d && e instanceof d) ||
                    (e &&
                        typeof e === 'object' &&
                        (typeof e.stream === 'function' || typeof e.arrayBuffer === 'function') &&
                        /^(Blob|File)$/.test(e[Symbol.toStringTag]))
                );
            }
            function buildURL(e, t) {
                if (e.includes('?') || e.includes('#')) {
                    throw new Error('Query params cannot be passed when url already contains "?" or "#".');
                }
                const r = u(t);
                if (r) {
                    e += '?' + r;
                }
                return e;
            }
            function parseURL(e) {
                if (typeof e === 'string') {
                    e = new URL(e);
                    if (!/^https?:/.test(e.origin || e.protocol)) {
                        throw new p('Invalid URL protocol: the URL must start with `http:` or `https:`.');
                    }
                    return e;
                }
                if (!e || typeof e !== 'object') {
                    throw new p('Invalid URL: The URL argument must be a non-null object.');
                }
                if (!/^https?:/.test(e.origin || e.protocol)) {
                    throw new p('Invalid URL protocol: the URL must start with `http:` or `https:`.');
                }
                if (!(e instanceof URL)) {
                    if (e.port != null && e.port !== '' && !Number.isFinite(parseInt(e.port))) {
                        throw new p(
                            'Invalid URL: port must be a valid integer or a string representation of an integer.',
                        );
                    }
                    if (e.path != null && typeof e.path !== 'string') {
                        throw new p('Invalid URL path: the path must be a string or null/undefined.');
                    }
                    if (e.pathname != null && typeof e.pathname !== 'string') {
                        throw new p('Invalid URL pathname: the pathname must be a string or null/undefined.');
                    }
                    if (e.hostname != null && typeof e.hostname !== 'string') {
                        throw new p('Invalid URL hostname: the hostname must be a string or null/undefined.');
                    }
                    if (e.origin != null && typeof e.origin !== 'string') {
                        throw new p('Invalid URL origin: the origin must be a string or null/undefined.');
                    }
                    const t = e.port != null ? e.port : e.protocol === 'https:' ? 443 : 80;
                    let r = e.origin != null ? e.origin : `${e.protocol}//${e.hostname}:${t}`;
                    let A = e.path != null ? e.path : `${e.pathname || ''}${e.search || ''}`;
                    if (r.endsWith('/')) {
                        r = r.substring(0, r.length - 1);
                    }
                    if (A && !A.startsWith('/')) {
                        A = `/${A}`;
                    }
                    e = new URL(r + A);
                }
                return e;
            }
            function parseOrigin(e) {
                e = parseURL(e);
                if (e.pathname !== '/' || e.search || e.hash) {
                    throw new p('invalid url');
                }
                return e;
            }
            function getHostname(e) {
                if (e[0] === '[') {
                    const t = e.indexOf(']');
                    A(t !== -1);
                    return e.substring(1, t);
                }
                const t = e.indexOf(':');
                if (t === -1) return e;
                return e.substring(0, t);
            }
            function getServerName(e) {
                if (!e) {
                    return null;
                }
                A.strictEqual(typeof e, 'string');
                const t = getHostname(e);
                if (n.isIP(t)) {
                    return '';
                }
                return t;
            }
            function deepClone(e) {
                return JSON.parse(JSON.stringify(e));
            }
            function isAsyncIterable(e) {
                return !!(e != null && typeof e[Symbol.asyncIterator] === 'function');
            }
            function isIterable(e) {
                return !!(
                    e != null &&
                    (typeof e[Symbol.iterator] === 'function' || typeof e[Symbol.asyncIterator] === 'function')
                );
            }
            function bodyLength(e) {
                if (e == null) {
                    return 0;
                } else if (isStream(e)) {
                    const t = e._readableState;
                    return t && t.objectMode === false && t.ended === true && Number.isFinite(t.length)
                        ? t.length
                        : null;
                } else if (isBlobLike(e)) {
                    return e.size != null ? e.size : null;
                } else if (isBuffer(e)) {
                    return e.byteLength;
                }
                return null;
            }
            function isDestroyed(e) {
                return !e || !!(e.destroyed || e[i]);
            }
            function isReadableAborted(e) {
                const t = e && e._readableState;
                return isDestroyed(e) && t && !t.endEmitted;
            }
            function destroy(e, t) {
                if (e == null || !isStream(e) || isDestroyed(e)) {
                    return;
                }
                if (typeof e.destroy === 'function') {
                    if (Object.getPrototypeOf(e).constructor === a) {
                        e.socket = null;
                    }
                    e.destroy(t);
                } else if (t) {
                    process.nextTick(
                        (e, t) => {
                            e.emit('error', t);
                        },
                        e,
                        t,
                    );
                }
                if (e.destroyed !== true) {
                    e[i] = true;
                }
            }
            const m = /timeout=(\d+)/;
            function parseKeepAliveTimeout(e) {
                const t = e.toString().match(m);
                return t ? parseInt(t[1], 10) * 1e3 : null;
            }
            function parseHeaders(e, t = {}) {
                if (!Array.isArray(e)) return e;
                for (let r = 0; r < e.length; r += 2) {
                    const A = e[r].toString().toLowerCase();
                    let i = t[A];
                    if (!i) {
                        if (Array.isArray(e[r + 1])) {
                            t[A] = e[r + 1].map((e) => e.toString('utf8'));
                        } else {
                            t[A] = e[r + 1].toString('utf8');
                        }
                    } else {
                        if (!Array.isArray(i)) {
                            i = [i];
                            t[A] = i;
                        }
                        i.push(e[r + 1].toString('utf8'));
                    }
                }
                if ('content-length' in t && 'content-disposition' in t) {
                    t['content-disposition'] = Buffer.from(t['content-disposition']).toString('latin1');
                }
                return t;
            }
            function parseRawHeaders(e) {
                const t = [];
                let r = false;
                let A = -1;
                for (let i = 0; i < e.length; i += 2) {
                    const s = e[i + 0].toString();
                    const a = e[i + 1].toString('utf8');
                    if (s.length === 14 && (s === 'content-length' || s.toLowerCase() === 'content-length')) {
                        t.push(s, a);
                        r = true;
                    } else if (
                        s.length === 19 &&
                        (s === 'content-disposition' || s.toLowerCase() === 'content-disposition')
                    ) {
                        A = t.push(s, a) - 1;
                    } else {
                        t.push(s, a);
                    }
                }
                if (r && A !== -1) {
                    t[A] = Buffer.from(t[A]).toString('latin1');
                }
                return t;
            }
            function isBuffer(e) {
                return e instanceof Uint8Array || Buffer.isBuffer(e);
            }
            function validateHandler(e, t, r) {
                if (!e || typeof e !== 'object') {
                    throw new p('handler must be an object');
                }
                if (typeof e.onConnect !== 'function') {
                    throw new p('invalid onConnect method');
                }
                if (typeof e.onError !== 'function') {
                    throw new p('invalid onError method');
                }
                if (typeof e.onBodySent !== 'function' && e.onBodySent !== undefined) {
                    throw new p('invalid onBodySent method');
                }
                if (r || t === 'CONNECT') {
                    if (typeof e.onUpgrade !== 'function') {
                        throw new p('invalid onUpgrade method');
                    }
                } else {
                    if (typeof e.onHeaders !== 'function') {
                        throw new p('invalid onHeaders method');
                    }
                    if (typeof e.onData !== 'function') {
                        throw new p('invalid onData method');
                    }
                    if (typeof e.onComplete !== 'function') {
                        throw new p('invalid onComplete method');
                    }
                }
            }
            function isDisturbed(e) {
                return !!(
                    e &&
                    (o.isDisturbed
                        ? o.isDisturbed(e) || e[s]
                        : e[s] ||
                          e.readableDidRead ||
                          (e._readableState && e._readableState.dataEmitted) ||
                          isReadableAborted(e))
                );
            }
            function isErrored(e) {
                return !!(e && (o.isErrored ? o.isErrored(e) : /state: 'errored'/.test(l.inspect(e))));
            }
            function isReadable(e) {
                return !!(e && (o.isReadable ? o.isReadable(e) : /state: 'readable'/.test(l.inspect(e))));
            }
            function getSocketInfo(e) {
                return {
                    localAddress: e.localAddress,
                    localPort: e.localPort,
                    remoteAddress: e.remoteAddress,
                    remotePort: e.remotePort,
                    remoteFamily: e.remoteFamily,
                    timeout: e.timeout,
                    bytesWritten: e.bytesWritten,
                    bytesRead: e.bytesRead,
                };
            }
            async function* convertIterableToBuffer(e) {
                for await (const t of e) {
                    yield Buffer.isBuffer(t) ? t : Buffer.from(t);
                }
            }
            let h;
            function ReadableStreamFrom(e) {
                if (!h) {
                    h = r(5356).ReadableStream;
                }
                if (h.from) {
                    return h.from(convertIterableToBuffer(e));
                }
                let t;
                return new h(
                    {
                        async start() {
                            t = e[Symbol.asyncIterator]();
                        },
                        async pull(e) {
                            const {done: r, value: A} = await t.next();
                            if (r) {
                                queueMicrotask(() => {
                                    e.close();
                                });
                            } else {
                                const t = Buffer.isBuffer(A) ? A : Buffer.from(A);
                                e.enqueue(new Uint8Array(t));
                            }
                            return e.desiredSize > 0;
                        },
                        async cancel(e) {
                            await t.return();
                        },
                    },
                    0,
                );
            }
            function isFormDataLike(e) {
                return (
                    e &&
                    typeof e === 'object' &&
                    typeof e.append === 'function' &&
                    typeof e.delete === 'function' &&
                    typeof e.get === 'function' &&
                    typeof e.getAll === 'function' &&
                    typeof e.has === 'function' &&
                    typeof e.set === 'function' &&
                    e[Symbol.toStringTag] === 'FormData'
                );
            }
            function throwIfAborted(e) {
                if (!e) {
                    return;
                }
                if (typeof e.throwIfAborted === 'function') {
                    e.throwIfAborted();
                } else {
                    if (e.aborted) {
                        const e = new Error('The operation was aborted');
                        e.name = 'AbortError';
                        throw e;
                    }
                }
            }
            function addAbortListener(e, t) {
                if ('addEventListener' in e) {
                    e.addEventListener('abort', t, {once: true});
                    return () => e.removeEventListener('abort', t);
                }
                e.addListener('abort', t);
                return () => e.removeListener('abort', t);
            }
            const C = !!String.prototype.toWellFormed;
            function toUSVString(e) {
                if (C) {
                    return `${e}`.toWellFormed();
                } else if (l.toUSVString) {
                    return l.toUSVString(e);
                }
                return `${e}`;
            }
            function parseRangeHeader(e) {
                if (e == null || e === '') return {start: 0, end: null, size: null};
                const t = e ? e.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
                return t
                    ? {start: parseInt(t[1]), end: t[2] ? parseInt(t[2]) : null, size: t[3] ? parseInt(t[3]) : null}
                    : null;
            }
            const Q = Object.create(null);
            Q.enumerable = true;
            e.exports = {
                kEnumerableProperty: Q,
                nop: nop,
                isDisturbed: isDisturbed,
                isErrored: isErrored,
                isReadable: isReadable,
                toUSVString: toUSVString,
                isReadableAborted: isReadableAborted,
                isBlobLike: isBlobLike,
                parseOrigin: parseOrigin,
                parseURL: parseURL,
                getServerName: getServerName,
                isStream: isStream,
                isIterable: isIterable,
                isAsyncIterable: isAsyncIterable,
                isDestroyed: isDestroyed,
                parseRawHeaders: parseRawHeaders,
                parseHeaders: parseHeaders,
                parseKeepAliveTimeout: parseKeepAliveTimeout,
                destroy: destroy,
                bodyLength: bodyLength,
                deepClone: deepClone,
                ReadableStreamFrom: ReadableStreamFrom,
                isBuffer: isBuffer,
                validateHandler: validateHandler,
                getSocketInfo: getSocketInfo,
                isFormDataLike: isFormDataLike,
                buildURL: buildURL,
                throwIfAborted: throwIfAborted,
                addAbortListener: addAbortListener,
                parseRangeHeader: parseRangeHeader,
                nodeMajor: c,
                nodeMinor: g,
                nodeHasAutoSelectFamily: c > 18 || (c === 18 && g >= 13),
                safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE'],
            };
        },
        4839: (e, t, r) => {
            'use strict';
            const A = r(412);
            const {ClientDestroyedError: i, ClientClosedError: s, InvalidArgumentError: a} = r(8045);
            const {kDestroy: o, kClose: n, kDispatch: p, kInterceptors: d} = r(2785);
            const l = Symbol('destroyed');
            const u = Symbol('closed');
            const c = Symbol('onDestroyed');
            const g = Symbol('onClosed');
            const m = Symbol('Intercepted Dispatch');
            class DispatcherBase extends A {
                constructor() {
                    super();
                    this[l] = false;
                    this[c] = null;
                    this[u] = false;
                    this[g] = [];
                }
                get destroyed() {
                    return this[l];
                }
                get closed() {
                    return this[u];
                }
                get interceptors() {
                    return this[d];
                }
                set interceptors(e) {
                    if (e) {
                        for (let t = e.length - 1; t >= 0; t--) {
                            const e = this[d][t];
                            if (typeof e !== 'function') {
                                throw new a('interceptor must be an function');
                            }
                        }
                    }
                    this[d] = e;
                }
                close(e) {
                    if (e === undefined) {
                        return new Promise((e, t) => {
                            this.close((r, A) => (r ? t(r) : e(A)));
                        });
                    }
                    if (typeof e !== 'function') {
                        throw new a('invalid callback');
                    }
                    if (this[l]) {
                        queueMicrotask(() => e(new i(), null));
                        return;
                    }
                    if (this[u]) {
                        if (this[g]) {
                            this[g].push(e);
                        } else {
                            queueMicrotask(() => e(null, null));
                        }
                        return;
                    }
                    this[u] = true;
                    this[g].push(e);
                    const onClosed = () => {
                        const e = this[g];
                        this[g] = null;
                        for (let t = 0; t < e.length; t++) {
                            e[t](null, null);
                        }
                    };
                    this[n]()
                        .then(() => this.destroy())
                        .then(() => {
                            queueMicrotask(onClosed);
                        });
                }
                destroy(e, t) {
                    if (typeof e === 'function') {
                        t = e;
                        e = null;
                    }
                    if (t === undefined) {
                        return new Promise((t, r) => {
                            this.destroy(e, (e, A) => (e ? r(e) : t(A)));
                        });
                    }
                    if (typeof t !== 'function') {
                        throw new a('invalid callback');
                    }
                    if (this[l]) {
                        if (this[c]) {
                            this[c].push(t);
                        } else {
                            queueMicrotask(() => t(null, null));
                        }
                        return;
                    }
                    if (!e) {
                        e = new i();
                    }
                    this[l] = true;
                    this[c] = this[c] || [];
                    this[c].push(t);
                    const onDestroyed = () => {
                        const e = this[c];
                        this[c] = null;
                        for (let t = 0; t < e.length; t++) {
                            e[t](null, null);
                        }
                    };
                    this[o](e).then(() => {
                        queueMicrotask(onDestroyed);
                    });
                }
                [m](e, t) {
                    if (!this[d] || this[d].length === 0) {
                        this[m] = this[p];
                        return this[p](e, t);
                    }
                    let r = this[p].bind(this);
                    for (let e = this[d].length - 1; e >= 0; e--) {
                        r = this[d][e](r);
                    }
                    this[m] = r;
                    return r(e, t);
                }
                dispatch(e, t) {
                    if (!t || typeof t !== 'object') {
                        throw new a('handler must be an object');
                    }
                    try {
                        if (!e || typeof e !== 'object') {
                            throw new a('opts must be an object.');
                        }
                        if (this[l] || this[c]) {
                            throw new i();
                        }
                        if (this[u]) {
                            throw new s();
                        }
                        return this[m](e, t);
                    } catch (e) {
                        if (typeof t.onError !== 'function') {
                            throw new a('invalid onError method');
                        }
                        t.onError(e);
                        return false;
                    }
                }
            }
            e.exports = DispatcherBase;
        },
        412: (e, t, r) => {
            'use strict';
            const A = r(2361);
            class Dispatcher extends A {
                dispatch() {
                    throw new Error('not implemented');
                }
                close() {
                    throw new Error('not implemented');
                }
                destroy() {
                    throw new Error('not implemented');
                }
            }
            e.exports = Dispatcher;
        },
        1472: (e, t, r) => {
            'use strict';
            const A = r(727);
            const i = r(3983);
            const {
                ReadableStreamFrom: s,
                isBlobLike: a,
                isReadableStreamLike: o,
                readableStreamClose: n,
                createDeferredPromise: p,
                fullyReadBody: d,
            } = r(2538);
            const {FormData: l} = r(2015);
            const {kState: u} = r(5861);
            const {webidl: c} = r(1744);
            const {DOMException: g, structuredClone: m} = r(1037);
            const {Blob: h, File: C} = r(4300);
            const {kBodyUsed: Q} = r(2785);
            const B = r(9491);
            const {isErrored: I} = r(3983);
            const {isUint8Array: y, isArrayBuffer: w} = r(9830);
            const {File: b} = r(8511);
            const {parseMIMEType: v, serializeAMimeType: D} = r(685);
            let R = globalThis.ReadableStream;
            const k = C ?? b;
            const S = new TextEncoder();
            const N = new TextDecoder();
            function extractBody(e, t = false) {
                if (!R) {
                    R = r(5356).ReadableStream;
                }
                let A = null;
                if (e instanceof R) {
                    A = e;
                } else if (a(e)) {
                    A = e.stream();
                } else {
                    A = new R({
                        async pull(e) {
                            e.enqueue(typeof d === 'string' ? S.encode(d) : d);
                            queueMicrotask(() => n(e));
                        },
                        start() {},
                        type: undefined,
                    });
                }
                B(o(A));
                let p = null;
                let d = null;
                let l = null;
                let u = null;
                if (typeof e === 'string') {
                    d = e;
                    u = 'text/plain;charset=UTF-8';
                } else if (e instanceof URLSearchParams) {
                    d = e.toString();
                    u = 'application/x-www-form-urlencoded;charset=UTF-8';
                } else if (w(e)) {
                    d = new Uint8Array(e.slice());
                } else if (ArrayBuffer.isView(e)) {
                    d = new Uint8Array(e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength));
                } else if (i.isFormDataLike(e)) {
                    const t = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;
                    const r = `--${t}\r\nContent-Disposition: form-data`;
                    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ const escape = (
                        e,
                    ) => e.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22');
                    const normalizeLinefeeds = (e) => e.replace(/\r?\n|\r/g, '\r\n');
                    const A = [];
                    const i = new Uint8Array([13, 10]);
                    l = 0;
                    let s = false;
                    for (const [t, a] of e) {
                        if (typeof a === 'string') {
                            const e = S.encode(
                                r +
                                    `; name="${escape(normalizeLinefeeds(t))}"` +
                                    `\r\n\r\n${normalizeLinefeeds(a)}\r\n`,
                            );
                            A.push(e);
                            l += e.byteLength;
                        } else {
                            const e = S.encode(
                                `${r}; name="${escape(normalizeLinefeeds(t))}"` +
                                    (a.name ? `; filename="${escape(a.name)}"` : '') +
                                    '\r\n' +
                                    `Content-Type: ${a.type || 'application/octet-stream'}\r\n\r\n`,
                            );
                            A.push(e, a, i);
                            if (typeof a.size === 'number') {
                                l += e.byteLength + a.size + i.byteLength;
                            } else {
                                s = true;
                            }
                        }
                    }
                    const a = S.encode(`--${t}--`);
                    A.push(a);
                    l += a.byteLength;
                    if (s) {
                        l = null;
                    }
                    d = e;
                    p = async function* () {
                        for (const e of A) {
                            if (e.stream) {
                                yield* e.stream();
                            } else {
                                yield e;
                            }
                        }
                    };
                    u = 'multipart/form-data; boundary=' + t;
                } else if (a(e)) {
                    d = e;
                    l = e.size;
                    if (e.type) {
                        u = e.type;
                    }
                } else if (typeof e[Symbol.asyncIterator] === 'function') {
                    if (t) {
                        throw new TypeError('keepalive');
                    }
                    if (i.isDisturbed(e) || e.locked) {
                        throw new TypeError('Response body object should not be disturbed or locked');
                    }
                    A = e instanceof R ? e : s(e);
                }
                if (typeof d === 'string' || i.isBuffer(d)) {
                    l = Buffer.byteLength(d);
                }
                if (p != null) {
                    let t;
                    A = new R({
                        async start() {
                            t = p(e)[Symbol.asyncIterator]();
                        },
                        async pull(e) {
                            const {value: r, done: i} = await t.next();
                            if (i) {
                                queueMicrotask(() => {
                                    e.close();
                                });
                            } else {
                                if (!I(A)) {
                                    e.enqueue(new Uint8Array(r));
                                }
                            }
                            return e.desiredSize > 0;
                        },
                        async cancel(e) {
                            await t.return();
                        },
                        type: undefined,
                    });
                }
                const c = {stream: A, source: d, length: l};
                return [c, u];
            }
            function safelyExtractBody(e, t = false) {
                if (!R) {
                    R = r(5356).ReadableStream;
                }
                if (e instanceof R) {
                    B(!i.isDisturbed(e), 'The body has already been consumed.');
                    B(!e.locked, 'The stream is locked.');
                }
                return extractBody(e, t);
            }
            function cloneBody(e) {
                const [t, r] = e.stream.tee();
                const A = m(r, {transfer: [r]});
                const [, i] = A.tee();
                e.stream = t;
                return {stream: i, length: e.length, source: e.source};
            }
            async function* consumeBody(e) {
                if (e) {
                    if (y(e)) {
                        yield e;
                    } else {
                        const t = e.stream;
                        if (i.isDisturbed(t)) {
                            throw new TypeError('The body has already been consumed.');
                        }
                        if (t.locked) {
                            throw new TypeError('The stream is locked.');
                        }
                        t[Q] = true;
                        yield* t;
                    }
                }
            }
            function throwIfAborted(e) {
                if (e.aborted) {
                    throw new g('The operation was aborted.', 'AbortError');
                }
            }
            function bodyMixinMethods(e) {
                const t = {
                    blob() {
                        return specConsumeBody(
                            this,
                            (e) => {
                                let t = bodyMimeType(this);
                                if (t === 'failure') {
                                    t = '';
                                } else if (t) {
                                    t = D(t);
                                }
                                return new h([e], {type: t});
                            },
                            e,
                        );
                    },
                    arrayBuffer() {
                        return specConsumeBody(this, (e) => new Uint8Array(e).buffer, e);
                    },
                    text() {
                        return specConsumeBody(this, utf8DecodeBytes, e);
                    },
                    json() {
                        return specConsumeBody(this, parseJSONFromBytes, e);
                    },
                    async formData() {
                        c.brandCheck(this, e);
                        throwIfAborted(this[u]);
                        const t = this.headers.get('Content-Type');
                        if (/multipart\/form-data/.test(t)) {
                            const e = {};
                            for (const [t, r] of this.headers) e[t.toLowerCase()] = r;
                            const t = new l();
                            let r;
                            try {
                                r = new A({headers: e, preservePath: true});
                            } catch (e) {
                                throw new g(`${e}`, 'AbortError');
                            }
                            r.on('field', (e, r) => {
                                t.append(e, r);
                            });
                            r.on('file', (e, r, A, i, s) => {
                                const a = [];
                                if (i === 'base64' || i.toLowerCase() === 'base64') {
                                    let i = '';
                                    r.on('data', (e) => {
                                        i += e.toString().replace(/[\r\n]/gm, '');
                                        const t = i.length - (i.length % 4);
                                        a.push(Buffer.from(i.slice(0, t), 'base64'));
                                        i = i.slice(t);
                                    });
                                    r.on('end', () => {
                                        a.push(Buffer.from(i, 'base64'));
                                        t.append(e, new k(a, A, {type: s}));
                                    });
                                } else {
                                    r.on('data', (e) => {
                                        a.push(e);
                                    });
                                    r.on('end', () => {
                                        t.append(e, new k(a, A, {type: s}));
                                    });
                                }
                            });
                            const i = new Promise((e, t) => {
                                r.on('finish', e);
                                r.on('error', (e) => t(new TypeError(e)));
                            });
                            if (this.body !== null) for await (const e of consumeBody(this[u].body)) r.write(e);
                            r.end();
                            await i;
                            return t;
                        } else if (/application\/x-www-form-urlencoded/.test(t)) {
                            let e;
                            try {
                                let t = '';
                                const r = new TextDecoder('utf-8', {ignoreBOM: true});
                                for await (const e of consumeBody(this[u].body)) {
                                    if (!y(e)) {
                                        throw new TypeError('Expected Uint8Array chunk');
                                    }
                                    t += r.decode(e, {stream: true});
                                }
                                t += r.decode();
                                e = new URLSearchParams(t);
                            } catch (e) {
                                throw Object.assign(new TypeError(), {cause: e});
                            }
                            const t = new l();
                            for (const [r, A] of e) {
                                t.append(r, A);
                            }
                            return t;
                        } else {
                            await Promise.resolve();
                            throwIfAborted(this[u]);
                            throw c.errors.exception({
                                header: `${e.name}.formData`,
                                message: 'Could not parse content as FormData.',
                            });
                        }
                    },
                };
                return t;
            }
            function mixinBody(e) {
                Object.assign(e.prototype, bodyMixinMethods(e));
            }
            async function specConsumeBody(e, t, r) {
                c.brandCheck(e, r);
                throwIfAborted(e[u]);
                if (bodyUnusable(e[u].body)) {
                    throw new TypeError('Body is unusable');
                }
                const A = p();
                const errorSteps = (e) => A.reject(e);
                const successSteps = (e) => {
                    try {
                        A.resolve(t(e));
                    } catch (e) {
                        errorSteps(e);
                    }
                };
                if (e[u].body == null) {
                    successSteps(new Uint8Array());
                    return A.promise;
                }
                await d(e[u].body, successSteps, errorSteps);
                return A.promise;
            }
            function bodyUnusable(e) {
                return e != null && (e.stream.locked || i.isDisturbed(e.stream));
            }
            function utf8DecodeBytes(e) {
                if (e.length === 0) {
                    return '';
                }
                if (e[0] === 239 && e[1] === 187 && e[2] === 191) {
                    e = e.subarray(3);
                }
                const t = N.decode(e);
                return t;
            }
            function parseJSONFromBytes(e) {
                return JSON.parse(utf8DecodeBytes(e));
            }
            function bodyMimeType(e) {
                const {headersList: t} = e[u];
                const r = t.get('content-type');
                if (r === null) {
                    return 'failure';
                }
                return v(r);
            }
            e.exports = {
                extractBody: extractBody,
                safelyExtractBody: safelyExtractBody,
                cloneBody: cloneBody,
                mixinBody: mixinBody,
            };
        },
        1037: (e, t, r) => {
            'use strict';
            const {MessageChannel: A, receiveMessageOnPort: i} = r(1267);
            const s = ['GET', 'HEAD', 'POST'];
            const a = new Set(s);
            const o = [101, 204, 205, 304];
            const n = [301, 302, 303, 307, 308];
            const p = new Set(n);
            const d = [
                '1',
                '7',
                '9',
                '11',
                '13',
                '15',
                '17',
                '19',
                '20',
                '21',
                '22',
                '23',
                '25',
                '37',
                '42',
                '43',
                '53',
                '69',
                '77',
                '79',
                '87',
                '95',
                '101',
                '102',
                '103',
                '104',
                '109',
                '110',
                '111',
                '113',
                '115',
                '117',
                '119',
                '123',
                '135',
                '137',
                '139',
                '143',
                '161',
                '179',
                '389',
                '427',
                '465',
                '512',
                '513',
                '514',
                '515',
                '526',
                '530',
                '531',
                '532',
                '540',
                '548',
                '554',
                '556',
                '563',
                '587',
                '601',
                '636',
                '989',
                '990',
                '993',
                '995',
                '1719',
                '1720',
                '1723',
                '2049',
                '3659',
                '4045',
                '5060',
                '5061',
                '6000',
                '6566',
                '6665',
                '6666',
                '6667',
                '6668',
                '6669',
                '6697',
                '10080',
            ];
            const l = new Set(d);
            const u = [
                '',
                'no-referrer',
                'no-referrer-when-downgrade',
                'same-origin',
                'origin',
                'strict-origin',
                'origin-when-cross-origin',
                'strict-origin-when-cross-origin',
                'unsafe-url',
            ];
            const c = new Set(u);
            const g = ['follow', 'manual', 'error'];
            const m = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];
            const h = new Set(m);
            const C = ['navigate', 'same-origin', 'no-cors', 'cors'];
            const Q = ['omit', 'same-origin', 'include'];
            const B = ['default', 'no-store', 'reload', 'no-cache', 'force-cache', 'only-if-cached'];
            const I = ['content-encoding', 'content-language', 'content-location', 'content-type', 'content-length'];
            const y = ['half'];
            const w = ['CONNECT', 'TRACE', 'TRACK'];
            const b = new Set(w);
            const v = [
                'audio',
                'audioworklet',
                'font',
                'image',
                'manifest',
                'paintworklet',
                'script',
                'style',
                'track',
                'video',
                'xslt',
                '',
            ];
            const D = new Set(v);
            const R =
                globalThis.DOMException ??
                (() => {
                    try {
                        atob('~');
                    } catch (e) {
                        return Object.getPrototypeOf(e).constructor;
                    }
                })();
            let k;
            const S =
                globalThis.structuredClone ??
                function structuredClone(e, t = undefined) {
                    if (arguments.length === 0) {
                        throw new TypeError('missing argument');
                    }
                    if (!k) {
                        k = new A();
                    }
                    k.port1.unref();
                    k.port2.unref();
                    k.port1.postMessage(e, t?.transfer);
                    return i(k.port2).message;
                };
            e.exports = {
                DOMException: R,
                structuredClone: S,
                subresource: v,
                forbiddenMethods: w,
                requestBodyHeader: I,
                referrerPolicy: u,
                requestRedirect: g,
                requestMode: C,
                requestCredentials: Q,
                requestCache: B,
                redirectStatus: n,
                corsSafeListedMethods: s,
                nullBodyStatus: o,
                safeMethods: m,
                badPorts: d,
                requestDuplex: y,
                subresourceSet: D,
                badPortsSet: l,
                redirectStatusSet: p,
                corsSafeListedMethodsSet: a,
                safeMethodsSet: h,
                forbiddenMethodsSet: b,
                referrerPolicySet: c,
            };
        },
        685: (e, t, r) => {
            const A = r(9491);
            const {atob: i} = r(4300);
            const {isomorphicDecode: s} = r(2538);
            const a = new TextEncoder();
            const o = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
            const n = /(\u000A|\u000D|\u0009|\u0020)/;
            const p = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
            function dataURLProcessor(e) {
                A(e.protocol === 'data:');
                let t = URLSerializer(e, true);
                t = t.slice(5);
                const r = {position: 0};
                let i = collectASequenceOfCodePointsFast(',', t, r);
                const a = i.length;
                i = removeASCIIWhitespace(i, true, true);
                if (r.position >= t.length) {
                    return 'failure';
                }
                r.position++;
                const o = t.slice(a + 1);
                let n = stringPercentDecode(o);
                if (/;(\u0020){0,}base64$/i.test(i)) {
                    const e = s(n);
                    n = forgivingBase64(e);
                    if (n === 'failure') {
                        return 'failure';
                    }
                    i = i.slice(0, -6);
                    i = i.replace(/(\u0020)+$/, '');
                    i = i.slice(0, -1);
                }
                if (i.startsWith(';')) {
                    i = 'text/plain' + i;
                }
                let p = parseMIMEType(i);
                if (p === 'failure') {
                    p = parseMIMEType('text/plain;charset=US-ASCII');
                }
                return {mimeType: p, body: n};
            }
            function URLSerializer(e, t = false) {
                if (!t) {
                    return e.href;
                }
                const r = e.href;
                const A = e.hash.length;
                return A === 0 ? r : r.substring(0, r.length - A);
            }
            function collectASequenceOfCodePoints(e, t, r) {
                let A = '';
                while (r.position < t.length && e(t[r.position])) {
                    A += t[r.position];
                    r.position++;
                }
                return A;
            }
            function collectASequenceOfCodePointsFast(e, t, r) {
                const A = t.indexOf(e, r.position);
                const i = r.position;
                if (A === -1) {
                    r.position = t.length;
                    return t.slice(i);
                }
                r.position = A;
                return t.slice(i, r.position);
            }
            function stringPercentDecode(e) {
                const t = a.encode(e);
                return percentDecode(t);
            }
            function percentDecode(e) {
                const t = [];
                for (let r = 0; r < e.length; r++) {
                    const A = e[r];
                    if (A !== 37) {
                        t.push(A);
                    } else if (A === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(e[r + 1], e[r + 2]))) {
                        t.push(37);
                    } else {
                        const A = String.fromCharCode(e[r + 1], e[r + 2]);
                        const i = Number.parseInt(A, 16);
                        t.push(i);
                        r += 2;
                    }
                }
                return Uint8Array.from(t);
            }
            function parseMIMEType(e) {
                e = removeHTTPWhitespace(e, true, true);
                const t = {position: 0};
                const r = collectASequenceOfCodePointsFast('/', e, t);
                if (r.length === 0 || !o.test(r)) {
                    return 'failure';
                }
                if (t.position > e.length) {
                    return 'failure';
                }
                t.position++;
                let A = collectASequenceOfCodePointsFast(';', e, t);
                A = removeHTTPWhitespace(A, false, true);
                if (A.length === 0 || !o.test(A)) {
                    return 'failure';
                }
                const i = r.toLowerCase();
                const s = A.toLowerCase();
                const a = {type: i, subtype: s, parameters: new Map(), essence: `${i}/${s}`};
                while (t.position < e.length) {
                    t.position++;
                    collectASequenceOfCodePoints((e) => n.test(e), e, t);
                    let r = collectASequenceOfCodePoints((e) => e !== ';' && e !== '=', e, t);
                    r = r.toLowerCase();
                    if (t.position < e.length) {
                        if (e[t.position] === ';') {
                            continue;
                        }
                        t.position++;
                    }
                    if (t.position > e.length) {
                        break;
                    }
                    let A = null;
                    if (e[t.position] === '"') {
                        A = collectAnHTTPQuotedString(e, t, true);
                        collectASequenceOfCodePointsFast(';', e, t);
                    } else {
                        A = collectASequenceOfCodePointsFast(';', e, t);
                        A = removeHTTPWhitespace(A, false, true);
                        if (A.length === 0) {
                            continue;
                        }
                    }
                    if (r.length !== 0 && o.test(r) && (A.length === 0 || p.test(A)) && !a.parameters.has(r)) {
                        a.parameters.set(r, A);
                    }
                }
                return a;
            }
            function forgivingBase64(e) {
                e = e.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '');
                if (e.length % 4 === 0) {
                    e = e.replace(/=?=$/, '');
                }
                if (e.length % 4 === 1) {
                    return 'failure';
                }
                if (/[^+/0-9A-Za-z]/.test(e)) {
                    return 'failure';
                }
                const t = i(e);
                const r = new Uint8Array(t.length);
                for (let e = 0; e < t.length; e++) {
                    r[e] = t.charCodeAt(e);
                }
                return r;
            }
            function collectAnHTTPQuotedString(e, t, r) {
                const i = t.position;
                let s = '';
                A(e[t.position] === '"');
                t.position++;
                while (true) {
                    s += collectASequenceOfCodePoints((e) => e !== '"' && e !== '\\', e, t);
                    if (t.position >= e.length) {
                        break;
                    }
                    const r = e[t.position];
                    t.position++;
                    if (r === '\\') {
                        if (t.position >= e.length) {
                            s += '\\';
                            break;
                        }
                        s += e[t.position];
                        t.position++;
                    } else {
                        A(r === '"');
                        break;
                    }
                }
                if (r) {
                    return s;
                }
                return e.slice(i, t.position);
            }
            function serializeAMimeType(e) {
                A(e !== 'failure');
                const {parameters: t, essence: r} = e;
                let i = r;
                for (let [e, r] of t.entries()) {
                    i += ';';
                    i += e;
                    i += '=';
                    if (!o.test(r)) {
                        r = r.replace(/(\\|")/g, '\\$1');
                        r = '"' + r;
                        r += '"';
                    }
                    i += r;
                }
                return i;
            }
            function isHTTPWhiteSpace(e) {
                return e === '\r' || e === '\n' || e === '\t' || e === ' ';
            }
            function removeHTTPWhitespace(e, t = true, r = true) {
                let A = 0;
                let i = e.length - 1;
                if (t) {
                    for (; A < e.length && isHTTPWhiteSpace(e[A]); A++);
                }
                if (r) {
                    for (; i > 0 && isHTTPWhiteSpace(e[i]); i--);
                }
                return e.slice(A, i + 1);
            }
            function isASCIIWhitespace(e) {
                return e === '\r' || e === '\n' || e === '\t' || e === '\f' || e === ' ';
            }
            function removeASCIIWhitespace(e, t = true, r = true) {
                let A = 0;
                let i = e.length - 1;
                if (t) {
                    for (; A < e.length && isASCIIWhitespace(e[A]); A++);
                }
                if (r) {
                    for (; i > 0 && isASCIIWhitespace(e[i]); i--);
                }
                return e.slice(A, i + 1);
            }
            e.exports = {
                dataURLProcessor: dataURLProcessor,
                URLSerializer: URLSerializer,
                collectASequenceOfCodePoints: collectASequenceOfCodePoints,
                collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast,
                stringPercentDecode: stringPercentDecode,
                parseMIMEType: parseMIMEType,
                collectAnHTTPQuotedString: collectAnHTTPQuotedString,
                serializeAMimeType: serializeAMimeType,
            };
        },
        8511: (e, t, r) => {
            'use strict';
            const {Blob: A, File: i} = r(4300);
            const {types: s} = r(3837);
            const {kState: a} = r(5861);
            const {isBlobLike: o} = r(2538);
            const {webidl: n} = r(1744);
            const {parseMIMEType: p, serializeAMimeType: d} = r(685);
            const {kEnumerableProperty: l} = r(3983);
            const u = new TextEncoder();
            class File extends A {
                constructor(e, t, r = {}) {
                    n.argumentLengthCheck(arguments, 2, {header: 'File constructor'});
                    e = n.converters['sequence<BlobPart>'](e);
                    t = n.converters.USVString(t);
                    r = n.converters.FilePropertyBag(r);
                    const A = t;
                    let i = r.type;
                    let s;
                    e: {
                        if (i) {
                            i = p(i);
                            if (i === 'failure') {
                                i = '';
                                break e;
                            }
                            i = d(i).toLowerCase();
                        }
                        s = r.lastModified;
                    }
                    super(processBlobParts(e, r), {type: i});
                    this[a] = {name: A, lastModified: s, type: i};
                }
                get name() {
                    n.brandCheck(this, File);
                    return this[a].name;
                }
                get lastModified() {
                    n.brandCheck(this, File);
                    return this[a].lastModified;
                }
                get type() {
                    n.brandCheck(this, File);
                    return this[a].type;
                }
            }
            class FileLike {
                constructor(e, t, r = {}) {
                    const A = t;
                    const i = r.type;
                    const s = r.lastModified ?? Date.now();
                    this[a] = {blobLike: e, name: A, type: i, lastModified: s};
                }
                stream(...e) {
                    n.brandCheck(this, FileLike);
                    return this[a].blobLike.stream(...e);
                }
                arrayBuffer(...e) {
                    n.brandCheck(this, FileLike);
                    return this[a].blobLike.arrayBuffer(...e);
                }
                slice(...e) {
                    n.brandCheck(this, FileLike);
                    return this[a].blobLike.slice(...e);
                }
                text(...e) {
                    n.brandCheck(this, FileLike);
                    return this[a].blobLike.text(...e);
                }
                get size() {
                    n.brandCheck(this, FileLike);
                    return this[a].blobLike.size;
                }
                get type() {
                    n.brandCheck(this, FileLike);
                    return this[a].blobLike.type;
                }
                get name() {
                    n.brandCheck(this, FileLike);
                    return this[a].name;
                }
                get lastModified() {
                    n.brandCheck(this, FileLike);
                    return this[a].lastModified;
                }
                get [Symbol.toStringTag]() {
                    return 'File';
                }
            }
            Object.defineProperties(File.prototype, {
                [Symbol.toStringTag]: {value: 'File', configurable: true},
                name: l,
                lastModified: l,
            });
            n.converters.Blob = n.interfaceConverter(A);
            n.converters.BlobPart = function (e, t) {
                if (n.util.Type(e) === 'Object') {
                    if (o(e)) {
                        return n.converters.Blob(e, {strict: false});
                    }
                    if (ArrayBuffer.isView(e) || s.isAnyArrayBuffer(e)) {
                        return n.converters.BufferSource(e, t);
                    }
                }
                return n.converters.USVString(e, t);
            };
            n.converters['sequence<BlobPart>'] = n.sequenceConverter(n.converters.BlobPart);
            n.converters.FilePropertyBag = n.dictionaryConverter([
                {
                    key: 'lastModified',
                    converter: n.converters['long long'],
                    get defaultValue() {
                        return Date.now();
                    },
                },
                {key: 'type', converter: n.converters.DOMString, defaultValue: ''},
                {
                    key: 'endings',
                    converter: (e) => {
                        e = n.converters.DOMString(e);
                        e = e.toLowerCase();
                        if (e !== 'native') {
                            e = 'transparent';
                        }
                        return e;
                    },
                    defaultValue: 'transparent',
                },
            ]);
            function processBlobParts(e, t) {
                const r = [];
                for (const A of e) {
                    if (typeof A === 'string') {
                        let e = A;
                        if (t.endings === 'native') {
                            e = convertLineEndingsNative(e);
                        }
                        r.push(u.encode(e));
                    } else if (s.isAnyArrayBuffer(A) || s.isTypedArray(A)) {
                        if (!A.buffer) {
                            r.push(new Uint8Array(A));
                        } else {
                            r.push(new Uint8Array(A.buffer, A.byteOffset, A.byteLength));
                        }
                    } else if (o(A)) {
                        r.push(A);
                    }
                }
                return r;
            }
            function convertLineEndingsNative(e) {
                let t = '\n';
                if (process.platform === 'win32') {
                    t = '\r\n';
                }
                return e.replace(/\r?\n/g, t);
            }
            function isFileLike(e) {
                return (
                    (i && e instanceof i) ||
                    e instanceof File ||
                    (e &&
                        (typeof e.stream === 'function' || typeof e.arrayBuffer === 'function') &&
                        e[Symbol.toStringTag] === 'File')
                );
            }
            e.exports = {File: File, FileLike: FileLike, isFileLike: isFileLike};
        },
        2015: (e, t, r) => {
            'use strict';
            const {isBlobLike: A, toUSVString: i, makeIterator: s} = r(2538);
            const {kState: a} = r(5861);
            const {File: o, FileLike: n, isFileLike: p} = r(8511);
            const {webidl: d} = r(1744);
            const {Blob: l, File: u} = r(4300);
            const c = u ?? o;
            class FormData {
                constructor(e) {
                    if (e !== undefined) {
                        throw d.errors.conversionFailed({
                            prefix: 'FormData constructor',
                            argument: 'Argument 1',
                            types: ['undefined'],
                        });
                    }
                    this[a] = [];
                }
                append(e, t, r = undefined) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 2, {header: 'FormData.append'});
                    if (arguments.length === 3 && !A(t)) {
                        throw new TypeError(
                            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'",
                        );
                    }
                    e = d.converters.USVString(e);
                    t = A(t) ? d.converters.Blob(t, {strict: false}) : d.converters.USVString(t);
                    r = arguments.length === 3 ? d.converters.USVString(r) : undefined;
                    const i = makeEntry(e, t, r);
                    this[a].push(i);
                }
                delete(e) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 1, {header: 'FormData.delete'});
                    e = d.converters.USVString(e);
                    this[a] = this[a].filter((t) => t.name !== e);
                }
                get(e) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 1, {header: 'FormData.get'});
                    e = d.converters.USVString(e);
                    const t = this[a].findIndex((t) => t.name === e);
                    if (t === -1) {
                        return null;
                    }
                    return this[a][t].value;
                }
                getAll(e) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 1, {header: 'FormData.getAll'});
                    e = d.converters.USVString(e);
                    return this[a].filter((t) => t.name === e).map((e) => e.value);
                }
                has(e) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 1, {header: 'FormData.has'});
                    e = d.converters.USVString(e);
                    return this[a].findIndex((t) => t.name === e) !== -1;
                }
                set(e, t, r = undefined) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 2, {header: 'FormData.set'});
                    if (arguments.length === 3 && !A(t)) {
                        throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
                    }
                    e = d.converters.USVString(e);
                    t = A(t) ? d.converters.Blob(t, {strict: false}) : d.converters.USVString(t);
                    r = arguments.length === 3 ? i(r) : undefined;
                    const s = makeEntry(e, t, r);
                    const o = this[a].findIndex((t) => t.name === e);
                    if (o !== -1) {
                        this[a] = [...this[a].slice(0, o), s, ...this[a].slice(o + 1).filter((t) => t.name !== e)];
                    } else {
                        this[a].push(s);
                    }
                }
                entries() {
                    d.brandCheck(this, FormData);
                    return s(() => this[a].map((e) => [e.name, e.value]), 'FormData', 'key+value');
                }
                keys() {
                    d.brandCheck(this, FormData);
                    return s(() => this[a].map((e) => [e.name, e.value]), 'FormData', 'key');
                }
                values() {
                    d.brandCheck(this, FormData);
                    return s(() => this[a].map((e) => [e.name, e.value]), 'FormData', 'value');
                }
                forEach(e, t = globalThis) {
                    d.brandCheck(this, FormData);
                    d.argumentLengthCheck(arguments, 1, {header: 'FormData.forEach'});
                    if (typeof e !== 'function') {
                        throw new TypeError(
                            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.",
                        );
                    }
                    for (const [r, A] of this) {
                        e.apply(t, [A, r, this]);
                    }
                }
            }
            FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
            Object.defineProperties(FormData.prototype, {
                [Symbol.toStringTag]: {value: 'FormData', configurable: true},
            });
            function makeEntry(e, t, r) {
                e = Buffer.from(e).toString('utf8');
                if (typeof t === 'string') {
                    t = Buffer.from(t).toString('utf8');
                } else {
                    if (!p(t)) {
                        t = t instanceof l ? new c([t], 'blob', {type: t.type}) : new n(t, 'blob', {type: t.type});
                    }
                    if (r !== undefined) {
                        const e = {type: t.type, lastModified: t.lastModified};
                        t = (u && t instanceof u) || t instanceof o ? new c([t], r, e) : new n(t, r, e);
                    }
                }
                return {name: e, value: t};
            }
            e.exports = {FormData: FormData};
        },
        1246: (e) => {
            'use strict';
            const t = Symbol.for('undici.globalOrigin.1');
            function getGlobalOrigin() {
                return globalThis[t];
            }
            function setGlobalOrigin(e) {
                if (e === undefined) {
                    Object.defineProperty(globalThis, t, {
                        value: undefined,
                        writable: true,
                        enumerable: false,
                        configurable: false,
                    });
                    return;
                }
                const r = new URL(e);
                if (r.protocol !== 'http:' && r.protocol !== 'https:') {
                    throw new TypeError(`Only http & https urls are allowed, received ${r.protocol}`);
                }
                Object.defineProperty(globalThis, t, {
                    value: r,
                    writable: true,
                    enumerable: false,
                    configurable: false,
                });
            }
            e.exports = {getGlobalOrigin: getGlobalOrigin, setGlobalOrigin: setGlobalOrigin};
        },
        554: (e, t, r) => {
            'use strict';
            const {kHeadersList: A, kConstruct: i} = r(2785);
            const {kGuard: s} = r(5861);
            const {kEnumerableProperty: a} = r(3983);
            const {makeIterator: o, isValidHeaderName: n, isValidHeaderValue: p} = r(2538);
            const {webidl: d} = r(1744);
            const l = r(9491);
            const u = Symbol('headers map');
            const c = Symbol('headers map sorted');
            function isHTTPWhiteSpaceCharCode(e) {
                return e === 10 || e === 13 || e === 9 || e === 32;
            }
            function headerValueNormalize(e) {
                let t = 0;
                let r = e.length;
                while (r > t && isHTTPWhiteSpaceCharCode(e.charCodeAt(r - 1))) --r;
                while (r > t && isHTTPWhiteSpaceCharCode(e.charCodeAt(t))) ++t;
                return t === 0 && r === e.length ? e : e.substring(t, r);
            }
            function fill(e, t) {
                if (Array.isArray(t)) {
                    for (let r = 0; r < t.length; ++r) {
                        const A = t[r];
                        if (A.length !== 2) {
                            throw d.errors.exception({
                                header: 'Headers constructor',
                                message: `expected name/value pair to be length 2, found ${A.length}.`,
                            });
                        }
                        appendHeader(e, A[0], A[1]);
                    }
                } else if (typeof t === 'object' && t !== null) {
                    const r = Object.keys(t);
                    for (let A = 0; A < r.length; ++A) {
                        appendHeader(e, r[A], t[r[A]]);
                    }
                } else {
                    throw d.errors.conversionFailed({
                        prefix: 'Headers constructor',
                        argument: 'Argument 1',
                        types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>'],
                    });
                }
            }
            function appendHeader(e, t, r) {
                r = headerValueNormalize(r);
                if (!n(t)) {
                    throw d.errors.invalidArgument({prefix: 'Headers.append', value: t, type: 'header name'});
                } else if (!p(r)) {
                    throw d.errors.invalidArgument({prefix: 'Headers.append', value: r, type: 'header value'});
                }
                if (e[s] === 'immutable') {
                    throw new TypeError('immutable');
                } else if (e[s] === 'request-no-cors') {
                }
                return e[A].append(t, r);
            }
            class HeadersList {
                cookies = null;
                constructor(e) {
                    if (e instanceof HeadersList) {
                        this[u] = new Map(e[u]);
                        this[c] = e[c];
                        this.cookies = e.cookies === null ? null : [...e.cookies];
                    } else {
                        this[u] = new Map(e);
                        this[c] = null;
                    }
                }
                contains(e) {
                    e = e.toLowerCase();
                    return this[u].has(e);
                }
                clear() {
                    this[u].clear();
                    this[c] = null;
                    this.cookies = null;
                }
                append(e, t) {
                    this[c] = null;
                    const r = e.toLowerCase();
                    const A = this[u].get(r);
                    if (A) {
                        const e = r === 'cookie' ? '; ' : ', ';
                        this[u].set(r, {name: A.name, value: `${A.value}${e}${t}`});
                    } else {
                        this[u].set(r, {name: e, value: t});
                    }
                    if (r === 'set-cookie') {
                        this.cookies ??= [];
                        this.cookies.push(t);
                    }
                }
                set(e, t) {
                    this[c] = null;
                    const r = e.toLowerCase();
                    if (r === 'set-cookie') {
                        this.cookies = [t];
                    }
                    this[u].set(r, {name: e, value: t});
                }
                delete(e) {
                    this[c] = null;
                    e = e.toLowerCase();
                    if (e === 'set-cookie') {
                        this.cookies = null;
                    }
                    this[u].delete(e);
                }
                get(e) {
                    const t = this[u].get(e.toLowerCase());
                    return t === undefined ? null : t.value;
                }
                *[Symbol.iterator]() {
                    for (const [e, {value: t}] of this[u]) {
                        yield [e, t];
                    }
                }
                get entries() {
                    const e = {};
                    if (this[u].size) {
                        for (const {name: t, value: r} of this[u].values()) {
                            e[t] = r;
                        }
                    }
                    return e;
                }
            }
            class Headers {
                constructor(e = undefined) {
                    if (e === i) {
                        return;
                    }
                    this[A] = new HeadersList();
                    this[s] = 'none';
                    if (e !== undefined) {
                        e = d.converters.HeadersInit(e);
                        fill(this, e);
                    }
                }
                append(e, t) {
                    d.brandCheck(this, Headers);
                    d.argumentLengthCheck(arguments, 2, {header: 'Headers.append'});
                    e = d.converters.ByteString(e);
                    t = d.converters.ByteString(t);
                    return appendHeader(this, e, t);
                }
                delete(e) {
                    d.brandCheck(this, Headers);
                    d.argumentLengthCheck(arguments, 1, {header: 'Headers.delete'});
                    e = d.converters.ByteString(e);
                    if (!n(e)) {
                        throw d.errors.invalidArgument({prefix: 'Headers.delete', value: e, type: 'header name'});
                    }
                    if (this[s] === 'immutable') {
                        throw new TypeError('immutable');
                    } else if (this[s] === 'request-no-cors') {
                    }
                    if (!this[A].contains(e)) {
                        return;
                    }
                    this[A].delete(e);
                }
                get(e) {
                    d.brandCheck(this, Headers);
                    d.argumentLengthCheck(arguments, 1, {header: 'Headers.get'});
                    e = d.converters.ByteString(e);
                    if (!n(e)) {
                        throw d.errors.invalidArgument({prefix: 'Headers.get', value: e, type: 'header name'});
                    }
                    return this[A].get(e);
                }
                has(e) {
                    d.brandCheck(this, Headers);
                    d.argumentLengthCheck(arguments, 1, {header: 'Headers.has'});
                    e = d.converters.ByteString(e);
                    if (!n(e)) {
                        throw d.errors.invalidArgument({prefix: 'Headers.has', value: e, type: 'header name'});
                    }
                    return this[A].contains(e);
                }
                set(e, t) {
                    d.brandCheck(this, Headers);
                    d.argumentLengthCheck(arguments, 2, {header: 'Headers.set'});
                    e = d.converters.ByteString(e);
                    t = d.converters.ByteString(t);
                    t = headerValueNormalize(t);
                    if (!n(e)) {
                        throw d.errors.invalidArgument({prefix: 'Headers.set', value: e, type: 'header name'});
                    } else if (!p(t)) {
                        throw d.errors.invalidArgument({prefix: 'Headers.set', value: t, type: 'header value'});
                    }
                    if (this[s] === 'immutable') {
                        throw new TypeError('immutable');
                    } else if (this[s] === 'request-no-cors') {
                    }
                    this[A].set(e, t);
                }
                getSetCookie() {
                    d.brandCheck(this, Headers);
                    const e = this[A].cookies;
                    if (e) {
                        return [...e];
                    }
                    return [];
                }
                get [c]() {
                    if (this[A][c]) {
                        return this[A][c];
                    }
                    const e = [];
                    const t = [...this[A]].sort((e, t) => (e[0] < t[0] ? -1 : 1));
                    const r = this[A].cookies;
                    for (let A = 0; A < t.length; ++A) {
                        const [i, s] = t[A];
                        if (i === 'set-cookie') {
                            for (let t = 0; t < r.length; ++t) {
                                e.push([i, r[t]]);
                            }
                        } else {
                            l(s !== null);
                            e.push([i, s]);
                        }
                    }
                    this[A][c] = e;
                    return e;
                }
                keys() {
                    d.brandCheck(this, Headers);
                    if (this[s] === 'immutable') {
                        const e = this[c];
                        return o(() => e, 'Headers', 'key');
                    }
                    return o(() => [...this[c].values()], 'Headers', 'key');
                }
                values() {
                    d.brandCheck(this, Headers);
                    if (this[s] === 'immutable') {
                        const e = this[c];
                        return o(() => e, 'Headers', 'value');
                    }
                    return o(() => [...this[c].values()], 'Headers', 'value');
                }
                entries() {
                    d.brandCheck(this, Headers);
                    if (this[s] === 'immutable') {
                        const e = this[c];
                        return o(() => e, 'Headers', 'key+value');
                    }
                    return o(() => [...this[c].values()], 'Headers', 'key+value');
                }
                forEach(e, t = globalThis) {
                    d.brandCheck(this, Headers);
                    d.argumentLengthCheck(arguments, 1, {header: 'Headers.forEach'});
                    if (typeof e !== 'function') {
                        throw new TypeError(
                            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.",
                        );
                    }
                    for (const [r, A] of this) {
                        e.apply(t, [A, r, this]);
                    }
                }
                [Symbol.for('nodejs.util.inspect.custom')]() {
                    d.brandCheck(this, Headers);
                    return this[A];
                }
            }
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
            Object.defineProperties(Headers.prototype, {
                append: a,
                delete: a,
                get: a,
                has: a,
                set: a,
                getSetCookie: a,
                keys: a,
                values: a,
                entries: a,
                forEach: a,
                [Symbol.iterator]: {enumerable: false},
                [Symbol.toStringTag]: {value: 'Headers', configurable: true},
            });
            d.converters.HeadersInit = function (e) {
                if (d.util.Type(e) === 'Object') {
                    if (e[Symbol.iterator]) {
                        return d.converters['sequence<sequence<ByteString>>'](e);
                    }
                    return d.converters['record<ByteString, ByteString>'](e);
                }
                throw d.errors.conversionFailed({
                    prefix: 'Headers constructor',
                    argument: 'Argument 1',
                    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>'],
                });
            };
            e.exports = {fill: fill, Headers: Headers, HeadersList: HeadersList};
        },
        4881: (e, t, r) => {
            'use strict';
            const {
                Response: A,
                makeNetworkError: i,
                makeAppropriateNetworkError: s,
                filterResponse: a,
                makeResponse: o,
            } = r(7823);
            const {Headers: n} = r(554);
            const {Request: p, makeRequest: d} = r(8359);
            const l = r(9796);
            const {
                bytesMatch: u,
                makePolicyContainer: c,
                clonePolicyContainer: g,
                requestBadPort: m,
                TAOCheck: h,
                appendRequestOriginHeader: C,
                responseLocationURL: Q,
                requestCurrentURL: B,
                setRequestReferrerPolicyOnRedirect: I,
                tryUpgradeRequestToAPotentiallyTrustworthyURL: y,
                createOpaqueTimingInfo: w,
                appendFetchMetadata: b,
                corsCheck: v,
                crossOriginResourcePolicyCheck: D,
                determineRequestsReferrer: R,
                coarsenedSharedCurrentTime: k,
                createDeferredPromise: S,
                isBlobLike: N,
                sameOrigin: _,
                isCancelled: T,
                isAborted: q,
                isErrorLike: U,
                fullyReadBody: L,
                readableStreamClose: M,
                isomorphicEncode: G,
                urlIsLocal: V,
                urlIsHttpHttpsScheme: H,
                urlHasHttpsScheme: O,
            } = r(2538);
            const {kState: P, kHeaders: Y, kGuard: x, kRealm: J} = r(5861);
            const j = r(9491);
            const {safelyExtractBody: W} = r(1472);
            const {
                redirectStatusSet: z,
                nullBodyStatus: Z,
                safeMethodsSet: X,
                requestBodyHeader: K,
                subresourceSet: $,
                DOMException: ee,
            } = r(1037);
            const {kHeadersList: te} = r(2785);
            const re = r(2361);
            const {Readable: Ae, pipeline: ie} = r(2781);
            const {addAbortListener: se, isErrored: ae, isReadable: oe, nodeMajor: ne, nodeMinor: pe} = r(3983);
            const {dataURLProcessor: de, serializeAMimeType: le} = r(685);
            const {TransformStream: ue} = r(5356);
            const {getGlobalDispatcher: ce} = r(1892);
            const {webidl: ge} = r(1744);
            const {STATUS_CODES: me} = r(3685);
            const he = ['GET', 'HEAD'];
            let Ee;
            let Ce = globalThis.ReadableStream;
            class Fetch extends re {
                constructor(e) {
                    super();
                    this.dispatcher = e;
                    this.connection = null;
                    this.dump = false;
                    this.state = 'ongoing';
                    this.setMaxListeners(21);
                }
                terminate(e) {
                    if (this.state !== 'ongoing') {
                        return;
                    }
                    this.state = 'terminated';
                    this.connection?.destroy(e);
                    this.emit('terminated', e);
                }
                abort(e) {
                    if (this.state !== 'ongoing') {
                        return;
                    }
                    this.state = 'aborted';
                    if (!e) {
                        e = new ee('The operation was aborted.', 'AbortError');
                    }
                    this.serializedAbortReason = e;
                    this.connection?.destroy(e);
                    this.emit('terminated', e);
                }
            }
            function fetch(e, t = {}) {
                ge.argumentLengthCheck(arguments, 1, {header: 'globalThis.fetch'});
                const r = S();
                let i;
                try {
                    i = new p(e, t);
                } catch (e) {
                    r.reject(e);
                    return r.promise;
                }
                const s = i[P];
                if (i.signal.aborted) {
                    abortFetch(r, s, null, i.signal.reason);
                    return r.promise;
                }
                const a = s.client.globalObject;
                if (a?.constructor?.name === 'ServiceWorkerGlobalScope') {
                    s.serviceWorkers = 'none';
                }
                let o = null;
                const n = null;
                let d = false;
                let l = null;
                se(i.signal, () => {
                    d = true;
                    j(l != null);
                    l.abort(i.signal.reason);
                    abortFetch(r, s, o, i.signal.reason);
                });
                const handleFetchDone = (e) => finalizeAndReportTiming(e, 'fetch');
                const processResponse = (e) => {
                    if (d) {
                        return Promise.resolve();
                    }
                    if (e.aborted) {
                        abortFetch(r, s, o, l.serializedAbortReason);
                        return Promise.resolve();
                    }
                    if (e.type === 'error') {
                        r.reject(Object.assign(new TypeError('fetch failed'), {cause: e.error}));
                        return Promise.resolve();
                    }
                    o = new A();
                    o[P] = e;
                    o[J] = n;
                    o[Y][te] = e.headersList;
                    o[Y][x] = 'immutable';
                    o[Y][J] = n;
                    r.resolve(o);
                };
                l = fetching({
                    request: s,
                    processResponseEndOfBody: handleFetchDone,
                    processResponse: processResponse,
                    dispatcher: t.dispatcher ?? ce(),
                });
                return r.promise;
            }
            function finalizeAndReportTiming(e, t = 'other') {
                if (e.type === 'error' && e.aborted) {
                    return;
                }
                if (!e.urlList?.length) {
                    return;
                }
                const r = e.urlList[0];
                let A = e.timingInfo;
                let i = e.cacheState;
                if (!H(r)) {
                    return;
                }
                if (A === null) {
                    return;
                }
                if (!e.timingAllowPassed) {
                    A = w({startTime: A.startTime});
                    i = '';
                }
                A.endTime = k();
                e.timingInfo = A;
                markResourceTiming(A, r, t, globalThis, i);
            }
            function markResourceTiming(e, t, r, A, i) {
                if (ne > 18 || (ne === 18 && pe >= 2)) {
                    performance.markResourceTiming(e, t.href, r, A, i);
                }
            }
            function abortFetch(e, t, r, A) {
                if (!A) {
                    A = new ee('The operation was aborted.', 'AbortError');
                }
                e.reject(A);
                if (t.body != null && oe(t.body?.stream)) {
                    t.body.stream.cancel(A).catch((e) => {
                        if (e.code === 'ERR_INVALID_STATE') {
                            return;
                        }
                        throw e;
                    });
                }
                if (r == null) {
                    return;
                }
                const i = r[P];
                if (i.body != null && oe(i.body?.stream)) {
                    i.body.stream.cancel(A).catch((e) => {
                        if (e.code === 'ERR_INVALID_STATE') {
                            return;
                        }
                        throw e;
                    });
                }
            }
            function fetching({
                request: e,
                processRequestBodyChunkLength: t,
                processRequestEndOfBody: r,
                processResponse: A,
                processResponseEndOfBody: i,
                processResponseConsumeBody: s,
                useParallelQueue: a = false,
                dispatcher: o,
            }) {
                let n = null;
                let p = false;
                if (e.client != null) {
                    n = e.client.globalObject;
                    p = e.client.crossOriginIsolatedCapability;
                }
                const d = k(p);
                const l = w({startTime: d});
                const u = {
                    controller: new Fetch(o),
                    request: e,
                    timingInfo: l,
                    processRequestBodyChunkLength: t,
                    processRequestEndOfBody: r,
                    processResponse: A,
                    processResponseConsumeBody: s,
                    processResponseEndOfBody: i,
                    taskDestination: n,
                    crossOriginIsolatedCapability: p,
                };
                j(!e.body || e.body.stream);
                if (e.window === 'client') {
                    e.window = e.client?.globalObject?.constructor?.name === 'Window' ? e.client : 'no-window';
                }
                if (e.origin === 'client') {
                    e.origin = e.client?.origin;
                }
                if (e.policyContainer === 'client') {
                    if (e.client != null) {
                        e.policyContainer = g(e.client.policyContainer);
                    } else {
                        e.policyContainer = c();
                    }
                }
                if (!e.headersList.contains('accept')) {
                    const t = '*/*';
                    e.headersList.append('accept', t);
                }
                if (!e.headersList.contains('accept-language')) {
                    e.headersList.append('accept-language', '*');
                }
                if (e.priority === null) {
                }
                if ($.has(e.destination)) {
                }
                mainFetch(u).catch((e) => {
                    u.controller.terminate(e);
                });
                return u.controller;
            }
            async function mainFetch(e, t = false) {
                const r = e.request;
                let A = null;
                if (r.localURLsOnly && !V(B(r))) {
                    A = i('local URLs only');
                }
                y(r);
                if (m(r) === 'blocked') {
                    A = i('bad port');
                }
                if (r.referrerPolicy === '') {
                    r.referrerPolicy = r.policyContainer.referrerPolicy;
                }
                if (r.referrer !== 'no-referrer') {
                    r.referrer = R(r);
                }
                if (A === null) {
                    A = await (async () => {
                        const t = B(r);
                        if (
                            (_(t, r.url) && r.responseTainting === 'basic') ||
                            t.protocol === 'data:' ||
                            r.mode === 'navigate' ||
                            r.mode === 'websocket'
                        ) {
                            r.responseTainting = 'basic';
                            return await schemeFetch(e);
                        }
                        if (r.mode === 'same-origin') {
                            return i('request mode cannot be "same-origin"');
                        }
                        if (r.mode === 'no-cors') {
                            if (r.redirect !== 'follow') {
                                return i('redirect mode cannot be "follow" for "no-cors" request');
                            }
                            r.responseTainting = 'opaque';
                            return await schemeFetch(e);
                        }
                        if (!H(B(r))) {
                            return i('URL scheme must be a HTTP(S) scheme');
                        }
                        r.responseTainting = 'cors';
                        return await httpFetch(e);
                    })();
                }
                if (t) {
                    return A;
                }
                if (A.status !== 0 && !A.internalResponse) {
                    if (r.responseTainting === 'cors') {
                    }
                    if (r.responseTainting === 'basic') {
                        A = a(A, 'basic');
                    } else if (r.responseTainting === 'cors') {
                        A = a(A, 'cors');
                    } else if (r.responseTainting === 'opaque') {
                        A = a(A, 'opaque');
                    } else {
                        j(false);
                    }
                }
                let s = A.status === 0 ? A : A.internalResponse;
                if (s.urlList.length === 0) {
                    s.urlList.push(...r.urlList);
                }
                if (!r.timingAllowFailed) {
                    A.timingAllowPassed = true;
                }
                if (A.type === 'opaque' && s.status === 206 && s.rangeRequested && !r.headers.contains('range')) {
                    A = s = i();
                }
                if (A.status !== 0 && (r.method === 'HEAD' || r.method === 'CONNECT' || Z.includes(s.status))) {
                    s.body = null;
                    e.controller.dump = true;
                }
                if (r.integrity) {
                    const processBodyError = (t) => fetchFinale(e, i(t));
                    if (r.responseTainting === 'opaque' || A.body == null) {
                        processBodyError(A.error);
                        return;
                    }
                    const processBody = (t) => {
                        if (!u(t, r.integrity)) {
                            processBodyError('integrity mismatch');
                            return;
                        }
                        A.body = W(t)[0];
                        fetchFinale(e, A);
                    };
                    await L(A.body, processBody, processBodyError);
                } else {
                    fetchFinale(e, A);
                }
            }
            function schemeFetch(e) {
                if (T(e) && e.request.redirectCount === 0) {
                    return Promise.resolve(s(e));
                }
                const {request: t} = e;
                const {protocol: A} = B(t);
                switch (A) {
                    case 'about:': {
                        return Promise.resolve(i('about scheme is not supported'));
                    }
                    case 'blob:': {
                        if (!Ee) {
                            Ee = r(4300).resolveObjectURL;
                        }
                        const e = B(t);
                        if (e.search.length !== 0) {
                            return Promise.resolve(i('NetworkError when attempting to fetch resource.'));
                        }
                        const A = Ee(e.toString());
                        if (t.method !== 'GET' || !N(A)) {
                            return Promise.resolve(i('invalid method'));
                        }
                        const s = W(A);
                        const a = s[0];
                        const n = G(`${a.length}`);
                        const p = s[1] ?? '';
                        const d = o({
                            statusText: 'OK',
                            headersList: [
                                ['content-length', {name: 'Content-Length', value: n}],
                                ['content-type', {name: 'Content-Type', value: p}],
                            ],
                        });
                        d.body = a;
                        return Promise.resolve(d);
                    }
                    case 'data:': {
                        const e = B(t);
                        const r = de(e);
                        if (r === 'failure') {
                            return Promise.resolve(i('failed to fetch the data URL'));
                        }
                        const A = le(r.mimeType);
                        return Promise.resolve(
                            o({
                                statusText: 'OK',
                                headersList: [['content-type', {name: 'Content-Type', value: A}]],
                                body: W(r.body)[0],
                            }),
                        );
                    }
                    case 'file:': {
                        return Promise.resolve(i('not implemented... yet...'));
                    }
                    case 'http:':
                    case 'https:': {
                        return httpFetch(e).catch((e) => i(e));
                    }
                    default: {
                        return Promise.resolve(i('unknown scheme'));
                    }
                }
            }
            function finalizeResponse(e, t) {
                e.request.done = true;
                if (e.processResponseDone != null) {
                    queueMicrotask(() => e.processResponseDone(t));
                }
            }
            function fetchFinale(e, t) {
                if (t.type === 'error') {
                    t.urlList = [e.request.urlList[0]];
                    t.timingInfo = w({startTime: e.timingInfo.startTime});
                }
                const processResponseEndOfBody = () => {
                    e.request.done = true;
                    if (e.processResponseEndOfBody != null) {
                        queueMicrotask(() => e.processResponseEndOfBody(t));
                    }
                };
                if (e.processResponse != null) {
                    queueMicrotask(() => e.processResponse(t));
                }
                if (t.body == null) {
                    processResponseEndOfBody();
                } else {
                    const identityTransformAlgorithm = (e, t) => {
                        t.enqueue(e);
                    };
                    const e = new ue(
                        {start() {}, transform: identityTransformAlgorithm, flush: processResponseEndOfBody},
                        {
                            size() {
                                return 1;
                            },
                        },
                        {
                            size() {
                                return 1;
                            },
                        },
                    );
                    t.body = {stream: t.body.stream.pipeThrough(e)};
                }
                if (e.processResponseConsumeBody != null) {
                    const processBody = (r) => e.processResponseConsumeBody(t, r);
                    const processBodyError = (r) => e.processResponseConsumeBody(t, r);
                    if (t.body == null) {
                        queueMicrotask(() => processBody(null));
                    } else {
                        return L(t.body, processBody, processBodyError);
                    }
                    return Promise.resolve();
                }
            }
            async function httpFetch(e) {
                const t = e.request;
                let r = null;
                let A = null;
                const s = e.timingInfo;
                if (t.serviceWorkers === 'all') {
                }
                if (r === null) {
                    if (t.redirect === 'follow') {
                        t.serviceWorkers = 'none';
                    }
                    A = r = await httpNetworkOrCacheFetch(e);
                    if (t.responseTainting === 'cors' && v(t, r) === 'failure') {
                        return i('cors failure');
                    }
                    if (h(t, r) === 'failure') {
                        t.timingAllowFailed = true;
                    }
                }
                if (
                    (t.responseTainting === 'opaque' || r.type === 'opaque') &&
                    D(t.origin, t.client, t.destination, A) === 'blocked'
                ) {
                    return i('blocked');
                }
                if (z.has(A.status)) {
                    if (t.redirect !== 'manual') {
                        e.controller.connection.destroy();
                    }
                    if (t.redirect === 'error') {
                        r = i('unexpected redirect');
                    } else if (t.redirect === 'manual') {
                        r = A;
                    } else if (t.redirect === 'follow') {
                        r = await httpRedirectFetch(e, r);
                    } else {
                        j(false);
                    }
                }
                r.timingInfo = s;
                return r;
            }
            function httpRedirectFetch(e, t) {
                const r = e.request;
                const A = t.internalResponse ? t.internalResponse : t;
                let s;
                try {
                    s = Q(A, B(r).hash);
                    if (s == null) {
                        return t;
                    }
                } catch (e) {
                    return Promise.resolve(i(e));
                }
                if (!H(s)) {
                    return Promise.resolve(i('URL scheme must be a HTTP(S) scheme'));
                }
                if (r.redirectCount === 20) {
                    return Promise.resolve(i('redirect count exceeded'));
                }
                r.redirectCount += 1;
                if (r.mode === 'cors' && (s.username || s.password) && !_(r, s)) {
                    return Promise.resolve(i('cross origin not allowed for request mode "cors"'));
                }
                if (r.responseTainting === 'cors' && (s.username || s.password)) {
                    return Promise.resolve(i('URL cannot contain credentials for request mode "cors"'));
                }
                if (A.status !== 303 && r.body != null && r.body.source == null) {
                    return Promise.resolve(i());
                }
                if (
                    ([301, 302].includes(A.status) && r.method === 'POST') ||
                    (A.status === 303 && !he.includes(r.method))
                ) {
                    r.method = 'GET';
                    r.body = null;
                    for (const e of K) {
                        r.headersList.delete(e);
                    }
                }
                if (!_(B(r), s)) {
                    r.headersList.delete('authorization');
                    r.headersList.delete('cookie');
                    r.headersList.delete('host');
                }
                if (r.body != null) {
                    j(r.body.source != null);
                    r.body = W(r.body.source)[0];
                }
                const a = e.timingInfo;
                a.redirectEndTime = a.postRedirectStartTime = k(e.crossOriginIsolatedCapability);
                if (a.redirectStartTime === 0) {
                    a.redirectStartTime = a.startTime;
                }
                r.urlList.push(s);
                I(r, A);
                return mainFetch(e, true);
            }
            async function httpNetworkOrCacheFetch(e, t = false, r = false) {
                const A = e.request;
                let a = null;
                let o = null;
                let n = null;
                const p = null;
                const l = false;
                if (A.window === 'no-window' && A.redirect === 'error') {
                    a = e;
                    o = A;
                } else {
                    o = d(A);
                    a = {...e};
                    a.request = o;
                }
                const u =
                    A.credentials === 'include' || (A.credentials === 'same-origin' && A.responseTainting === 'basic');
                const c = o.body ? o.body.length : null;
                let g = null;
                if (o.body == null && ['POST', 'PUT'].includes(o.method)) {
                    g = '0';
                }
                if (c != null) {
                    g = G(`${c}`);
                }
                if (g != null) {
                    o.headersList.append('content-length', g);
                }
                if (c != null && o.keepalive) {
                }
                if (o.referrer instanceof URL) {
                    o.headersList.append('referer', G(o.referrer.href));
                }
                C(o);
                b(o);
                if (!o.headersList.contains('user-agent')) {
                    o.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node');
                }
                if (
                    o.cache === 'default' &&
                    (o.headersList.contains('if-modified-since') ||
                        o.headersList.contains('if-none-match') ||
                        o.headersList.contains('if-unmodified-since') ||
                        o.headersList.contains('if-match') ||
                        o.headersList.contains('if-range'))
                ) {
                    o.cache = 'no-store';
                }
                if (
                    o.cache === 'no-cache' &&
                    !o.preventNoCacheCacheControlHeaderModification &&
                    !o.headersList.contains('cache-control')
                ) {
                    o.headersList.append('cache-control', 'max-age=0');
                }
                if (o.cache === 'no-store' || o.cache === 'reload') {
                    if (!o.headersList.contains('pragma')) {
                        o.headersList.append('pragma', 'no-cache');
                    }
                    if (!o.headersList.contains('cache-control')) {
                        o.headersList.append('cache-control', 'no-cache');
                    }
                }
                if (o.headersList.contains('range')) {
                    o.headersList.append('accept-encoding', 'identity');
                }
                if (!o.headersList.contains('accept-encoding')) {
                    if (O(B(o))) {
                        o.headersList.append('accept-encoding', 'br, gzip, deflate');
                    } else {
                        o.headersList.append('accept-encoding', 'gzip, deflate');
                    }
                }
                o.headersList.delete('host');
                if (u) {
                }
                if (p == null) {
                    o.cache = 'no-store';
                }
                if (o.mode !== 'no-store' && o.mode !== 'reload') {
                }
                if (n == null) {
                    if (o.mode === 'only-if-cached') {
                        return i('only if cached');
                    }
                    const e = await httpNetworkFetch(a, u, r);
                    if (!X.has(o.method) && e.status >= 200 && e.status <= 399) {
                    }
                    if (l && e.status === 304) {
                    }
                    if (n == null) {
                        n = e;
                    }
                }
                n.urlList = [...o.urlList];
                if (o.headersList.contains('range')) {
                    n.rangeRequested = true;
                }
                n.requestIncludesCredentials = u;
                if (n.status === 407) {
                    if (A.window === 'no-window') {
                        return i();
                    }
                    if (T(e)) {
                        return s(e);
                    }
                    return i('proxy authentication required');
                }
                if (n.status === 421 && !r && (A.body == null || A.body.source != null)) {
                    if (T(e)) {
                        return s(e);
                    }
                    e.controller.connection.destroy();
                    n = await httpNetworkOrCacheFetch(e, t, true);
                }
                if (t) {
                }
                return n;
            }
            async function httpNetworkFetch(e, t = false, A = false) {
                j(!e.controller.connection || e.controller.connection.destroyed);
                e.controller.connection = {
                    abort: null,
                    destroyed: false,
                    destroy(e) {
                        if (!this.destroyed) {
                            this.destroyed = true;
                            this.abort?.(e ?? new ee('The operation was aborted.', 'AbortError'));
                        }
                    },
                };
                const a = e.request;
                let p = null;
                const d = e.timingInfo;
                const u = null;
                if (u == null) {
                    a.cache = 'no-store';
                }
                const c = A ? 'yes' : 'no';
                if (a.mode === 'websocket') {
                } else {
                }
                let g = null;
                if (a.body == null && e.processRequestEndOfBody) {
                    queueMicrotask(() => e.processRequestEndOfBody());
                } else if (a.body != null) {
                    const processBodyChunk = async function* (t) {
                        if (T(e)) {
                            return;
                        }
                        yield t;
                        e.processRequestBodyChunkLength?.(t.byteLength);
                    };
                    const processEndOfBody = () => {
                        if (T(e)) {
                            return;
                        }
                        if (e.processRequestEndOfBody) {
                            e.processRequestEndOfBody();
                        }
                    };
                    const processBodyError = (t) => {
                        if (T(e)) {
                            return;
                        }
                        if (t.name === 'AbortError') {
                            e.controller.abort();
                        } else {
                            e.controller.terminate(t);
                        }
                    };
                    g = (async function* () {
                        try {
                            for await (const e of a.body.stream) {
                                yield* processBodyChunk(e);
                            }
                            processEndOfBody();
                        } catch (e) {
                            processBodyError(e);
                        }
                    })();
                }
                try {
                    const {body: t, status: r, statusText: A, headersList: i, socket: s} = await dispatch({body: g});
                    if (s) {
                        p = o({status: r, statusText: A, headersList: i, socket: s});
                    } else {
                        const s = t[Symbol.asyncIterator]();
                        e.controller.next = () => s.next();
                        p = o({status: r, statusText: A, headersList: i});
                    }
                } catch (t) {
                    if (t.name === 'AbortError') {
                        e.controller.connection.destroy();
                        return s(e, t);
                    }
                    return i(t);
                }
                const pullAlgorithm = () => {
                    e.controller.resume();
                };
                const cancelAlgorithm = (t) => {
                    e.controller.abort(t);
                };
                if (!Ce) {
                    Ce = r(5356).ReadableStream;
                }
                const m = new Ce(
                    {
                        async start(t) {
                            e.controller.controller = t;
                        },
                        async pull(e) {
                            await pullAlgorithm(e);
                        },
                        async cancel(e) {
                            await cancelAlgorithm(e);
                        },
                    },
                    {
                        highWaterMark: 0,
                        size() {
                            return 1;
                        },
                    },
                );
                p.body = {stream: m};
                e.controller.on('terminated', onAborted);
                e.controller.resume = async () => {
                    while (true) {
                        let t;
                        let r;
                        try {
                            const {done: r, value: A} = await e.controller.next();
                            if (q(e)) {
                                break;
                            }
                            t = r ? undefined : A;
                        } catch (A) {
                            if (e.controller.ended && !d.encodedBodySize) {
                                t = undefined;
                            } else {
                                t = A;
                                r = true;
                            }
                        }
                        if (t === undefined) {
                            M(e.controller.controller);
                            finalizeResponse(e, p);
                            return;
                        }
                        d.decodedBodySize += t?.byteLength ?? 0;
                        if (r) {
                            e.controller.terminate(t);
                            return;
                        }
                        e.controller.controller.enqueue(new Uint8Array(t));
                        if (ae(m)) {
                            e.controller.terminate();
                            return;
                        }
                        if (!e.controller.controller.desiredSize) {
                            return;
                        }
                    }
                };
                function onAborted(t) {
                    if (q(e)) {
                        p.aborted = true;
                        if (oe(m)) {
                            e.controller.controller.error(e.controller.serializedAbortReason);
                        }
                    } else {
                        if (oe(m)) {
                            e.controller.controller.error(new TypeError('terminated', {cause: U(t) ? t : undefined}));
                        }
                    }
                    e.controller.connection.destroy();
                }
                return p;
                async function dispatch({body: t}) {
                    const r = B(a);
                    const A = e.controller.dispatcher;
                    return new Promise((i, s) =>
                        A.dispatch(
                            {
                                path: r.pathname + r.search,
                                origin: r.origin,
                                method: a.method,
                                body: e.controller.dispatcher.isMockActive
                                    ? a.body && (a.body.source || a.body.stream)
                                    : t,
                                headers: a.headersList.entries,
                                maxRedirections: 0,
                                upgrade: a.mode === 'websocket' ? 'websocket' : undefined,
                            },
                            {
                                body: null,
                                abort: null,
                                onConnect(t) {
                                    const {connection: r} = e.controller;
                                    if (r.destroyed) {
                                        t(new ee('The operation was aborted.', 'AbortError'));
                                    } else {
                                        e.controller.on('terminated', t);
                                        this.abort = r.abort = t;
                                    }
                                },
                                onHeaders(e, t, r, A) {
                                    if (e < 200) {
                                        return;
                                    }
                                    let s = [];
                                    let o = '';
                                    const p = new n();
                                    if (Array.isArray(t)) {
                                        for (let e = 0; e < t.length; e += 2) {
                                            const r = t[e + 0].toString('latin1');
                                            const A = t[e + 1].toString('latin1');
                                            if (r.toLowerCase() === 'content-encoding') {
                                                s = A.toLowerCase()
                                                    .split(',')
                                                    .map((e) => e.trim());
                                            } else if (r.toLowerCase() === 'location') {
                                                o = A;
                                            }
                                            p[te].append(r, A);
                                        }
                                    } else {
                                        const e = Object.keys(t);
                                        for (const r of e) {
                                            const e = t[r];
                                            if (r.toLowerCase() === 'content-encoding') {
                                                s = e
                                                    .toLowerCase()
                                                    .split(',')
                                                    .map((e) => e.trim())
                                                    .reverse();
                                            } else if (r.toLowerCase() === 'location') {
                                                o = e;
                                            }
                                            p[te].append(r, e);
                                        }
                                    }
                                    this.body = new Ae({read: r});
                                    const d = [];
                                    const u = a.redirect === 'follow' && o && z.has(e);
                                    if (a.method !== 'HEAD' && a.method !== 'CONNECT' && !Z.includes(e) && !u) {
                                        for (const e of s) {
                                            if (e === 'x-gzip' || e === 'gzip') {
                                                d.push(
                                                    l.createGunzip({
                                                        flush: l.constants.Z_SYNC_FLUSH,
                                                        finishFlush: l.constants.Z_SYNC_FLUSH,
                                                    }),
                                                );
                                            } else if (e === 'deflate') {
                                                d.push(l.createInflate());
                                            } else if (e === 'br') {
                                                d.push(l.createBrotliDecompress());
                                            } else {
                                                d.length = 0;
                                                break;
                                            }
                                        }
                                    }
                                    i({
                                        status: e,
                                        statusText: A,
                                        headersList: p[te],
                                        body: d.length
                                            ? ie(this.body, ...d, () => {})
                                            : this.body.on('error', () => {}),
                                    });
                                    return true;
                                },
                                onData(t) {
                                    if (e.controller.dump) {
                                        return;
                                    }
                                    const r = t;
                                    d.encodedBodySize += r.byteLength;
                                    return this.body.push(r);
                                },
                                onComplete() {
                                    if (this.abort) {
                                        e.controller.off('terminated', this.abort);
                                    }
                                    e.controller.ended = true;
                                    this.body.push(null);
                                },
                                onError(t) {
                                    if (this.abort) {
                                        e.controller.off('terminated', this.abort);
                                    }
                                    this.body?.destroy(t);
                                    e.controller.terminate(t);
                                    s(t);
                                },
                                onUpgrade(e, t, r) {
                                    if (e !== 101) {
                                        return;
                                    }
                                    const A = new n();
                                    for (let e = 0; e < t.length; e += 2) {
                                        const r = t[e + 0].toString('latin1');
                                        const i = t[e + 1].toString('latin1');
                                        A[te].append(r, i);
                                    }
                                    i({status: e, statusText: me[e], headersList: A[te], socket: r});
                                    return true;
                                },
                            },
                        ),
                    );
                }
            }
            e.exports = {
                fetch: fetch,
                Fetch: Fetch,
                fetching: fetching,
                finalizeAndReportTiming: finalizeAndReportTiming,
            };
        },
        8359: (e, t, r) => {
            'use strict';
            const {extractBody: A, mixinBody: i, cloneBody: s} = r(1472);
            const {Headers: a, fill: o, HeadersList: n} = r(554);
            const {FinalizationRegistry: p} = r(6436)();
            const d = r(3983);
            const {
                isValidHTTPToken: l,
                sameOrigin: u,
                normalizeMethod: c,
                makePolicyContainer: g,
                normalizeMethodRecord: m,
            } = r(2538);
            const {
                forbiddenMethodsSet: h,
                corsSafeListedMethodsSet: C,
                referrerPolicy: Q,
                requestRedirect: B,
                requestMode: I,
                requestCredentials: y,
                requestCache: w,
                requestDuplex: b,
            } = r(1037);
            const {kEnumerableProperty: v} = d;
            const {kHeaders: D, kSignal: R, kState: k, kGuard: S, kRealm: N} = r(5861);
            const {webidl: _} = r(1744);
            const {getGlobalOrigin: T} = r(1246);
            const {URLSerializer: q} = r(685);
            const {kHeadersList: U, kConstruct: L} = r(2785);
            const M = r(9491);
            const {getMaxListeners: G, setMaxListeners: V, getEventListeners: H, defaultMaxListeners: O} = r(2361);
            let P = globalThis.TransformStream;
            const Y = Symbol('abortController');
            const x = new p(({signal: e, abort: t}) => {
                e.removeEventListener('abort', t);
            });
            class Request {
                constructor(e, t = {}) {
                    if (e === L) {
                        return;
                    }
                    _.argumentLengthCheck(arguments, 1, {header: 'Request constructor'});
                    e = _.converters.RequestInfo(e);
                    t = _.converters.RequestInit(t);
                    this[N] = {
                        settingsObject: {
                            baseUrl: T(),
                            get origin() {
                                return this.baseUrl?.origin;
                            },
                            policyContainer: g(),
                        },
                    };
                    let i = null;
                    let s = null;
                    const p = this[N].settingsObject.baseUrl;
                    let Q = null;
                    if (typeof e === 'string') {
                        let t;
                        try {
                            t = new URL(e, p);
                        } catch (t) {
                            throw new TypeError('Failed to parse URL from ' + e, {cause: t});
                        }
                        if (t.username || t.password) {
                            throw new TypeError(
                                'Request cannot be constructed from a URL that includes credentials: ' + e,
                            );
                        }
                        i = makeRequest({urlList: [t]});
                        s = 'cors';
                    } else {
                        M(e instanceof Request);
                        i = e[k];
                        Q = e[R];
                    }
                    const B = this[N].settingsObject.origin;
                    let I = 'client';
                    if (i.window?.constructor?.name === 'EnvironmentSettingsObject' && u(i.window, B)) {
                        I = i.window;
                    }
                    if (t.window != null) {
                        throw new TypeError(`'window' option '${I}' must be null`);
                    }
                    if ('window' in t) {
                        I = 'no-window';
                    }
                    i = makeRequest({
                        method: i.method,
                        headersList: i.headersList,
                        unsafeRequest: i.unsafeRequest,
                        client: this[N].settingsObject,
                        window: I,
                        priority: i.priority,
                        origin: i.origin,
                        referrer: i.referrer,
                        referrerPolicy: i.referrerPolicy,
                        mode: i.mode,
                        credentials: i.credentials,
                        cache: i.cache,
                        redirect: i.redirect,
                        integrity: i.integrity,
                        keepalive: i.keepalive,
                        reloadNavigation: i.reloadNavigation,
                        historyNavigation: i.historyNavigation,
                        urlList: [...i.urlList],
                    });
                    const y = Object.keys(t).length !== 0;
                    if (y) {
                        if (i.mode === 'navigate') {
                            i.mode = 'same-origin';
                        }
                        i.reloadNavigation = false;
                        i.historyNavigation = false;
                        i.origin = 'client';
                        i.referrer = 'client';
                        i.referrerPolicy = '';
                        i.url = i.urlList[i.urlList.length - 1];
                        i.urlList = [i.url];
                    }
                    if (t.referrer !== undefined) {
                        const e = t.referrer;
                        if (e === '') {
                            i.referrer = 'no-referrer';
                        } else {
                            let t;
                            try {
                                t = new URL(e, p);
                            } catch (t) {
                                throw new TypeError(`Referrer "${e}" is not a valid URL.`, {cause: t});
                            }
                            if (
                                (t.protocol === 'about:' && t.hostname === 'client') ||
                                (B && !u(t, this[N].settingsObject.baseUrl))
                            ) {
                                i.referrer = 'client';
                            } else {
                                i.referrer = t;
                            }
                        }
                    }
                    if (t.referrerPolicy !== undefined) {
                        i.referrerPolicy = t.referrerPolicy;
                    }
                    let w;
                    if (t.mode !== undefined) {
                        w = t.mode;
                    } else {
                        w = s;
                    }
                    if (w === 'navigate') {
                        throw _.errors.exception({
                            header: 'Request constructor',
                            message: 'invalid request mode navigate.',
                        });
                    }
                    if (w != null) {
                        i.mode = w;
                    }
                    if (t.credentials !== undefined) {
                        i.credentials = t.credentials;
                    }
                    if (t.cache !== undefined) {
                        i.cache = t.cache;
                    }
                    if (i.cache === 'only-if-cached' && i.mode !== 'same-origin') {
                        throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
                    }
                    if (t.redirect !== undefined) {
                        i.redirect = t.redirect;
                    }
                    if (t.integrity != null) {
                        i.integrity = String(t.integrity);
                    }
                    if (t.keepalive !== undefined) {
                        i.keepalive = Boolean(t.keepalive);
                    }
                    if (t.method !== undefined) {
                        let e = t.method;
                        if (!l(e)) {
                            throw new TypeError(`'${e}' is not a valid HTTP method.`);
                        }
                        if (h.has(e.toUpperCase())) {
                            throw new TypeError(`'${e}' HTTP method is unsupported.`);
                        }
                        e = m[e] ?? c(e);
                        i.method = e;
                    }
                    if (t.signal !== undefined) {
                        Q = t.signal;
                    }
                    this[k] = i;
                    const b = new AbortController();
                    this[R] = b.signal;
                    this[R][N] = this[N];
                    if (Q != null) {
                        if (!Q || typeof Q.aborted !== 'boolean' || typeof Q.addEventListener !== 'function') {
                            throw new TypeError(
                                "Failed to construct 'Request': member signal is not of type AbortSignal.",
                            );
                        }
                        if (Q.aborted) {
                            b.abort(Q.reason);
                        } else {
                            this[Y] = b;
                            const e = new WeakRef(b);
                            const abort = function () {
                                const t = e.deref();
                                if (t !== undefined) {
                                    t.abort(this.reason);
                                }
                            };
                            try {
                                if (typeof G === 'function' && G(Q) === O) {
                                    V(100, Q);
                                } else if (H(Q, 'abort').length >= O) {
                                    V(100, Q);
                                }
                            } catch {}
                            d.addAbortListener(Q, abort);
                            x.register(b, {signal: Q, abort: abort});
                        }
                    }
                    this[D] = new a(L);
                    this[D][U] = i.headersList;
                    this[D][S] = 'request';
                    this[D][N] = this[N];
                    if (w === 'no-cors') {
                        if (!C.has(i.method)) {
                            throw new TypeError(`'${i.method} is unsupported in no-cors mode.`);
                        }
                        this[D][S] = 'request-no-cors';
                    }
                    if (y) {
                        const e = this[D][U];
                        const r = t.headers !== undefined ? t.headers : new n(e);
                        e.clear();
                        if (r instanceof n) {
                            for (const [t, A] of r) {
                                e.append(t, A);
                            }
                            e.cookies = r.cookies;
                        } else {
                            o(this[D], r);
                        }
                    }
                    const v = e instanceof Request ? e[k].body : null;
                    if ((t.body != null || v != null) && (i.method === 'GET' || i.method === 'HEAD')) {
                        throw new TypeError('Request with GET/HEAD method cannot have body.');
                    }
                    let q = null;
                    if (t.body != null) {
                        const [e, r] = A(t.body, i.keepalive);
                        q = e;
                        if (r && !this[D][U].contains('content-type')) {
                            this[D].append('content-type', r);
                        }
                    }
                    const J = q ?? v;
                    if (J != null && J.source == null) {
                        if (q != null && t.duplex == null) {
                            throw new TypeError('RequestInit: duplex option is required when sending a body.');
                        }
                        if (i.mode !== 'same-origin' && i.mode !== 'cors') {
                            throw new TypeError(
                                'If request is made from ReadableStream, mode should be "same-origin" or "cors"',
                            );
                        }
                        i.useCORSPreflightFlag = true;
                    }
                    let j = J;
                    if (q == null && v != null) {
                        if (d.isDisturbed(v.stream) || v.stream.locked) {
                            throw new TypeError(
                                'Cannot construct a Request with a Request object that has already been used.',
                            );
                        }
                        if (!P) {
                            P = r(5356).TransformStream;
                        }
                        const e = new P();
                        v.stream.pipeThrough(e);
                        j = {source: v.source, length: v.length, stream: e.readable};
                    }
                    this[k].body = j;
                }
                get method() {
                    _.brandCheck(this, Request);
                    return this[k].method;
                }
                get url() {
                    _.brandCheck(this, Request);
                    return q(this[k].url);
                }
                get headers() {
                    _.brandCheck(this, Request);
                    return this[D];
                }
                get destination() {
                    _.brandCheck(this, Request);
                    return this[k].destination;
                }
                get referrer() {
                    _.brandCheck(this, Request);
                    if (this[k].referrer === 'no-referrer') {
                        return '';
                    }
                    if (this[k].referrer === 'client') {
                        return 'about:client';
                    }
                    return this[k].referrer.toString();
                }
                get referrerPolicy() {
                    _.brandCheck(this, Request);
                    return this[k].referrerPolicy;
                }
                get mode() {
                    _.brandCheck(this, Request);
                    return this[k].mode;
                }
                get credentials() {
                    return this[k].credentials;
                }
                get cache() {
                    _.brandCheck(this, Request);
                    return this[k].cache;
                }
                get redirect() {
                    _.brandCheck(this, Request);
                    return this[k].redirect;
                }
                get integrity() {
                    _.brandCheck(this, Request);
                    return this[k].integrity;
                }
                get keepalive() {
                    _.brandCheck(this, Request);
                    return this[k].keepalive;
                }
                get isReloadNavigation() {
                    _.brandCheck(this, Request);
                    return this[k].reloadNavigation;
                }
                get isHistoryNavigation() {
                    _.brandCheck(this, Request);
                    return this[k].historyNavigation;
                }
                get signal() {
                    _.brandCheck(this, Request);
                    return this[R];
                }
                get body() {
                    _.brandCheck(this, Request);
                    return this[k].body ? this[k].body.stream : null;
                }
                get bodyUsed() {
                    _.brandCheck(this, Request);
                    return !!this[k].body && d.isDisturbed(this[k].body.stream);
                }
                get duplex() {
                    _.brandCheck(this, Request);
                    return 'half';
                }
                clone() {
                    _.brandCheck(this, Request);
                    if (this.bodyUsed || this.body?.locked) {
                        throw new TypeError('unusable');
                    }
                    const e = cloneRequest(this[k]);
                    const t = new Request(L);
                    t[k] = e;
                    t[N] = this[N];
                    t[D] = new a(L);
                    t[D][U] = e.headersList;
                    t[D][S] = this[D][S];
                    t[D][N] = this[D][N];
                    const r = new AbortController();
                    if (this.signal.aborted) {
                        r.abort(this.signal.reason);
                    } else {
                        d.addAbortListener(this.signal, () => {
                            r.abort(this.signal.reason);
                        });
                    }
                    t[R] = r.signal;
                    return t;
                }
            }
            i(Request);
            function makeRequest(e) {
                const t = {
                    method: 'GET',
                    localURLsOnly: false,
                    unsafeRequest: false,
                    body: null,
                    client: null,
                    reservedClient: null,
                    replacesClientId: '',
                    window: 'client',
                    keepalive: false,
                    serviceWorkers: 'all',
                    initiator: '',
                    destination: '',
                    priority: null,
                    origin: 'client',
                    policyContainer: 'client',
                    referrer: 'client',
                    referrerPolicy: '',
                    mode: 'no-cors',
                    useCORSPreflightFlag: false,
                    credentials: 'same-origin',
                    useCredentials: false,
                    cache: 'default',
                    redirect: 'follow',
                    integrity: '',
                    cryptoGraphicsNonceMetadata: '',
                    parserMetadata: '',
                    reloadNavigation: false,
                    historyNavigation: false,
                    userActivation: false,
                    taintedOrigin: false,
                    redirectCount: 0,
                    responseTainting: 'basic',
                    preventNoCacheCacheControlHeaderModification: false,
                    done: false,
                    timingAllowFailed: false,
                    ...e,
                    headersList: e.headersList ? new n(e.headersList) : new n(),
                };
                t.url = t.urlList[0];
                return t;
            }
            function cloneRequest(e) {
                const t = makeRequest({...e, body: null});
                if (e.body != null) {
                    t.body = s(e.body);
                }
                return t;
            }
            Object.defineProperties(Request.prototype, {
                method: v,
                url: v,
                headers: v,
                redirect: v,
                clone: v,
                signal: v,
                duplex: v,
                destination: v,
                body: v,
                bodyUsed: v,
                isHistoryNavigation: v,
                isReloadNavigation: v,
                keepalive: v,
                integrity: v,
                cache: v,
                credentials: v,
                attribute: v,
                referrerPolicy: v,
                referrer: v,
                mode: v,
                [Symbol.toStringTag]: {value: 'Request', configurable: true},
            });
            _.converters.Request = _.interfaceConverter(Request);
            _.converters.RequestInfo = function (e) {
                if (typeof e === 'string') {
                    return _.converters.USVString(e);
                }
                if (e instanceof Request) {
                    return _.converters.Request(e);
                }
                return _.converters.USVString(e);
            };
            _.converters.AbortSignal = _.interfaceConverter(AbortSignal);
            _.converters.RequestInit = _.dictionaryConverter([
                {key: 'method', converter: _.converters.ByteString},
                {key: 'headers', converter: _.converters.HeadersInit},
                {key: 'body', converter: _.nullableConverter(_.converters.BodyInit)},
                {key: 'referrer', converter: _.converters.USVString},
                {key: 'referrerPolicy', converter: _.converters.DOMString, allowedValues: Q},
                {key: 'mode', converter: _.converters.DOMString, allowedValues: I},
                {key: 'credentials', converter: _.converters.DOMString, allowedValues: y},
                {key: 'cache', converter: _.converters.DOMString, allowedValues: w},
                {key: 'redirect', converter: _.converters.DOMString, allowedValues: B},
                {key: 'integrity', converter: _.converters.DOMString},
                {key: 'keepalive', converter: _.converters.boolean},
                {key: 'signal', converter: _.nullableConverter((e) => _.converters.AbortSignal(e, {strict: false}))},
                {key: 'window', converter: _.converters.any},
                {key: 'duplex', converter: _.converters.DOMString, allowedValues: b},
            ]);
            e.exports = {Request: Request, makeRequest: makeRequest};
        },
        7823: (e, t, r) => {
            'use strict';
            const {Headers: A, HeadersList: i, fill: s} = r(554);
            const {extractBody: a, cloneBody: o, mixinBody: n} = r(1472);
            const p = r(3983);
            const {kEnumerableProperty: d} = p;
            const {
                isValidReasonPhrase: l,
                isCancelled: u,
                isAborted: c,
                isBlobLike: g,
                serializeJavascriptValueToJSONString: m,
                isErrorLike: h,
                isomorphicEncode: C,
            } = r(2538);
            const {redirectStatusSet: Q, nullBodyStatus: B, DOMException: I} = r(1037);
            const {kState: y, kHeaders: w, kGuard: b, kRealm: v} = r(5861);
            const {webidl: D} = r(1744);
            const {FormData: R} = r(2015);
            const {getGlobalOrigin: k} = r(1246);
            const {URLSerializer: S} = r(685);
            const {kHeadersList: N, kConstruct: _} = r(2785);
            const T = r(9491);
            const {types: q} = r(3837);
            const U = globalThis.ReadableStream || r(5356).ReadableStream;
            const L = new TextEncoder('utf-8');
            class Response {
                static error() {
                    const e = {settingsObject: {}};
                    const t = new Response();
                    t[y] = makeNetworkError();
                    t[v] = e;
                    t[w][N] = t[y].headersList;
                    t[w][b] = 'immutable';
                    t[w][v] = e;
                    return t;
                }
                static json(e, t = {}) {
                    D.argumentLengthCheck(arguments, 1, {header: 'Response.json'});
                    if (t !== null) {
                        t = D.converters.ResponseInit(t);
                    }
                    const r = L.encode(m(e));
                    const A = a(r);
                    const i = {settingsObject: {}};
                    const s = new Response();
                    s[v] = i;
                    s[w][b] = 'response';
                    s[w][v] = i;
                    initializeResponse(s, t, {body: A[0], type: 'application/json'});
                    return s;
                }
                static redirect(e, t = 302) {
                    const r = {settingsObject: {}};
                    D.argumentLengthCheck(arguments, 1, {header: 'Response.redirect'});
                    e = D.converters.USVString(e);
                    t = D.converters['unsigned short'](t);
                    let A;
                    try {
                        A = new URL(e, k());
                    } catch (t) {
                        throw Object.assign(new TypeError('Failed to parse URL from ' + e), {cause: t});
                    }
                    if (!Q.has(t)) {
                        throw new RangeError('Invalid status code ' + t);
                    }
                    const i = new Response();
                    i[v] = r;
                    i[w][b] = 'immutable';
                    i[w][v] = r;
                    i[y].status = t;
                    const s = C(S(A));
                    i[y].headersList.append('location', s);
                    return i;
                }
                constructor(e = null, t = {}) {
                    if (e !== null) {
                        e = D.converters.BodyInit(e);
                    }
                    t = D.converters.ResponseInit(t);
                    this[v] = {settingsObject: {}};
                    this[y] = makeResponse({});
                    this[w] = new A(_);
                    this[w][b] = 'response';
                    this[w][N] = this[y].headersList;
                    this[w][v] = this[v];
                    let r = null;
                    if (e != null) {
                        const [t, A] = a(e);
                        r = {body: t, type: A};
                    }
                    initializeResponse(this, t, r);
                }
                get type() {
                    D.brandCheck(this, Response);
                    return this[y].type;
                }
                get url() {
                    D.brandCheck(this, Response);
                    const e = this[y].urlList;
                    const t = e[e.length - 1] ?? null;
                    if (t === null) {
                        return '';
                    }
                    return S(t, true);
                }
                get redirected() {
                    D.brandCheck(this, Response);
                    return this[y].urlList.length > 1;
                }
                get status() {
                    D.brandCheck(this, Response);
                    return this[y].status;
                }
                get ok() {
                    D.brandCheck(this, Response);
                    return this[y].status >= 200 && this[y].status <= 299;
                }
                get statusText() {
                    D.brandCheck(this, Response);
                    return this[y].statusText;
                }
                get headers() {
                    D.brandCheck(this, Response);
                    return this[w];
                }
                get body() {
                    D.brandCheck(this, Response);
                    return this[y].body ? this[y].body.stream : null;
                }
                get bodyUsed() {
                    D.brandCheck(this, Response);
                    return !!this[y].body && p.isDisturbed(this[y].body.stream);
                }
                clone() {
                    D.brandCheck(this, Response);
                    if (this.bodyUsed || (this.body && this.body.locked)) {
                        throw D.errors.exception({
                            header: 'Response.clone',
                            message: 'Body has already been consumed.',
                        });
                    }
                    const e = cloneResponse(this[y]);
                    const t = new Response();
                    t[y] = e;
                    t[v] = this[v];
                    t[w][N] = e.headersList;
                    t[w][b] = this[w][b];
                    t[w][v] = this[w][v];
                    return t;
                }
            }
            n(Response);
            Object.defineProperties(Response.prototype, {
                type: d,
                url: d,
                status: d,
                ok: d,
                redirected: d,
                statusText: d,
                headers: d,
                clone: d,
                body: d,
                bodyUsed: d,
                [Symbol.toStringTag]: {value: 'Response', configurable: true},
            });
            Object.defineProperties(Response, {json: d, redirect: d, error: d});
            function cloneResponse(e) {
                if (e.internalResponse) {
                    return filterResponse(cloneResponse(e.internalResponse), e.type);
                }
                const t = makeResponse({...e, body: null});
                if (e.body != null) {
                    t.body = o(e.body);
                }
                return t;
            }
            function makeResponse(e) {
                return {
                    aborted: false,
                    rangeRequested: false,
                    timingAllowPassed: false,
                    requestIncludesCredentials: false,
                    type: 'default',
                    status: 200,
                    timingInfo: null,
                    cacheState: '',
                    statusText: '',
                    ...e,
                    headersList: e.headersList ? new i(e.headersList) : new i(),
                    urlList: e.urlList ? [...e.urlList] : [],
                };
            }
            function makeNetworkError(e) {
                const t = h(e);
                return makeResponse({
                    type: 'error',
                    status: 0,
                    error: t ? e : new Error(e ? String(e) : e),
                    aborted: e && e.name === 'AbortError',
                });
            }
            function makeFilteredResponse(e, t) {
                t = {internalResponse: e, ...t};
                return new Proxy(e, {
                    get(e, r) {
                        return r in t ? t[r] : e[r];
                    },
                    set(e, r, A) {
                        T(!(r in t));
                        e[r] = A;
                        return true;
                    },
                });
            }
            function filterResponse(e, t) {
                if (t === 'basic') {
                    return makeFilteredResponse(e, {type: 'basic', headersList: e.headersList});
                } else if (t === 'cors') {
                    return makeFilteredResponse(e, {type: 'cors', headersList: e.headersList});
                } else if (t === 'opaque') {
                    return makeFilteredResponse(e, {
                        type: 'opaque',
                        urlList: Object.freeze([]),
                        status: 0,
                        statusText: '',
                        body: null,
                    });
                } else if (t === 'opaqueredirect') {
                    return makeFilteredResponse(e, {
                        type: 'opaqueredirect',
                        status: 0,
                        statusText: '',
                        headersList: [],
                        body: null,
                    });
                } else {
                    T(false);
                }
            }
            function makeAppropriateNetworkError(e, t = null) {
                T(u(e));
                return c(e)
                    ? makeNetworkError(Object.assign(new I('The operation was aborted.', 'AbortError'), {cause: t}))
                    : makeNetworkError(Object.assign(new I('Request was cancelled.'), {cause: t}));
            }
            function initializeResponse(e, t, r) {
                if (t.status !== null && (t.status < 200 || t.status > 599)) {
                    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
                }
                if ('statusText' in t && t.statusText != null) {
                    if (!l(String(t.statusText))) {
                        throw new TypeError('Invalid statusText');
                    }
                }
                if ('status' in t && t.status != null) {
                    e[y].status = t.status;
                }
                if ('statusText' in t && t.statusText != null) {
                    e[y].statusText = t.statusText;
                }
                if ('headers' in t && t.headers != null) {
                    s(e[w], t.headers);
                }
                if (r) {
                    if (B.includes(e.status)) {
                        throw D.errors.exception({
                            header: 'Response constructor',
                            message: 'Invalid response status code ' + e.status,
                        });
                    }
                    e[y].body = r.body;
                    if (r.type != null && !e[y].headersList.contains('Content-Type')) {
                        e[y].headersList.append('content-type', r.type);
                    }
                }
            }
            D.converters.ReadableStream = D.interfaceConverter(U);
            D.converters.FormData = D.interfaceConverter(R);
            D.converters.URLSearchParams = D.interfaceConverter(URLSearchParams);
            D.converters.XMLHttpRequestBodyInit = function (e) {
                if (typeof e === 'string') {
                    return D.converters.USVString(e);
                }
                if (g(e)) {
                    return D.converters.Blob(e, {strict: false});
                }
                if (q.isArrayBuffer(e) || q.isTypedArray(e) || q.isDataView(e)) {
                    return D.converters.BufferSource(e);
                }
                if (p.isFormDataLike(e)) {
                    return D.converters.FormData(e, {strict: false});
                }
                if (e instanceof URLSearchParams) {
                    return D.converters.URLSearchParams(e);
                }
                return D.converters.DOMString(e);
            };
            D.converters.BodyInit = function (e) {
                if (e instanceof U) {
                    return D.converters.ReadableStream(e);
                }
                if (e?.[Symbol.asyncIterator]) {
                    return e;
                }
                return D.converters.XMLHttpRequestBodyInit(e);
            };
            D.converters.ResponseInit = D.dictionaryConverter([
                {key: 'status', converter: D.converters['unsigned short'], defaultValue: 200},
                {key: 'statusText', converter: D.converters.ByteString, defaultValue: ''},
                {key: 'headers', converter: D.converters.HeadersInit},
            ]);
            e.exports = {
                makeNetworkError: makeNetworkError,
                makeResponse: makeResponse,
                makeAppropriateNetworkError: makeAppropriateNetworkError,
                filterResponse: filterResponse,
                Response: Response,
                cloneResponse: cloneResponse,
            };
        },
        5861: (e) => {
            'use strict';
            e.exports = {
                kUrl: Symbol('url'),
                kHeaders: Symbol('headers'),
                kSignal: Symbol('signal'),
                kState: Symbol('state'),
                kGuard: Symbol('guard'),
                kRealm: Symbol('realm'),
            };
        },
        2538: (e, t, r) => {
            'use strict';
            const {redirectStatusSet: A, referrerPolicySet: i, badPortsSet: s} = r(1037);
            const {getGlobalOrigin: a} = r(1246);
            const {performance: o} = r(4074);
            const {isBlobLike: n, toUSVString: p, ReadableStreamFrom: d} = r(3983);
            const l = r(9491);
            const {isUint8Array: u} = r(9830);
            let c;
            try {
                c = r(6113);
            } catch {}
            function responseURL(e) {
                const t = e.urlList;
                const r = t.length;
                return r === 0 ? null : t[r - 1].toString();
            }
            function responseLocationURL(e, t) {
                if (!A.has(e.status)) {
                    return null;
                }
                let r = e.headersList.get('location');
                if (r !== null && isValidHeaderValue(r)) {
                    r = new URL(r, responseURL(e));
                }
                if (r && !r.hash) {
                    r.hash = t;
                }
                return r;
            }
            function requestCurrentURL(e) {
                return e.urlList[e.urlList.length - 1];
            }
            function requestBadPort(e) {
                const t = requestCurrentURL(e);
                if (urlIsHttpHttpsScheme(t) && s.has(t.port)) {
                    return 'blocked';
                }
                return 'allowed';
            }
            function isErrorLike(e) {
                return (
                    e instanceof Error || e?.constructor?.name === 'Error' || e?.constructor?.name === 'DOMException'
                );
            }
            function isValidReasonPhrase(e) {
                for (let t = 0; t < e.length; ++t) {
                    const r = e.charCodeAt(t);
                    if (!(r === 9 || (r >= 32 && r <= 126) || (r >= 128 && r <= 255))) {
                        return false;
                    }
                }
                return true;
            }
            function isTokenCharCode(e) {
                switch (e) {
                    case 34:
                    case 40:
                    case 41:
                    case 44:
                    case 47:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 91:
                    case 92:
                    case 93:
                    case 123:
                    case 125:
                        return false;
                    default:
                        return e >= 33 && e <= 126;
                }
            }
            function isValidHTTPToken(e) {
                if (e.length === 0) {
                    return false;
                }
                for (let t = 0; t < e.length; ++t) {
                    if (!isTokenCharCode(e.charCodeAt(t))) {
                        return false;
                    }
                }
                return true;
            }
            function isValidHeaderName(e) {
                return isValidHTTPToken(e);
            }
            function isValidHeaderValue(e) {
                if (e.startsWith('\t') || e.startsWith(' ') || e.endsWith('\t') || e.endsWith(' ')) {
                    return false;
                }
                if (e.includes('\0') || e.includes('\r') || e.includes('\n')) {
                    return false;
                }
                return true;
            }
            function setRequestReferrerPolicyOnRedirect(e, t) {
                const {headersList: r} = t;
                const A = (r.get('referrer-policy') ?? '').split(',');
                let s = '';
                if (A.length > 0) {
                    for (let e = A.length; e !== 0; e--) {
                        const t = A[e - 1].trim();
                        if (i.has(t)) {
                            s = t;
                            break;
                        }
                    }
                }
                if (s !== '') {
                    e.referrerPolicy = s;
                }
            }
            function crossOriginResourcePolicyCheck() {
                return 'allowed';
            }
            function corsCheck() {
                return 'success';
            }
            function TAOCheck() {
                return 'success';
            }
            function appendFetchMetadata(e) {
                let t = null;
                t = e.mode;
                e.headersList.set('sec-fetch-mode', t);
            }
            function appendRequestOriginHeader(e) {
                let t = e.origin;
                if (e.responseTainting === 'cors' || e.mode === 'websocket') {
                    if (t) {
                        e.headersList.append('origin', t);
                    }
                } else if (e.method !== 'GET' && e.method !== 'HEAD') {
                    switch (e.referrerPolicy) {
                        case 'no-referrer':
                            t = null;
                            break;
                        case 'no-referrer-when-downgrade':
                        case 'strict-origin':
                        case 'strict-origin-when-cross-origin':
                            if (e.origin && urlHasHttpsScheme(e.origin) && !urlHasHttpsScheme(requestCurrentURL(e))) {
                                t = null;
                            }
                            break;
                        case 'same-origin':
                            if (!sameOrigin(e, requestCurrentURL(e))) {
                                t = null;
                            }
                            break;
                        default:
                    }
                    if (t) {
                        e.headersList.append('origin', t);
                    }
                }
            }
            function coarsenedSharedCurrentTime(e) {
                return o.now();
            }
            function createOpaqueTimingInfo(e) {
                return {
                    startTime: e.startTime ?? 0,
                    redirectStartTime: 0,
                    redirectEndTime: 0,
                    postRedirectStartTime: e.startTime ?? 0,
                    finalServiceWorkerStartTime: 0,
                    finalNetworkResponseStartTime: 0,
                    finalNetworkRequestStartTime: 0,
                    endTime: 0,
                    encodedBodySize: 0,
                    decodedBodySize: 0,
                    finalConnectionTimingInfo: null,
                };
            }
            function makePolicyContainer() {
                return {referrerPolicy: 'strict-origin-when-cross-origin'};
            }
            function clonePolicyContainer(e) {
                return {referrerPolicy: e.referrerPolicy};
            }
            function determineRequestsReferrer(e) {
                const t = e.referrerPolicy;
                l(t);
                let r = null;
                if (e.referrer === 'client') {
                    const e = a();
                    if (!e || e.origin === 'null') {
                        return 'no-referrer';
                    }
                    r = new URL(e);
                } else if (e.referrer instanceof URL) {
                    r = e.referrer;
                }
                let A = stripURLForReferrer(r);
                const i = stripURLForReferrer(r, true);
                if (A.toString().length > 4096) {
                    A = i;
                }
                const s = sameOrigin(e, A);
                const o = isURLPotentiallyTrustworthy(A) && !isURLPotentiallyTrustworthy(e.url);
                switch (t) {
                    case 'origin':
                        return i != null ? i : stripURLForReferrer(r, true);
                    case 'unsafe-url':
                        return A;
                    case 'same-origin':
                        return s ? i : 'no-referrer';
                    case 'origin-when-cross-origin':
                        return s ? A : i;
                    case 'strict-origin-when-cross-origin': {
                        const t = requestCurrentURL(e);
                        if (sameOrigin(A, t)) {
                            return A;
                        }
                        if (isURLPotentiallyTrustworthy(A) && !isURLPotentiallyTrustworthy(t)) {
                            return 'no-referrer';
                        }
                        return i;
                    }
                    case 'strict-origin':
                    case 'no-referrer-when-downgrade':
                    default:
                        return o ? 'no-referrer' : i;
                }
            }
            function stripURLForReferrer(e, t) {
                l(e instanceof URL);
                if (e.protocol === 'file:' || e.protocol === 'about:' || e.protocol === 'blank:') {
                    return 'no-referrer';
                }
                e.username = '';
                e.password = '';
                e.hash = '';
                if (t) {
                    e.pathname = '';
                    e.search = '';
                }
                return e;
            }
            function isURLPotentiallyTrustworthy(e) {
                if (!(e instanceof URL)) {
                    return false;
                }
                if (e.href === 'about:blank' || e.href === 'about:srcdoc') {
                    return true;
                }
                if (e.protocol === 'data:') return true;
                if (e.protocol === 'file:') return true;
                return isOriginPotentiallyTrustworthy(e.origin);
                function isOriginPotentiallyTrustworthy(e) {
                    if (e == null || e === 'null') return false;
                    const t = new URL(e);
                    if (t.protocol === 'https:' || t.protocol === 'wss:') {
                        return true;
                    }
                    if (
                        /^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(t.hostname) ||
                        t.hostname === 'localhost' ||
                        t.hostname.includes('localhost.') ||
                        t.hostname.endsWith('.localhost')
                    ) {
                        return true;
                    }
                    return false;
                }
            }
            function bytesMatch(e, t) {
                if (c === undefined) {
                    return true;
                }
                const r = parseMetadata(t);
                if (r === 'no metadata') {
                    return true;
                }
                if (r.length === 0) {
                    return true;
                }
                const A = r.sort((e, t) => t.algo.localeCompare(e.algo));
                const i = A[0].algo;
                const s = A.filter((e) => e.algo === i);
                for (const t of s) {
                    const r = t.algo;
                    let A = t.hash;
                    if (A.endsWith('==')) {
                        A = A.slice(0, -2);
                    }
                    let i = c.createHash(r).update(e).digest('base64');
                    if (i.endsWith('==')) {
                        i = i.slice(0, -2);
                    }
                    if (i === A) {
                        return true;
                    }
                    let s = c.createHash(r).update(e).digest('base64url');
                    if (s.endsWith('==')) {
                        s = s.slice(0, -2);
                    }
                    if (s === A) {
                        return true;
                    }
                }
                return false;
            }
            const g = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\x21-\x7e]?)?/i;
            function parseMetadata(e) {
                const t = [];
                let r = true;
                const A = c.getHashes();
                for (const i of e.split(' ')) {
                    r = false;
                    const e = g.exec(i);
                    if (e === null || e.groups === undefined) {
                        continue;
                    }
                    const s = e.groups.algo;
                    if (A.includes(s.toLowerCase())) {
                        t.push(e.groups);
                    }
                }
                if (r === true) {
                    return 'no metadata';
                }
                return t;
            }
            function tryUpgradeRequestToAPotentiallyTrustworthyURL(e) {}
            function sameOrigin(e, t) {
                if (e.origin === t.origin && e.origin === 'null') {
                    return true;
                }
                if (e.protocol === t.protocol && e.hostname === t.hostname && e.port === t.port) {
                    return true;
                }
                return false;
            }
            function createDeferredPromise() {
                let e;
                let t;
                const r = new Promise((r, A) => {
                    e = r;
                    t = A;
                });
                return {promise: r, resolve: e, reject: t};
            }
            function isAborted(e) {
                return e.controller.state === 'aborted';
            }
            function isCancelled(e) {
                return e.controller.state === 'aborted' || e.controller.state === 'terminated';
            }
            const m = {
                delete: 'DELETE',
                DELETE: 'DELETE',
                get: 'GET',
                GET: 'GET',
                head: 'HEAD',
                HEAD: 'HEAD',
                options: 'OPTIONS',
                OPTIONS: 'OPTIONS',
                post: 'POST',
                POST: 'POST',
                put: 'PUT',
                PUT: 'PUT',
            };
            Object.setPrototypeOf(m, null);
            function normalizeMethod(e) {
                return m[e.toLowerCase()] ?? e;
            }
            function serializeJavascriptValueToJSONString(e) {
                const t = JSON.stringify(e);
                if (t === undefined) {
                    throw new TypeError('Value is not JSON serializable');
                }
                l(typeof t === 'string');
                return t;
            }
            const h = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
            function makeIterator(e, t, r) {
                const A = {index: 0, kind: r, target: e};
                const i = {
                    next() {
                        if (Object.getPrototypeOf(this) !== i) {
                            throw new TypeError(
                                `'next' called on an object that does not implement interface ${t} Iterator.`,
                            );
                        }
                        const {index: e, kind: r, target: s} = A;
                        const a = s();
                        const o = a.length;
                        if (e >= o) {
                            return {value: undefined, done: true};
                        }
                        const n = a[e];
                        A.index = e + 1;
                        return iteratorResult(n, r);
                    },
                    [Symbol.toStringTag]: `${t} Iterator`,
                };
                Object.setPrototypeOf(i, h);
                return Object.setPrototypeOf({}, i);
            }
            function iteratorResult(e, t) {
                let r;
                switch (t) {
                    case 'key': {
                        r = e[0];
                        break;
                    }
                    case 'value': {
                        r = e[1];
                        break;
                    }
                    case 'key+value': {
                        r = e;
                        break;
                    }
                }
                return {value: r, done: false};
            }
            async function fullyReadBody(e, t, r) {
                const A = t;
                const i = r;
                let s;
                try {
                    s = e.stream.getReader();
                } catch (e) {
                    i(e);
                    return;
                }
                try {
                    const e = await readAllBytes(s);
                    A(e);
                } catch (e) {
                    i(e);
                }
            }
            let C = globalThis.ReadableStream;
            function isReadableStreamLike(e) {
                if (!C) {
                    C = r(5356).ReadableStream;
                }
                return e instanceof C || (e[Symbol.toStringTag] === 'ReadableStream' && typeof e.tee === 'function');
            }
            const Q = 65535;
            function isomorphicDecode(e) {
                if (e.length < Q) {
                    return String.fromCharCode(...e);
                }
                return e.reduce((e, t) => e + String.fromCharCode(t), '');
            }
            function readableStreamClose(e) {
                try {
                    e.close();
                } catch (e) {
                    if (!e.message.includes('Controller is already closed')) {
                        throw e;
                    }
                }
            }
            function isomorphicEncode(e) {
                for (let t = 0; t < e.length; t++) {
                    l(e.charCodeAt(t) <= 255);
                }
                return e;
            }
            async function readAllBytes(e) {
                const t = [];
                let r = 0;
                while (true) {
                    const {done: A, value: i} = await e.read();
                    if (A) {
                        return Buffer.concat(t, r);
                    }
                    if (!u(i)) {
                        throw new TypeError('Received non-Uint8Array chunk');
                    }
                    t.push(i);
                    r += i.length;
                }
            }
            function urlIsLocal(e) {
                l('protocol' in e);
                const t = e.protocol;
                return t === 'about:' || t === 'blob:' || t === 'data:';
            }
            function urlHasHttpsScheme(e) {
                if (typeof e === 'string') {
                    return e.startsWith('https:');
                }
                return e.protocol === 'https:';
            }
            function urlIsHttpHttpsScheme(e) {
                l('protocol' in e);
                const t = e.protocol;
                return t === 'http:' || t === 'https:';
            }
            const B = Object.hasOwn || ((e, t) => Object.prototype.hasOwnProperty.call(e, t));
            e.exports = {
                isAborted: isAborted,
                isCancelled: isCancelled,
                createDeferredPromise: createDeferredPromise,
                ReadableStreamFrom: d,
                toUSVString: p,
                tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL,
                coarsenedSharedCurrentTime: coarsenedSharedCurrentTime,
                determineRequestsReferrer: determineRequestsReferrer,
                makePolicyContainer: makePolicyContainer,
                clonePolicyContainer: clonePolicyContainer,
                appendFetchMetadata: appendFetchMetadata,
                appendRequestOriginHeader: appendRequestOriginHeader,
                TAOCheck: TAOCheck,
                corsCheck: corsCheck,
                crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck,
                createOpaqueTimingInfo: createOpaqueTimingInfo,
                setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect,
                isValidHTTPToken: isValidHTTPToken,
                requestBadPort: requestBadPort,
                requestCurrentURL: requestCurrentURL,
                responseURL: responseURL,
                responseLocationURL: responseLocationURL,
                isBlobLike: n,
                isURLPotentiallyTrustworthy: isURLPotentiallyTrustworthy,
                isValidReasonPhrase: isValidReasonPhrase,
                sameOrigin: sameOrigin,
                normalizeMethod: normalizeMethod,
                serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString,
                makeIterator: makeIterator,
                isValidHeaderName: isValidHeaderName,
                isValidHeaderValue: isValidHeaderValue,
                hasOwn: B,
                isErrorLike: isErrorLike,
                fullyReadBody: fullyReadBody,
                bytesMatch: bytesMatch,
                isReadableStreamLike: isReadableStreamLike,
                readableStreamClose: readableStreamClose,
                isomorphicEncode: isomorphicEncode,
                isomorphicDecode: isomorphicDecode,
                urlIsLocal: urlIsLocal,
                urlHasHttpsScheme: urlHasHttpsScheme,
                urlIsHttpHttpsScheme: urlIsHttpHttpsScheme,
                readAllBytes: readAllBytes,
                normalizeMethodRecord: m,
            };
        },
        1744: (e, t, r) => {
            'use strict';
            const {types: A} = r(3837);
            const {hasOwn: i, toUSVString: s} = r(2538);
            const a = {};
            a.converters = {};
            a.util = {};
            a.errors = {};
            a.errors.exception = function (e) {
                return new TypeError(`${e.header}: ${e.message}`);
            };
            a.errors.conversionFailed = function (e) {
                const t = e.types.length === 1 ? '' : ' one of';
                const r = `${e.argument} could not be converted to` + `${t}: ${e.types.join(', ')}.`;
                return a.errors.exception({header: e.prefix, message: r});
            };
            a.errors.invalidArgument = function (e) {
                return a.errors.exception({header: e.prefix, message: `"${e.value}" is an invalid ${e.type}.`});
            };
            a.brandCheck = function (e, t, r = undefined) {
                if (r?.strict !== false && !(e instanceof t)) {
                    throw new TypeError('Illegal invocation');
                } else {
                    return e?.[Symbol.toStringTag] === t.prototype[Symbol.toStringTag];
                }
            };
            a.argumentLengthCheck = function ({length: e}, t, r) {
                if (e < t) {
                    throw a.errors.exception({
                        message: `${t} argument${t !== 1 ? 's' : ''} required, ` + `but${e ? ' only' : ''} ${e} found.`,
                        ...r,
                    });
                }
            };
            a.illegalConstructor = function () {
                throw a.errors.exception({header: 'TypeError', message: 'Illegal constructor'});
            };
            a.util.Type = function (e) {
                switch (typeof e) {
                    case 'undefined':
                        return 'Undefined';
                    case 'boolean':
                        return 'Boolean';
                    case 'string':
                        return 'String';
                    case 'symbol':
                        return 'Symbol';
                    case 'number':
                        return 'Number';
                    case 'bigint':
                        return 'BigInt';
                    case 'function':
                    case 'object': {
                        if (e === null) {
                            return 'Null';
                        }
                        return 'Object';
                    }
                }
            };
            a.util.ConvertToInt = function (e, t, r, A = {}) {
                let i;
                let s;
                if (t === 64) {
                    i = Math.pow(2, 53) - 1;
                    if (r === 'unsigned') {
                        s = 0;
                    } else {
                        s = Math.pow(-2, 53) + 1;
                    }
                } else if (r === 'unsigned') {
                    s = 0;
                    i = Math.pow(2, t) - 1;
                } else {
                    s = Math.pow(-2, t) - 1;
                    i = Math.pow(2, t - 1) - 1;
                }
                let o = Number(e);
                if (o === 0) {
                    o = 0;
                }
                if (A.enforceRange === true) {
                    if (Number.isNaN(o) || o === Number.POSITIVE_INFINITY || o === Number.NEGATIVE_INFINITY) {
                        throw a.errors.exception({
                            header: 'Integer conversion',
                            message: `Could not convert ${e} to an integer.`,
                        });
                    }
                    o = a.util.IntegerPart(o);
                    if (o < s || o > i) {
                        throw a.errors.exception({
                            header: 'Integer conversion',
                            message: `Value must be between ${s}-${i}, got ${o}.`,
                        });
                    }
                    return o;
                }
                if (!Number.isNaN(o) && A.clamp === true) {
                    o = Math.min(Math.max(o, s), i);
                    if (Math.floor(o) % 2 === 0) {
                        o = Math.floor(o);
                    } else {
                        o = Math.ceil(o);
                    }
                    return o;
                }
                if (
                    Number.isNaN(o) ||
                    (o === 0 && Object.is(0, o)) ||
                    o === Number.POSITIVE_INFINITY ||
                    o === Number.NEGATIVE_INFINITY
                ) {
                    return 0;
                }
                o = a.util.IntegerPart(o);
                o = o % Math.pow(2, t);
                if (r === 'signed' && o >= Math.pow(2, t) - 1) {
                    return o - Math.pow(2, t);
                }
                return o;
            };
            a.util.IntegerPart = function (e) {
                const t = Math.floor(Math.abs(e));
                if (e < 0) {
                    return -1 * t;
                }
                return t;
            };
            a.sequenceConverter = function (e) {
                return (t) => {
                    if (a.util.Type(t) !== 'Object') {
                        throw a.errors.exception({
                            header: 'Sequence',
                            message: `Value of type ${a.util.Type(t)} is not an Object.`,
                        });
                    }
                    const r = t?.[Symbol.iterator]?.();
                    const A = [];
                    if (r === undefined || typeof r.next !== 'function') {
                        throw a.errors.exception({header: 'Sequence', message: 'Object is not an iterator.'});
                    }
                    while (true) {
                        const {done: t, value: i} = r.next();
                        if (t) {
                            break;
                        }
                        A.push(e(i));
                    }
                    return A;
                };
            };
            a.recordConverter = function (e, t) {
                return (r) => {
                    if (a.util.Type(r) !== 'Object') {
                        throw a.errors.exception({
                            header: 'Record',
                            message: `Value of type ${a.util.Type(r)} is not an Object.`,
                        });
                    }
                    const i = {};
                    if (!A.isProxy(r)) {
                        const A = Object.keys(r);
                        for (const s of A) {
                            const A = e(s);
                            const a = t(r[s]);
                            i[A] = a;
                        }
                        return i;
                    }
                    const s = Reflect.ownKeys(r);
                    for (const A of s) {
                        const s = Reflect.getOwnPropertyDescriptor(r, A);
                        if (s?.enumerable) {
                            const s = e(A);
                            const a = t(r[A]);
                            i[s] = a;
                        }
                    }
                    return i;
                };
            };
            a.interfaceConverter = function (e) {
                return (t, r = {}) => {
                    if (r.strict !== false && !(t instanceof e)) {
                        throw a.errors.exception({
                            header: e.name,
                            message: `Expected ${t} to be an instance of ${e.name}.`,
                        });
                    }
                    return t;
                };
            };
            a.dictionaryConverter = function (e) {
                return (t) => {
                    const r = a.util.Type(t);
                    const A = {};
                    if (r === 'Null' || r === 'Undefined') {
                        return A;
                    } else if (r !== 'Object') {
                        throw a.errors.exception({
                            header: 'Dictionary',
                            message: `Expected ${t} to be one of: Null, Undefined, Object.`,
                        });
                    }
                    for (const r of e) {
                        const {key: e, defaultValue: s, required: o, converter: n} = r;
                        if (o === true) {
                            if (!i(t, e)) {
                                throw a.errors.exception({
                                    header: 'Dictionary',
                                    message: `Missing required key "${e}".`,
                                });
                            }
                        }
                        let p = t[e];
                        const d = i(r, 'defaultValue');
                        if (d && p !== null) {
                            p = p ?? s;
                        }
                        if (o || d || p !== undefined) {
                            p = n(p);
                            if (r.allowedValues && !r.allowedValues.includes(p)) {
                                throw a.errors.exception({
                                    header: 'Dictionary',
                                    message: `${p} is not an accepted type. Expected one of ${r.allowedValues.join(
                                        ', ',
                                    )}.`,
                                });
                            }
                            A[e] = p;
                        }
                    }
                    return A;
                };
            };
            a.nullableConverter = function (e) {
                return (t) => {
                    if (t === null) {
                        return t;
                    }
                    return e(t);
                };
            };
            a.converters.DOMString = function (e, t = {}) {
                if (e === null && t.legacyNullToEmptyString) {
                    return '';
                }
                if (typeof e === 'symbol') {
                    throw new TypeError('Could not convert argument of type symbol to string.');
                }
                return String(e);
            };
            a.converters.ByteString = function (e) {
                const t = a.converters.DOMString(e);
                for (let e = 0; e < t.length; e++) {
                    if (t.charCodeAt(e) > 255) {
                        throw new TypeError(
                            'Cannot convert argument to a ByteString because the character at ' +
                                `index ${e} has a value of ${t.charCodeAt(e)} which is greater than 255.`,
                        );
                    }
                }
                return t;
            };
            a.converters.USVString = s;
            a.converters.boolean = function (e) {
                const t = Boolean(e);
                return t;
            };
            a.converters.any = function (e) {
                return e;
            };
            a.converters['long long'] = function (e) {
                const t = a.util.ConvertToInt(e, 64, 'signed');
                return t;
            };
            a.converters['unsigned long long'] = function (e) {
                const t = a.util.ConvertToInt(e, 64, 'unsigned');
                return t;
            };
            a.converters['unsigned long'] = function (e) {
                const t = a.util.ConvertToInt(e, 32, 'unsigned');
                return t;
            };
            a.converters['unsigned short'] = function (e, t) {
                const r = a.util.ConvertToInt(e, 16, 'unsigned', t);
                return r;
            };
            a.converters.ArrayBuffer = function (e, t = {}) {
                if (a.util.Type(e) !== 'Object' || !A.isAnyArrayBuffer(e)) {
                    throw a.errors.conversionFailed({prefix: `${e}`, argument: `${e}`, types: ['ArrayBuffer']});
                }
                if (t.allowShared === false && A.isSharedArrayBuffer(e)) {
                    throw a.errors.exception({header: 'ArrayBuffer', message: 'SharedArrayBuffer is not allowed.'});
                }
                return e;
            };
            a.converters.TypedArray = function (e, t, r = {}) {
                if (a.util.Type(e) !== 'Object' || !A.isTypedArray(e) || e.constructor.name !== t.name) {
                    throw a.errors.conversionFailed({prefix: `${t.name}`, argument: `${e}`, types: [t.name]});
                }
                if (r.allowShared === false && A.isSharedArrayBuffer(e.buffer)) {
                    throw a.errors.exception({header: 'ArrayBuffer', message: 'SharedArrayBuffer is not allowed.'});
                }
                return e;
            };
            a.converters.DataView = function (e, t = {}) {
                if (a.util.Type(e) !== 'Object' || !A.isDataView(e)) {
                    throw a.errors.exception({header: 'DataView', message: 'Object is not a DataView.'});
                }
                if (t.allowShared === false && A.isSharedArrayBuffer(e.buffer)) {
                    throw a.errors.exception({header: 'ArrayBuffer', message: 'SharedArrayBuffer is not allowed.'});
                }
                return e;
            };
            a.converters.BufferSource = function (e, t = {}) {
                if (A.isAnyArrayBuffer(e)) {
                    return a.converters.ArrayBuffer(e, t);
                }
                if (A.isTypedArray(e)) {
                    return a.converters.TypedArray(e, e.constructor);
                }
                if (A.isDataView(e)) {
                    return a.converters.DataView(e, t);
                }
                throw new TypeError(`Could not convert ${e} to a BufferSource.`);
            };
            a.converters['sequence<ByteString>'] = a.sequenceConverter(a.converters.ByteString);
            a.converters['sequence<sequence<ByteString>>'] = a.sequenceConverter(a.converters['sequence<ByteString>']);
            a.converters['record<ByteString, ByteString>'] = a.recordConverter(
                a.converters.ByteString,
                a.converters.ByteString,
            );
            e.exports = {webidl: a};
        },
        4854: (e) => {
            'use strict';
            function getEncoding(e) {
                if (!e) {
                    return 'failure';
                }
                switch (e.trim().toLowerCase()) {
                    case 'unicode-1-1-utf-8':
                    case 'unicode11utf8':
                    case 'unicode20utf8':
                    case 'utf-8':
                    case 'utf8':
                    case 'x-unicode20utf8':
                        return 'UTF-8';
                    case '866':
                    case 'cp866':
                    case 'csibm866':
                    case 'ibm866':
                        return 'IBM866';
                    case 'csisolatin2':
                    case 'iso-8859-2':
                    case 'iso-ir-101':
                    case 'iso8859-2':
                    case 'iso88592':
                    case 'iso_8859-2':
                    case 'iso_8859-2:1987':
                    case 'l2':
                    case 'latin2':
                        return 'ISO-8859-2';
                    case 'csisolatin3':
                    case 'iso-8859-3':
                    case 'iso-ir-109':
                    case 'iso8859-3':
                    case 'iso88593':
                    case 'iso_8859-3':
                    case 'iso_8859-3:1988':
                    case 'l3':
                    case 'latin3':
                        return 'ISO-8859-3';
                    case 'csisolatin4':
                    case 'iso-8859-4':
                    case 'iso-ir-110':
                    case 'iso8859-4':
                    case 'iso88594':
                    case 'iso_8859-4':
                    case 'iso_8859-4:1988':
                    case 'l4':
                    case 'latin4':
                        return 'ISO-8859-4';
                    case 'csisolatincyrillic':
                    case 'cyrillic':
                    case 'iso-8859-5':
                    case 'iso-ir-144':
                    case 'iso8859-5':
                    case 'iso88595':
                    case 'iso_8859-5':
                    case 'iso_8859-5:1988':
                        return 'ISO-8859-5';
                    case 'arabic':
                    case 'asmo-708':
                    case 'csiso88596e':
                    case 'csiso88596i':
                    case 'csisolatinarabic':
                    case 'ecma-114':
                    case 'iso-8859-6':
                    case 'iso-8859-6-e':
                    case 'iso-8859-6-i':
                    case 'iso-ir-127':
                    case 'iso8859-6':
                    case 'iso88596':
                    case 'iso_8859-6':
                    case 'iso_8859-6:1987':
                        return 'ISO-8859-6';
                    case 'csisolatingreek':
                    case 'ecma-118':
                    case 'elot_928':
                    case 'greek':
                    case 'greek8':
                    case 'iso-8859-7':
                    case 'iso-ir-126':
                    case 'iso8859-7':
                    case 'iso88597':
                    case 'iso_8859-7':
                    case 'iso_8859-7:1987':
                    case 'sun_eu_greek':
                        return 'ISO-8859-7';
                    case 'csiso88598e':
                    case 'csisolatinhebrew':
                    case 'hebrew':
                    case 'iso-8859-8':
                    case 'iso-8859-8-e':
                    case 'iso-ir-138':
                    case 'iso8859-8':
                    case 'iso88598':
                    case 'iso_8859-8':
                    case 'iso_8859-8:1988':
                    case 'visual':
                        return 'ISO-8859-8';
                    case 'csiso88598i':
                    case 'iso-8859-8-i':
                    case 'logical':
                        return 'ISO-8859-8-I';
                    case 'csisolatin6':
                    case 'iso-8859-10':
                    case 'iso-ir-157':
                    case 'iso8859-10':
                    case 'iso885910':
                    case 'l6':
                    case 'latin6':
                        return 'ISO-8859-10';
                    case 'iso-8859-13':
                    case 'iso8859-13':
                    case 'iso885913':
                        return 'ISO-8859-13';
                    case 'iso-8859-14':
                    case 'iso8859-14':
                    case 'iso885914':
                        return 'ISO-8859-14';
                    case 'csisolatin9':
                    case 'iso-8859-15':
                    case 'iso8859-15':
                    case 'iso885915':
                    case 'iso_8859-15':
                    case 'l9':
                        return 'ISO-8859-15';
                    case 'iso-8859-16':
                        return 'ISO-8859-16';
                    case 'cskoi8r':
                    case 'koi':
                    case 'koi8':
                    case 'koi8-r':
                    case 'koi8_r':
                        return 'KOI8-R';
                    case 'koi8-ru':
                    case 'koi8-u':
                        return 'KOI8-U';
                    case 'csmacintosh':
                    case 'mac':
                    case 'macintosh':
                    case 'x-mac-roman':
                        return 'macintosh';
                    case 'iso-8859-11':
                    case 'iso8859-11':
                    case 'iso885911':
                    case 'tis-620':
                    case 'windows-874':
                        return 'windows-874';
                    case 'cp1250':
                    case 'windows-1250':
                    case 'x-cp1250':
                        return 'windows-1250';
                    case 'cp1251':
                    case 'windows-1251':
                    case 'x-cp1251':
                        return 'windows-1251';
                    case 'ansi_x3.4-1968':
                    case 'ascii':
                    case 'cp1252':
                    case 'cp819':
                    case 'csisolatin1':
                    case 'ibm819':
                    case 'iso-8859-1':
                    case 'iso-ir-100':
                    case 'iso8859-1':
                    case 'iso88591':
                    case 'iso_8859-1':
                    case 'iso_8859-1:1987':
                    case 'l1':
                    case 'latin1':
                    case 'us-ascii':
                    case 'windows-1252':
                    case 'x-cp1252':
                        return 'windows-1252';
                    case 'cp1253':
                    case 'windows-1253':
                    case 'x-cp1253':
                        return 'windows-1253';
                    case 'cp1254':
                    case 'csisolatin5':
                    case 'iso-8859-9':
                    case 'iso-ir-148':
                    case 'iso8859-9':
                    case 'iso88599':
                    case 'iso_8859-9':
                    case 'iso_8859-9:1989':
                    case 'l5':
                    case 'latin5':
                    case 'windows-1254':
                    case 'x-cp1254':
                        return 'windows-1254';
                    case 'cp1255':
                    case 'windows-1255':
                    case 'x-cp1255':
                        return 'windows-1255';
                    case 'cp1256':
                    case 'windows-1256':
                    case 'x-cp1256':
                        return 'windows-1256';
                    case 'cp1257':
                    case 'windows-1257':
                    case 'x-cp1257':
                        return 'windows-1257';
                    case 'cp1258':
                    case 'windows-1258':
                    case 'x-cp1258':
                        return 'windows-1258';
                    case 'x-mac-cyrillic':
                    case 'x-mac-ukrainian':
                        return 'x-mac-cyrillic';
                    case 'chinese':
                    case 'csgb2312':
                    case 'csiso58gb231280':
                    case 'gb2312':
                    case 'gb_2312':
                    case 'gb_2312-80':
                    case 'gbk':
                    case 'iso-ir-58':
                    case 'x-gbk':
                        return 'GBK';
                    case 'gb18030':
                        return 'gb18030';
                    case 'big5':
                    case 'big5-hkscs':
                    case 'cn-big5':
                    case 'csbig5':
                    case 'x-x-big5':
                        return 'Big5';
                    case 'cseucpkdfmtjapanese':
                    case 'euc-jp':
                    case 'x-euc-jp':
                        return 'EUC-JP';
                    case 'csiso2022jp':
                    case 'iso-2022-jp':
                        return 'ISO-2022-JP';
                    case 'csshiftjis':
                    case 'ms932':
                    case 'ms_kanji':
                    case 'shift-jis':
                    case 'shift_jis':
                    case 'sjis':
                    case 'windows-31j':
                    case 'x-sjis':
                        return 'Shift_JIS';
                    case 'cseuckr':
                    case 'csksc56011987':
                    case 'euc-kr':
                    case 'iso-ir-149':
                    case 'korean':
                    case 'ks_c_5601-1987':
                    case 'ks_c_5601-1989':
                    case 'ksc5601':
                    case 'ksc_5601':
                    case 'windows-949':
                        return 'EUC-KR';
                    case 'csiso2022kr':
                    case 'hz-gb-2312':
                    case 'iso-2022-cn':
                    case 'iso-2022-cn-ext':
                    case 'iso-2022-kr':
                    case 'replacement':
                        return 'replacement';
                    case 'unicodefffe':
                    case 'utf-16be':
                        return 'UTF-16BE';
                    case 'csunicode':
                    case 'iso-10646-ucs-2':
                    case 'ucs-2':
                    case 'unicode':
                    case 'unicodefeff':
                    case 'utf-16':
                    case 'utf-16le':
                        return 'UTF-16LE';
                    case 'x-user-defined':
                        return 'x-user-defined';
                    default:
                        return 'failure';
                }
            }
            e.exports = {getEncoding: getEncoding};
        },
        1446: (e, t, r) => {
            'use strict';
            const {staticPropertyDescriptors: A, readOperation: i, fireAProgressEvent: s} = r(7530);
            const {kState: a, kError: o, kResult: n, kEvents: p, kAborted: d} = r(9054);
            const {webidl: l} = r(1744);
            const {kEnumerableProperty: u} = r(3983);
            class FileReader extends EventTarget {
                constructor() {
                    super();
                    this[a] = 'empty';
                    this[n] = null;
                    this[o] = null;
                    this[p] = {loadend: null, error: null, abort: null, load: null, progress: null, loadstart: null};
                }
                readAsArrayBuffer(e) {
                    l.brandCheck(this, FileReader);
                    l.argumentLengthCheck(arguments, 1, {header: 'FileReader.readAsArrayBuffer'});
                    e = l.converters.Blob(e, {strict: false});
                    i(this, e, 'ArrayBuffer');
                }
                readAsBinaryString(e) {
                    l.brandCheck(this, FileReader);
                    l.argumentLengthCheck(arguments, 1, {header: 'FileReader.readAsBinaryString'});
                    e = l.converters.Blob(e, {strict: false});
                    i(this, e, 'BinaryString');
                }
                readAsText(e, t = undefined) {
                    l.brandCheck(this, FileReader);
                    l.argumentLengthCheck(arguments, 1, {header: 'FileReader.readAsText'});
                    e = l.converters.Blob(e, {strict: false});
                    if (t !== undefined) {
                        t = l.converters.DOMString(t);
                    }
                    i(this, e, 'Text', t);
                }
                readAsDataURL(e) {
                    l.brandCheck(this, FileReader);
                    l.argumentLengthCheck(arguments, 1, {header: 'FileReader.readAsDataURL'});
                    e = l.converters.Blob(e, {strict: false});
                    i(this, e, 'DataURL');
                }
                abort() {
                    if (this[a] === 'empty' || this[a] === 'done') {
                        this[n] = null;
                        return;
                    }
                    if (this[a] === 'loading') {
                        this[a] = 'done';
                        this[n] = null;
                    }
                    this[d] = true;
                    s('abort', this);
                    if (this[a] !== 'loading') {
                        s('loadend', this);
                    }
                }
                get readyState() {
                    l.brandCheck(this, FileReader);
                    switch (this[a]) {
                        case 'empty':
                            return this.EMPTY;
                        case 'loading':
                            return this.LOADING;
                        case 'done':
                            return this.DONE;
                    }
                }
                get result() {
                    l.brandCheck(this, FileReader);
                    return this[n];
                }
                get error() {
                    l.brandCheck(this, FileReader);
                    return this[o];
                }
                get onloadend() {
                    l.brandCheck(this, FileReader);
                    return this[p].loadend;
                }
                set onloadend(e) {
                    l.brandCheck(this, FileReader);
                    if (this[p].loadend) {
                        this.removeEventListener('loadend', this[p].loadend);
                    }
                    if (typeof e === 'function') {
                        this[p].loadend = e;
                        this.addEventListener('loadend', e);
                    } else {
                        this[p].loadend = null;
                    }
                }
                get onerror() {
                    l.brandCheck(this, FileReader);
                    return this[p].error;
                }
                set onerror(e) {
                    l.brandCheck(this, FileReader);
                    if (this[p].error) {
                        this.removeEventListener('error', this[p].error);
                    }
                    if (typeof e === 'function') {
                        this[p].error = e;
                        this.addEventListener('error', e);
                    } else {
                        this[p].error = null;
                    }
                }
                get onloadstart() {
                    l.brandCheck(this, FileReader);
                    return this[p].loadstart;
                }
                set onloadstart(e) {
                    l.brandCheck(this, FileReader);
                    if (this[p].loadstart) {
                        this.removeEventListener('loadstart', this[p].loadstart);
                    }
                    if (typeof e === 'function') {
                        this[p].loadstart = e;
                        this.addEventListener('loadstart', e);
                    } else {
                        this[p].loadstart = null;
                    }
                }
                get onprogress() {
                    l.brandCheck(this, FileReader);
                    return this[p].progress;
                }
                set onprogress(e) {
                    l.brandCheck(this, FileReader);
                    if (this[p].progress) {
                        this.removeEventListener('progress', this[p].progress);
                    }
                    if (typeof e === 'function') {
                        this[p].progress = e;
                        this.addEventListener('progress', e);
                    } else {
                        this[p].progress = null;
                    }
                }
                get onload() {
                    l.brandCheck(this, FileReader);
                    return this[p].load;
                }
                set onload(e) {
                    l.brandCheck(this, FileReader);
                    if (this[p].load) {
                        this.removeEventListener('load', this[p].load);
                    }
                    if (typeof e === 'function') {
                        this[p].load = e;
                        this.addEventListener('load', e);
                    } else {
                        this[p].load = null;
                    }
                }
                get onabort() {
                    l.brandCheck(this, FileReader);
                    return this[p].abort;
                }
                set onabort(e) {
                    l.brandCheck(this, FileReader);
                    if (this[p].abort) {
                        this.removeEventListener('abort', this[p].abort);
                    }
                    if (typeof e === 'function') {
                        this[p].abort = e;
                        this.addEventListener('abort', e);
                    } else {
                        this[p].abort = null;
                    }
                }
            }
            FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
            FileReader.LOADING = FileReader.prototype.LOADING = 1;
            FileReader.DONE = FileReader.prototype.DONE = 2;
            Object.defineProperties(FileReader.prototype, {
                EMPTY: A,
                LOADING: A,
                DONE: A,
                readAsArrayBuffer: u,
                readAsBinaryString: u,
                readAsText: u,
                readAsDataURL: u,
                abort: u,
                readyState: u,
                result: u,
                error: u,
                onloadstart: u,
                onprogress: u,
                onload: u,
                onabort: u,
                onerror: u,
                onloadend: u,
                [Symbol.toStringTag]: {value: 'FileReader', writable: false, enumerable: false, configurable: true},
            });
            Object.defineProperties(FileReader, {EMPTY: A, LOADING: A, DONE: A});
            e.exports = {FileReader: FileReader};
        },
        5504: (e, t, r) => {
            'use strict';
            const {webidl: A} = r(1744);
            const i = Symbol('ProgressEvent state');
            class ProgressEvent extends Event {
                constructor(e, t = {}) {
                    e = A.converters.DOMString(e);
                    t = A.converters.ProgressEventInit(t ?? {});
                    super(e, t);
                    this[i] = {lengthComputable: t.lengthComputable, loaded: t.loaded, total: t.total};
                }
                get lengthComputable() {
                    A.brandCheck(this, ProgressEvent);
                    return this[i].lengthComputable;
                }
                get loaded() {
                    A.brandCheck(this, ProgressEvent);
                    return this[i].loaded;
                }
                get total() {
                    A.brandCheck(this, ProgressEvent);
                    return this[i].total;
                }
            }
            A.converters.ProgressEventInit = A.dictionaryConverter([
                {key: 'lengthComputable', converter: A.converters.boolean, defaultValue: false},
                {key: 'loaded', converter: A.converters['unsigned long long'], defaultValue: 0},
                {key: 'total', converter: A.converters['unsigned long long'], defaultValue: 0},
                {key: 'bubbles', converter: A.converters.boolean, defaultValue: false},
                {key: 'cancelable', converter: A.converters.boolean, defaultValue: false},
                {key: 'composed', converter: A.converters.boolean, defaultValue: false},
            ]);
            e.exports = {ProgressEvent: ProgressEvent};
        },
        9054: (e) => {
            'use strict';
            e.exports = {
                kState: Symbol('FileReader state'),
                kResult: Symbol('FileReader result'),
                kError: Symbol('FileReader error'),
                kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
                kEvents: Symbol('FileReader events'),
                kAborted: Symbol('FileReader aborted'),
            };
        },
        7530: (e, t, r) => {
            'use strict';
            const {kState: A, kError: i, kResult: s, kAborted: a, kLastProgressEventFired: o} = r(9054);
            const {ProgressEvent: n} = r(5504);
            const {getEncoding: p} = r(4854);
            const {DOMException: d} = r(1037);
            const {serializeAMimeType: l, parseMIMEType: u} = r(685);
            const {types: c} = r(3837);
            const {StringDecoder: g} = r(1576);
            const {btoa: m} = r(4300);
            const h = {enumerable: true, writable: false, configurable: false};
            function readOperation(e, t, r, n) {
                if (e[A] === 'loading') {
                    throw new d('Invalid state', 'InvalidStateError');
                }
                e[A] = 'loading';
                e[s] = null;
                e[i] = null;
                const p = t.stream();
                const l = p.getReader();
                const u = [];
                let g = l.read();
                let m = true;
                (async () => {
                    while (!e[a]) {
                        try {
                            const {done: p, value: d} = await g;
                            if (m && !e[a]) {
                                queueMicrotask(() => {
                                    fireAProgressEvent('loadstart', e);
                                });
                            }
                            m = false;
                            if (!p && c.isUint8Array(d)) {
                                u.push(d);
                                if ((e[o] === undefined || Date.now() - e[o] >= 50) && !e[a]) {
                                    e[o] = Date.now();
                                    queueMicrotask(() => {
                                        fireAProgressEvent('progress', e);
                                    });
                                }
                                g = l.read();
                            } else if (p) {
                                queueMicrotask(() => {
                                    e[A] = 'done';
                                    try {
                                        const A = packageData(u, r, t.type, n);
                                        if (e[a]) {
                                            return;
                                        }
                                        e[s] = A;
                                        fireAProgressEvent('load', e);
                                    } catch (t) {
                                        e[i] = t;
                                        fireAProgressEvent('error', e);
                                    }
                                    if (e[A] !== 'loading') {
                                        fireAProgressEvent('loadend', e);
                                    }
                                });
                                break;
                            }
                        } catch (t) {
                            if (e[a]) {
                                return;
                            }
                            queueMicrotask(() => {
                                e[A] = 'done';
                                e[i] = t;
                                fireAProgressEvent('error', e);
                                if (e[A] !== 'loading') {
                                    fireAProgressEvent('loadend', e);
                                }
                            });
                            break;
                        }
                    }
                })();
            }
            function fireAProgressEvent(e, t) {
                const r = new n(e, {bubbles: false, cancelable: false});
                t.dispatchEvent(r);
            }
            function packageData(e, t, r, A) {
                switch (t) {
                    case 'DataURL': {
                        let t = 'data:';
                        const A = u(r || 'application/octet-stream');
                        if (A !== 'failure') {
                            t += l(A);
                        }
                        t += ';base64,';
                        const i = new g('latin1');
                        for (const r of e) {
                            t += m(i.write(r));
                        }
                        t += m(i.end());
                        return t;
                    }
                    case 'Text': {
                        let t = 'failure';
                        if (A) {
                            t = p(A);
                        }
                        if (t === 'failure' && r) {
                            const e = u(r);
                            if (e !== 'failure') {
                                t = p(e.parameters.get('charset'));
                            }
                        }
                        if (t === 'failure') {
                            t = 'UTF-8';
                        }
                        return decode(e, t);
                    }
                    case 'ArrayBuffer': {
                        const t = combineByteSequences(e);
                        return t.buffer;
                    }
                    case 'BinaryString': {
                        let t = '';
                        const r = new g('latin1');
                        for (const A of e) {
                            t += r.write(A);
                        }
                        t += r.end();
                        return t;
                    }
                }
            }
            function decode(e, t) {
                const r = combineByteSequences(e);
                const A = BOMSniffing(r);
                let i = 0;
                if (A !== null) {
                    t = A;
                    i = A === 'UTF-8' ? 3 : 2;
                }
                const s = r.slice(i);
                return new TextDecoder(t).decode(s);
            }
            function BOMSniffing(e) {
                const [t, r, A] = e;
                if (t === 239 && r === 187 && A === 191) {
                    return 'UTF-8';
                } else if (t === 254 && r === 255) {
                    return 'UTF-16BE';
                } else if (t === 255 && r === 254) {
                    return 'UTF-16LE';
                }
                return null;
            }
            function combineByteSequences(e) {
                const t = e.reduce((e, t) => e + t.byteLength, 0);
                let r = 0;
                return e.reduce((e, t) => {
                    e.set(t, r);
                    r += t.byteLength;
                    return e;
                }, new Uint8Array(t));
            }
            e.exports = {
                staticPropertyDescriptors: h,
                readOperation: readOperation,
                fireAProgressEvent: fireAProgressEvent,
            };
        },
        1892: (e, t, r) => {
            'use strict';
            const A = Symbol.for('undici.globalDispatcher.1');
            const {InvalidArgumentError: i} = r(8045);
            const s = r(7890);
            if (getGlobalDispatcher() === undefined) {
                setGlobalDispatcher(new s());
            }
            function setGlobalDispatcher(e) {
                if (!e || typeof e.dispatch !== 'function') {
                    throw new i('Argument agent must implement Agent');
                }
                Object.defineProperty(globalThis, A, {
                    value: e,
                    writable: true,
                    enumerable: false,
                    configurable: false,
                });
            }
            function getGlobalDispatcher() {
                return globalThis[A];
            }
            e.exports = {setGlobalDispatcher: setGlobalDispatcher, getGlobalDispatcher: getGlobalDispatcher};
        },
        6930: (e) => {
            'use strict';
            e.exports = class DecoratorHandler {
                constructor(e) {
                    this.handler = e;
                }
                onConnect(...e) {
                    return this.handler.onConnect(...e);
                }
                onError(...e) {
                    return this.handler.onError(...e);
                }
                onUpgrade(...e) {
                    return this.handler.onUpgrade(...e);
                }
                onHeaders(...e) {
                    return this.handler.onHeaders(...e);
                }
                onData(...e) {
                    return this.handler.onData(...e);
                }
                onComplete(...e) {
                    return this.handler.onComplete(...e);
                }
                onBodySent(...e) {
                    return this.handler.onBodySent(...e);
                }
            };
        },
        2860: (e, t, r) => {
            'use strict';
            const A = r(3983);
            const {kBodyUsed: i} = r(2785);
            const s = r(9491);
            const {InvalidArgumentError: a} = r(8045);
            const o = r(2361);
            const n = [300, 301, 302, 303, 307, 308];
            const p = Symbol('body');
            class BodyAsyncIterable {
                constructor(e) {
                    this[p] = e;
                    this[i] = false;
                }
                async *[Symbol.asyncIterator]() {
                    s(!this[i], 'disturbed');
                    this[i] = true;
                    yield* this[p];
                }
            }
            class RedirectHandler {
                constructor(e, t, r, n) {
                    if (t != null && (!Number.isInteger(t) || t < 0)) {
                        throw new a('maxRedirections must be a positive number');
                    }
                    A.validateHandler(n, r.method, r.upgrade);
                    this.dispatch = e;
                    this.location = null;
                    this.abort = null;
                    this.opts = {...r, maxRedirections: 0};
                    this.maxRedirections = t;
                    this.handler = n;
                    this.history = [];
                    if (A.isStream(this.opts.body)) {
                        if (A.bodyLength(this.opts.body) === 0) {
                            this.opts.body.on('data', function () {
                                s(false);
                            });
                        }
                        if (typeof this.opts.body.readableDidRead !== 'boolean') {
                            this.opts.body[i] = false;
                            o.prototype.on.call(this.opts.body, 'data', function () {
                                this[i] = true;
                            });
                        }
                    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
                        this.opts.body = new BodyAsyncIterable(this.opts.body);
                    } else if (
                        this.opts.body &&
                        typeof this.opts.body !== 'string' &&
                        !ArrayBuffer.isView(this.opts.body) &&
                        A.isIterable(this.opts.body)
                    ) {
                        this.opts.body = new BodyAsyncIterable(this.opts.body);
                    }
                }
                onConnect(e) {
                    this.abort = e;
                    this.handler.onConnect(e, {history: this.history});
                }
                onUpgrade(e, t, r) {
                    this.handler.onUpgrade(e, t, r);
                }
                onError(e) {
                    this.handler.onError(e);
                }
                onHeaders(e, t, r, i) {
                    this.location =
                        this.history.length >= this.maxRedirections || A.isDisturbed(this.opts.body)
                            ? null
                            : parseLocation(e, t);
                    if (this.opts.origin) {
                        this.history.push(new URL(this.opts.path, this.opts.origin));
                    }
                    if (!this.location) {
                        return this.handler.onHeaders(e, t, r, i);
                    }
                    const {origin: s, pathname: a, search: o} = A.parseURL(
                        new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)),
                    );
                    const n = o ? `${a}${o}` : a;
                    this.opts.headers = cleanRequestHeaders(this.opts.headers, e === 303, this.opts.origin !== s);
                    this.opts.path = n;
                    this.opts.origin = s;
                    this.opts.maxRedirections = 0;
                    this.opts.query = null;
                    if (e === 303 && this.opts.method !== 'HEAD') {
                        this.opts.method = 'GET';
                        this.opts.body = null;
                    }
                }
                onData(e) {
                    if (this.location) {
                    } else {
                        return this.handler.onData(e);
                    }
                }
                onComplete(e) {
                    if (this.location) {
                        this.location = null;
                        this.abort = null;
                        this.dispatch(this.opts, this);
                    } else {
                        this.handler.onComplete(e);
                    }
                }
                onBodySent(e) {
                    if (this.handler.onBodySent) {
                        this.handler.onBodySent(e);
                    }
                }
            }
            function parseLocation(e, t) {
                if (n.indexOf(e) === -1) {
                    return null;
                }
                for (let e = 0; e < t.length; e += 2) {
                    if (t[e].toString().toLowerCase() === 'location') {
                        return t[e + 1];
                    }
                }
            }
            function shouldRemoveHeader(e, t, r) {
                return (
                    (e.length === 4 && e.toString().toLowerCase() === 'host') ||
                    (t && e.toString().toLowerCase().indexOf('content-') === 0) ||
                    (r && e.length === 13 && e.toString().toLowerCase() === 'authorization') ||
                    (r && e.length === 6 && e.toString().toLowerCase() === 'cookie')
                );
            }
            function cleanRequestHeaders(e, t, r) {
                const A = [];
                if (Array.isArray(e)) {
                    for (let i = 0; i < e.length; i += 2) {
                        if (!shouldRemoveHeader(e[i], t, r)) {
                            A.push(e[i], e[i + 1]);
                        }
                    }
                } else if (e && typeof e === 'object') {
                    for (const i of Object.keys(e)) {
                        if (!shouldRemoveHeader(i, t, r)) {
                            A.push(i, e[i]);
                        }
                    }
                } else {
                    s(e == null, 'headers must be an object or an array');
                }
                return A;
            }
            e.exports = RedirectHandler;
        },
        2286: (e, t, r) => {
            const A = r(9491);
            const {kRetryHandlerDefaultRetry: i} = r(2785);
            const {RequestRetryError: s} = r(8045);
            const {isDisturbed: a, parseHeaders: o, parseRangeHeader: n} = r(3983);
            function calculateRetryAfterHeader(e) {
                const t = Date.now();
                const r = new Date(e).getTime() - t;
                return r;
            }
            class RetryHandler {
                constructor(e, t) {
                    const {retryOptions: r, ...A} = e;
                    const {
                        retry: s,
                        maxRetries: a,
                        maxTimeout: o,
                        minTimeout: n,
                        timeoutFactor: p,
                        methods: d,
                        errorCodes: l,
                        retryAfter: u,
                        statusCodes: c,
                    } = r ?? {};
                    this.dispatch = t.dispatch;
                    this.handler = t.handler;
                    this.opts = A;
                    this.abort = null;
                    this.aborted = false;
                    this.retryOpts = {
                        retry: s ?? RetryHandler[i],
                        retryAfter: u ?? true,
                        maxTimeout: o ?? 30 * 1e3,
                        timeout: n ?? 500,
                        timeoutFactor: p ?? 2,
                        maxRetries: a ?? 5,
                        methods: d ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
                        statusCodes: c ?? [500, 502, 503, 504, 429],
                        errorCodes: l ?? [
                            'ECONNRESET',
                            'ECONNREFUSED',
                            'ENOTFOUND',
                            'ENETDOWN',
                            'ENETUNREACH',
                            'EHOSTDOWN',
                            'EHOSTUNREACH',
                            'EPIPE',
                        ],
                    };
                    this.retryCount = 0;
                    this.start = 0;
                    this.end = null;
                    this.etag = null;
                    this.resume = null;
                    this.handler.onConnect((e) => {
                        this.aborted = true;
                        if (this.abort) {
                            this.abort(e);
                        } else {
                            this.reason = e;
                        }
                    });
                }
                onRequestSent() {
                    if (this.handler.onRequestSent) {
                        this.handler.onRequestSent();
                    }
                }
                onUpgrade(e, t, r) {
                    if (this.handler.onUpgrade) {
                        this.handler.onUpgrade(e, t, r);
                    }
                }
                onConnect(e) {
                    if (this.aborted) {
                        e(this.reason);
                    } else {
                        this.abort = e;
                    }
                }
                onBodySent(e) {
                    if (this.handler.onBodySent) return this.handler.onBodySent(e);
                }
                static [i](e, {state: t, opts: r}, A) {
                    const {statusCode: i, code: s, headers: a} = e;
                    const {method: o, retryOptions: n} = r;
                    const {
                        maxRetries: p,
                        timeout: d,
                        maxTimeout: l,
                        timeoutFactor: u,
                        statusCodes: c,
                        errorCodes: g,
                        methods: m,
                    } = n;
                    let {counter: h, currentTimeout: C} = t;
                    C = C != null && C > 0 ? C : d;
                    if (s && s !== 'UND_ERR_REQ_RETRY' && s !== 'UND_ERR_SOCKET' && !g.includes(s)) {
                        A(e);
                        return;
                    }
                    if (Array.isArray(m) && !m.includes(o)) {
                        A(e);
                        return;
                    }
                    if (i != null && Array.isArray(c) && !c.includes(i)) {
                        A(e);
                        return;
                    }
                    if (h > p) {
                        A(e);
                        return;
                    }
                    let Q = a != null && a['retry-after'];
                    if (Q) {
                        Q = Number(Q);
                        Q = isNaN(Q) ? calculateRetryAfterHeader(Q) : Q * 1e3;
                    }
                    const B = Q > 0 ? Math.min(Q, l) : Math.min(C * u ** h, l);
                    t.currentTimeout = B;
                    setTimeout(() => A(null), B);
                }
                onHeaders(e, t, r, i) {
                    const a = o(t);
                    this.retryCount += 1;
                    if (e >= 300) {
                        this.abort(new s('Request failed', e, {headers: a, count: this.retryCount}));
                        return false;
                    }
                    if (this.resume != null) {
                        this.resume = null;
                        if (e !== 206) {
                            return true;
                        }
                        const t = n(a['content-range']);
                        if (!t) {
                            this.abort(new s('Content-Range mismatch', e, {headers: a, count: this.retryCount}));
                            return false;
                        }
                        if (this.etag != null && this.etag !== a.etag) {
                            this.abort(new s('ETag mismatch', e, {headers: a, count: this.retryCount}));
                            return false;
                        }
                        const {start: i, size: o, end: p = o} = t;
                        A(this.start === i, 'content-range mismatch');
                        A(this.end == null || this.end === p, 'content-range mismatch');
                        this.resume = r;
                        return true;
                    }
                    if (this.end == null) {
                        if (e === 206) {
                            const s = n(a['content-range']);
                            if (s == null) {
                                return this.handler.onHeaders(e, t, r, i);
                            }
                            const {start: o, size: p, end: d = p} = s;
                            A(o != null && Number.isFinite(o) && this.start !== o, 'content-range mismatch');
                            A(Number.isFinite(o));
                            A(d != null && Number.isFinite(d) && this.end !== d, 'invalid content-length');
                            this.start = o;
                            this.end = d;
                        }
                        if (this.end == null) {
                            const e = a['content-length'];
                            this.end = e != null ? Number(e) : null;
                        }
                        A(Number.isFinite(this.start));
                        A(this.end == null || Number.isFinite(this.end), 'invalid content-length');
                        this.resume = r;
                        this.etag = a.etag != null ? a.etag : null;
                        return this.handler.onHeaders(e, t, r, i);
                    }
                    const p = new s('Request failed', e, {headers: a, count: this.retryCount});
                    this.abort(p);
                    return false;
                }
                onData(e) {
                    this.start += e.length;
                    return this.handler.onData(e);
                }
                onComplete(e) {
                    this.retryCount = 0;
                    return this.handler.onComplete(e);
                }
                onError(e) {
                    if (this.aborted || a(this.opts.body)) {
                        return this.handler.onError(e);
                    }
                    this.retryOpts.retry(
                        e,
                        {
                            state: {counter: this.retryCount++, currentTimeout: this.retryAfter},
                            opts: {retryOptions: this.retryOpts, ...this.opts},
                        },
                        onRetry.bind(this),
                    );
                    function onRetry(e) {
                        if (e != null || this.aborted || a(this.opts.body)) {
                            return this.handler.onError(e);
                        }
                        if (this.start !== 0) {
                            this.opts = {
                                ...this.opts,
                                headers: {...this.opts.headers, range: `bytes=${this.start}-${this.end ?? ''}`},
                            };
                        }
                        try {
                            this.dispatch(this.opts, this);
                        } catch (e) {
                            this.handler.onError(e);
                        }
                    }
                }
            }
            e.exports = RetryHandler;
        },
        8861: (e, t, r) => {
            'use strict';
            const A = r(2860);
            function createRedirectInterceptor({maxRedirections: e}) {
                return (t) =>
                    function Intercept(r, i) {
                        const {maxRedirections: s = e} = r;
                        if (!s) {
                            return t(r, i);
                        }
                        const a = new A(t, s, r, i);
                        r = {...r, maxRedirections: 0};
                        return t(r, a);
                    };
            }
            e.exports = createRedirectInterceptor;
        },
        953: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t.SPECIAL_HEADERS = t.HEADER_STATE = t.MINOR = t.MAJOR = t.CONNECTION_TOKEN_CHARS = t.HEADER_CHARS = t.TOKEN = t.STRICT_TOKEN = t.HEX = t.URL_CHAR = t.STRICT_URL_CHAR = t.USERINFO_CHARS = t.MARK = t.ALPHANUM = t.NUM = t.HEX_MAP = t.NUM_MAP = t.ALPHA = t.FINISH = t.H_METHOD_MAP = t.METHOD_MAP = t.METHODS_RTSP = t.METHODS_ICE = t.METHODS_HTTP = t.METHODS = t.LENIENT_FLAGS = t.FLAGS = t.TYPE = t.ERROR = void 0;
            const A = r(1891);
            var i;
            (function (e) {
                e[(e['OK'] = 0)] = 'OK';
                e[(e['INTERNAL'] = 1)] = 'INTERNAL';
                e[(e['STRICT'] = 2)] = 'STRICT';
                e[(e['LF_EXPECTED'] = 3)] = 'LF_EXPECTED';
                e[(e['UNEXPECTED_CONTENT_LENGTH'] = 4)] = 'UNEXPECTED_CONTENT_LENGTH';
                e[(e['CLOSED_CONNECTION'] = 5)] = 'CLOSED_CONNECTION';
                e[(e['INVALID_METHOD'] = 6)] = 'INVALID_METHOD';
                e[(e['INVALID_URL'] = 7)] = 'INVALID_URL';
                e[(e['INVALID_CONSTANT'] = 8)] = 'INVALID_CONSTANT';
                e[(e['INVALID_VERSION'] = 9)] = 'INVALID_VERSION';
                e[(e['INVALID_HEADER_TOKEN'] = 10)] = 'INVALID_HEADER_TOKEN';
                e[(e['INVALID_CONTENT_LENGTH'] = 11)] = 'INVALID_CONTENT_LENGTH';
                e[(e['INVALID_CHUNK_SIZE'] = 12)] = 'INVALID_CHUNK_SIZE';
                e[(e['INVALID_STATUS'] = 13)] = 'INVALID_STATUS';
                e[(e['INVALID_EOF_STATE'] = 14)] = 'INVALID_EOF_STATE';
                e[(e['INVALID_TRANSFER_ENCODING'] = 15)] = 'INVALID_TRANSFER_ENCODING';
                e[(e['CB_MESSAGE_BEGIN'] = 16)] = 'CB_MESSAGE_BEGIN';
                e[(e['CB_HEADERS_COMPLETE'] = 17)] = 'CB_HEADERS_COMPLETE';
                e[(e['CB_MESSAGE_COMPLETE'] = 18)] = 'CB_MESSAGE_COMPLETE';
                e[(e['CB_CHUNK_HEADER'] = 19)] = 'CB_CHUNK_HEADER';
                e[(e['CB_CHUNK_COMPLETE'] = 20)] = 'CB_CHUNK_COMPLETE';
                e[(e['PAUSED'] = 21)] = 'PAUSED';
                e[(e['PAUSED_UPGRADE'] = 22)] = 'PAUSED_UPGRADE';
                e[(e['PAUSED_H2_UPGRADE'] = 23)] = 'PAUSED_H2_UPGRADE';
                e[(e['USER'] = 24)] = 'USER';
            })((i = t.ERROR || (t.ERROR = {})));
            var s;
            (function (e) {
                e[(e['BOTH'] = 0)] = 'BOTH';
                e[(e['REQUEST'] = 1)] = 'REQUEST';
                e[(e['RESPONSE'] = 2)] = 'RESPONSE';
            })((s = t.TYPE || (t.TYPE = {})));
            var a;
            (function (e) {
                e[(e['CONNECTION_KEEP_ALIVE'] = 1)] = 'CONNECTION_KEEP_ALIVE';
                e[(e['CONNECTION_CLOSE'] = 2)] = 'CONNECTION_CLOSE';
                e[(e['CONNECTION_UPGRADE'] = 4)] = 'CONNECTION_UPGRADE';
                e[(e['CHUNKED'] = 8)] = 'CHUNKED';
                e[(e['UPGRADE'] = 16)] = 'UPGRADE';
                e[(e['CONTENT_LENGTH'] = 32)] = 'CONTENT_LENGTH';
                e[(e['SKIPBODY'] = 64)] = 'SKIPBODY';
                e[(e['TRAILING'] = 128)] = 'TRAILING';
                e[(e['TRANSFER_ENCODING'] = 512)] = 'TRANSFER_ENCODING';
            })((a = t.FLAGS || (t.FLAGS = {})));
            var o;
            (function (e) {
                e[(e['HEADERS'] = 1)] = 'HEADERS';
                e[(e['CHUNKED_LENGTH'] = 2)] = 'CHUNKED_LENGTH';
                e[(e['KEEP_ALIVE'] = 4)] = 'KEEP_ALIVE';
            })((o = t.LENIENT_FLAGS || (t.LENIENT_FLAGS = {})));
            var n;
            (function (e) {
                e[(e['DELETE'] = 0)] = 'DELETE';
                e[(e['GET'] = 1)] = 'GET';
                e[(e['HEAD'] = 2)] = 'HEAD';
                e[(e['POST'] = 3)] = 'POST';
                e[(e['PUT'] = 4)] = 'PUT';
                e[(e['CONNECT'] = 5)] = 'CONNECT';
                e[(e['OPTIONS'] = 6)] = 'OPTIONS';
                e[(e['TRACE'] = 7)] = 'TRACE';
                e[(e['COPY'] = 8)] = 'COPY';
                e[(e['LOCK'] = 9)] = 'LOCK';
                e[(e['MKCOL'] = 10)] = 'MKCOL';
                e[(e['MOVE'] = 11)] = 'MOVE';
                e[(e['PROPFIND'] = 12)] = 'PROPFIND';
                e[(e['PROPPATCH'] = 13)] = 'PROPPATCH';
                e[(e['SEARCH'] = 14)] = 'SEARCH';
                e[(e['UNLOCK'] = 15)] = 'UNLOCK';
                e[(e['BIND'] = 16)] = 'BIND';
                e[(e['REBIND'] = 17)] = 'REBIND';
                e[(e['UNBIND'] = 18)] = 'UNBIND';
                e[(e['ACL'] = 19)] = 'ACL';
                e[(e['REPORT'] = 20)] = 'REPORT';
                e[(e['MKACTIVITY'] = 21)] = 'MKACTIVITY';
                e[(e['CHECKOUT'] = 22)] = 'CHECKOUT';
                e[(e['MERGE'] = 23)] = 'MERGE';
                e[(e['M-SEARCH'] = 24)] = 'M-SEARCH';
                e[(e['NOTIFY'] = 25)] = 'NOTIFY';
                e[(e['SUBSCRIBE'] = 26)] = 'SUBSCRIBE';
                e[(e['UNSUBSCRIBE'] = 27)] = 'UNSUBSCRIBE';
                e[(e['PATCH'] = 28)] = 'PATCH';
                e[(e['PURGE'] = 29)] = 'PURGE';
                e[(e['MKCALENDAR'] = 30)] = 'MKCALENDAR';
                e[(e['LINK'] = 31)] = 'LINK';
                e[(e['UNLINK'] = 32)] = 'UNLINK';
                e[(e['SOURCE'] = 33)] = 'SOURCE';
                e[(e['PRI'] = 34)] = 'PRI';
                e[(e['DESCRIBE'] = 35)] = 'DESCRIBE';
                e[(e['ANNOUNCE'] = 36)] = 'ANNOUNCE';
                e[(e['SETUP'] = 37)] = 'SETUP';
                e[(e['PLAY'] = 38)] = 'PLAY';
                e[(e['PAUSE'] = 39)] = 'PAUSE';
                e[(e['TEARDOWN'] = 40)] = 'TEARDOWN';
                e[(e['GET_PARAMETER'] = 41)] = 'GET_PARAMETER';
                e[(e['SET_PARAMETER'] = 42)] = 'SET_PARAMETER';
                e[(e['REDIRECT'] = 43)] = 'REDIRECT';
                e[(e['RECORD'] = 44)] = 'RECORD';
                e[(e['FLUSH'] = 45)] = 'FLUSH';
            })((n = t.METHODS || (t.METHODS = {})));
            t.METHODS_HTTP = [
                n.DELETE,
                n.GET,
                n.HEAD,
                n.POST,
                n.PUT,
                n.CONNECT,
                n.OPTIONS,
                n.TRACE,
                n.COPY,
                n.LOCK,
                n.MKCOL,
                n.MOVE,
                n.PROPFIND,
                n.PROPPATCH,
                n.SEARCH,
                n.UNLOCK,
                n.BIND,
                n.REBIND,
                n.UNBIND,
                n.ACL,
                n.REPORT,
                n.MKACTIVITY,
                n.CHECKOUT,
                n.MERGE,
                n['M-SEARCH'],
                n.NOTIFY,
                n.SUBSCRIBE,
                n.UNSUBSCRIBE,
                n.PATCH,
                n.PURGE,
                n.MKCALENDAR,
                n.LINK,
                n.UNLINK,
                n.PRI,
                n.SOURCE,
            ];
            t.METHODS_ICE = [n.SOURCE];
            t.METHODS_RTSP = [
                n.OPTIONS,
                n.DESCRIBE,
                n.ANNOUNCE,
                n.SETUP,
                n.PLAY,
                n.PAUSE,
                n.TEARDOWN,
                n.GET_PARAMETER,
                n.SET_PARAMETER,
                n.REDIRECT,
                n.RECORD,
                n.FLUSH,
                n.GET,
                n.POST,
            ];
            t.METHOD_MAP = A.enumToMap(n);
            t.H_METHOD_MAP = {};
            Object.keys(t.METHOD_MAP).forEach((e) => {
                if (/^H/.test(e)) {
                    t.H_METHOD_MAP[e] = t.METHOD_MAP[e];
                }
            });
            var p;
            (function (e) {
                e[(e['SAFE'] = 0)] = 'SAFE';
                e[(e['SAFE_WITH_CB'] = 1)] = 'SAFE_WITH_CB';
                e[(e['UNSAFE'] = 2)] = 'UNSAFE';
            })((p = t.FINISH || (t.FINISH = {})));
            t.ALPHA = [];
            for (let e = 'A'.charCodeAt(0); e <= 'Z'.charCodeAt(0); e++) {
                t.ALPHA.push(String.fromCharCode(e));
                t.ALPHA.push(String.fromCharCode(e + 32));
            }
            t.NUM_MAP = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9};
            t.HEX_MAP = {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                6: 6,
                7: 7,
                8: 8,
                9: 9,
                A: 10,
                B: 11,
                C: 12,
                D: 13,
                E: 14,
                F: 15,
                a: 10,
                b: 11,
                c: 12,
                d: 13,
                e: 14,
                f: 15,
            };
            t.NUM = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
            t.ALPHANUM = t.ALPHA.concat(t.NUM);
            t.MARK = ['-', '_', '.', '!', '~', '*', "'", '(', ')'];
            t.USERINFO_CHARS = t.ALPHANUM.concat(t.MARK).concat(['%', ';', ':', '&', '=', '+', '$', ',']);
            t.STRICT_URL_CHAR = [
                '!',
                '"',
                '$',
                '%',
                '&',
                "'",
                '(',
                ')',
                '*',
                '+',
                ',',
                '-',
                '.',
                '/',
                ':',
                ';',
                '<',
                '=',
                '>',
                '@',
                '[',
                '\\',
                ']',
                '^',
                '_',
                '`',
                '{',
                '|',
                '}',
                '~',
            ].concat(t.ALPHANUM);
            t.URL_CHAR = t.STRICT_URL_CHAR.concat(['\t', '\f']);
            for (let e = 128; e <= 255; e++) {
                t.URL_CHAR.push(e);
            }
            t.HEX = t.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
            t.STRICT_TOKEN = ['!', '#', '$', '%', '&', "'", '*', '+', '-', '.', '^', '_', '`', '|', '~'].concat(
                t.ALPHANUM,
            );
            t.TOKEN = t.STRICT_TOKEN.concat([' ']);
            t.HEADER_CHARS = ['\t'];
            for (let e = 32; e <= 255; e++) {
                if (e !== 127) {
                    t.HEADER_CHARS.push(e);
                }
            }
            t.CONNECTION_TOKEN_CHARS = t.HEADER_CHARS.filter((e) => e !== 44);
            t.MAJOR = t.NUM_MAP;
            t.MINOR = t.MAJOR;
            var d;
            (function (e) {
                e[(e['GENERAL'] = 0)] = 'GENERAL';
                e[(e['CONNECTION'] = 1)] = 'CONNECTION';
                e[(e['CONTENT_LENGTH'] = 2)] = 'CONTENT_LENGTH';
                e[(e['TRANSFER_ENCODING'] = 3)] = 'TRANSFER_ENCODING';
                e[(e['UPGRADE'] = 4)] = 'UPGRADE';
                e[(e['CONNECTION_KEEP_ALIVE'] = 5)] = 'CONNECTION_KEEP_ALIVE';
                e[(e['CONNECTION_CLOSE'] = 6)] = 'CONNECTION_CLOSE';
                e[(e['CONNECTION_UPGRADE'] = 7)] = 'CONNECTION_UPGRADE';
                e[(e['TRANSFER_ENCODING_CHUNKED'] = 8)] = 'TRANSFER_ENCODING_CHUNKED';
            })((d = t.HEADER_STATE || (t.HEADER_STATE = {})));
            t.SPECIAL_HEADERS = {
                connection: d.CONNECTION,
                'content-length': d.CONTENT_LENGTH,
                'proxy-connection': d.CONNECTION,
                'transfer-encoding': d.TRANSFER_ENCODING,
                upgrade: d.UPGRADE,
            };
        },
        1145: (e) => {
            e.exports =
                '';
        },
        5627: (e) => {
            e.exports =
                '';
        },
        1891: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t.enumToMap = void 0;
            function enumToMap(e) {
                const t = {};
                Object.keys(e).forEach((r) => {
                    const A = e[r];
                    if (typeof A === 'number') {
                        t[r] = A;
                    }
                });
                return t;
            }
            t.enumToMap = enumToMap;
        },
        6771: (e, t, r) => {
            'use strict';
            const {kClients: A} = r(2785);
            const i = r(7890);
            const {
                kAgent: s,
                kMockAgentSet: a,
                kMockAgentGet: o,
                kDispatches: n,
                kIsMockActive: p,
                kNetConnect: d,
                kGetNetConnect: l,
                kOptions: u,
                kFactory: c,
            } = r(4347);
            const g = r(8687);
            const m = r(6193);
            const {matchValue: h, buildMockOptions: C} = r(9323);
            const {InvalidArgumentError: Q, UndiciError: B} = r(8045);
            const I = r(412);
            const y = r(8891);
            const w = r(6823);
            class FakeWeakRef {
                constructor(e) {
                    this.value = e;
                }
                deref() {
                    return this.value;
                }
            }
            class MockAgent extends I {
                constructor(e) {
                    super(e);
                    this[d] = true;
                    this[p] = true;
                    if (e && e.agent && typeof e.agent.dispatch !== 'function') {
                        throw new Q('Argument opts.agent must implement Agent');
                    }
                    const t = e && e.agent ? e.agent : new i(e);
                    this[s] = t;
                    this[A] = t[A];
                    this[u] = C(e);
                }
                get(e) {
                    let t = this[o](e);
                    if (!t) {
                        t = this[c](e);
                        this[a](e, t);
                    }
                    return t;
                }
                dispatch(e, t) {
                    this.get(e.origin);
                    return this[s].dispatch(e, t);
                }
                async close() {
                    await this[s].close();
                    this[A].clear();
                }
                deactivate() {
                    this[p] = false;
                }
                activate() {
                    this[p] = true;
                }
                enableNetConnect(e) {
                    if (typeof e === 'string' || typeof e === 'function' || e instanceof RegExp) {
                        if (Array.isArray(this[d])) {
                            this[d].push(e);
                        } else {
                            this[d] = [e];
                        }
                    } else if (typeof e === 'undefined') {
                        this[d] = true;
                    } else {
                        throw new Q('Unsupported matcher. Must be one of String|Function|RegExp.');
                    }
                }
                disableNetConnect() {
                    this[d] = false;
                }
                get isMockActive() {
                    return this[p];
                }
                [a](e, t) {
                    this[A].set(e, new FakeWeakRef(t));
                }
                [c](e) {
                    const t = Object.assign({agent: this}, this[u]);
                    return this[u] && this[u].connections === 1 ? new g(e, t) : new m(e, t);
                }
                [o](e) {
                    const t = this[A].get(e);
                    if (t) {
                        return t.deref();
                    }
                    if (typeof e !== 'string') {
                        const t = this[c]('http://localhost:9999');
                        this[a](e, t);
                        return t;
                    }
                    for (const [t, r] of Array.from(this[A])) {
                        const A = r.deref();
                        if (A && typeof t !== 'string' && h(t, e)) {
                            const t = this[c](e);
                            this[a](e, t);
                            t[n] = A[n];
                            return t;
                        }
                    }
                }
                [l]() {
                    return this[d];
                }
                pendingInterceptors() {
                    const e = this[A];
                    return Array.from(e.entries())
                        .flatMap(([e, t]) => t.deref()[n].map((t) => ({...t, origin: e})))
                        .filter(({pending: e}) => e);
                }
                assertNoPendingInterceptors({pendingInterceptorsFormatter: e = new w()} = {}) {
                    const t = this.pendingInterceptors();
                    if (t.length === 0) {
                        return;
                    }
                    const r = new y('interceptor', 'interceptors').pluralize(t.length);
                    throw new B(`\n${r.count} ${r.noun} ${r.is} pending:\n\n${e.format(t)}\n`.trim());
                }
            }
            e.exports = MockAgent;
        },
        8687: (e, t, r) => {
            'use strict';
            const {promisify: A} = r(3837);
            const i = r(3598);
            const {buildMockDispatch: s} = r(9323);
            const {
                kDispatches: a,
                kMockAgent: o,
                kClose: n,
                kOriginalClose: p,
                kOrigin: d,
                kOriginalDispatch: l,
                kConnected: u,
            } = r(4347);
            const {MockInterceptor: c} = r(410);
            const g = r(2785);
            const {InvalidArgumentError: m} = r(8045);
            class MockClient extends i {
                constructor(e, t) {
                    super(e, t);
                    if (!t || !t.agent || typeof t.agent.dispatch !== 'function') {
                        throw new m('Argument opts.agent must implement Agent');
                    }
                    this[o] = t.agent;
                    this[d] = e;
                    this[a] = [];
                    this[u] = 1;
                    this[l] = this.dispatch;
                    this[p] = this.close.bind(this);
                    this.dispatch = s.call(this);
                    this.close = this[n];
                }
                get [g.kConnected]() {
                    return this[u];
                }
                intercept(e) {
                    return new c(e, this[a]);
                }
                async [n]() {
                    await A(this[p])();
                    this[u] = 0;
                    this[o][g.kClients].delete(this[d]);
                }
            }
            e.exports = MockClient;
        },
        888: (e, t, r) => {
            'use strict';
            const {UndiciError: A} = r(8045);
            class MockNotMatchedError extends A {
                constructor(e) {
                    super(e);
                    Error.captureStackTrace(this, MockNotMatchedError);
                    this.name = 'MockNotMatchedError';
                    this.message = e || 'The request does not match any registered mock dispatches';
                    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED';
                }
            }
            e.exports = {MockNotMatchedError: MockNotMatchedError};
        },
        410: (e, t, r) => {
            'use strict';
            const {getResponseData: A, buildKey: i, addMockDispatch: s} = r(9323);
            const {
                kDispatches: a,
                kDispatchKey: o,
                kDefaultHeaders: n,
                kDefaultTrailers: p,
                kContentLength: d,
                kMockDispatch: l,
            } = r(4347);
            const {InvalidArgumentError: u} = r(8045);
            const {buildURL: c} = r(3983);
            class MockScope {
                constructor(e) {
                    this[l] = e;
                }
                delay(e) {
                    if (typeof e !== 'number' || !Number.isInteger(e) || e <= 0) {
                        throw new u('waitInMs must be a valid integer > 0');
                    }
                    this[l].delay = e;
                    return this;
                }
                persist() {
                    this[l].persist = true;
                    return this;
                }
                times(e) {
                    if (typeof e !== 'number' || !Number.isInteger(e) || e <= 0) {
                        throw new u('repeatTimes must be a valid integer > 0');
                    }
                    this[l].times = e;
                    return this;
                }
            }
            class MockInterceptor {
                constructor(e, t) {
                    if (typeof e !== 'object') {
                        throw new u('opts must be an object');
                    }
                    if (typeof e.path === 'undefined') {
                        throw new u('opts.path must be defined');
                    }
                    if (typeof e.method === 'undefined') {
                        e.method = 'GET';
                    }
                    if (typeof e.path === 'string') {
                        if (e.query) {
                            e.path = c(e.path, e.query);
                        } else {
                            const t = new URL(e.path, 'data://');
                            e.path = t.pathname + t.search;
                        }
                    }
                    if (typeof e.method === 'string') {
                        e.method = e.method.toUpperCase();
                    }
                    this[o] = i(e);
                    this[a] = t;
                    this[n] = {};
                    this[p] = {};
                    this[d] = false;
                }
                createMockScopeDispatchData(e, t, r = {}) {
                    const i = A(t);
                    const s = this[d] ? {'content-length': i.length} : {};
                    const a = {...this[n], ...s, ...r.headers};
                    const o = {...this[p], ...r.trailers};
                    return {statusCode: e, data: t, headers: a, trailers: o};
                }
                validateReplyParameters(e, t, r) {
                    if (typeof e === 'undefined') {
                        throw new u('statusCode must be defined');
                    }
                    if (typeof t === 'undefined') {
                        throw new u('data must be defined');
                    }
                    if (typeof r !== 'object') {
                        throw new u('responseOptions must be an object');
                    }
                }
                reply(e) {
                    if (typeof e === 'function') {
                        const wrappedDefaultsCallback = (t) => {
                            const r = e(t);
                            if (typeof r !== 'object') {
                                throw new u('reply options callback must return an object');
                            }
                            const {statusCode: A, data: i = '', responseOptions: s = {}} = r;
                            this.validateReplyParameters(A, i, s);
                            return {...this.createMockScopeDispatchData(A, i, s)};
                        };
                        const t = s(this[a], this[o], wrappedDefaultsCallback);
                        return new MockScope(t);
                    }
                    const [t, r = '', A = {}] = [...arguments];
                    this.validateReplyParameters(t, r, A);
                    const i = this.createMockScopeDispatchData(t, r, A);
                    const n = s(this[a], this[o], i);
                    return new MockScope(n);
                }
                replyWithError(e) {
                    if (typeof e === 'undefined') {
                        throw new u('error must be defined');
                    }
                    const t = s(this[a], this[o], {error: e});
                    return new MockScope(t);
                }
                defaultReplyHeaders(e) {
                    if (typeof e === 'undefined') {
                        throw new u('headers must be defined');
                    }
                    this[n] = e;
                    return this;
                }
                defaultReplyTrailers(e) {
                    if (typeof e === 'undefined') {
                        throw new u('trailers must be defined');
                    }
                    this[p] = e;
                    return this;
                }
                replyContentLength() {
                    this[d] = true;
                    return this;
                }
            }
            e.exports.MockInterceptor = MockInterceptor;
            e.exports.MockScope = MockScope;
        },
        6193: (e, t, r) => {
            'use strict';
            const {promisify: A} = r(3837);
            const i = r(4634);
            const {buildMockDispatch: s} = r(9323);
            const {
                kDispatches: a,
                kMockAgent: o,
                kClose: n,
                kOriginalClose: p,
                kOrigin: d,
                kOriginalDispatch: l,
                kConnected: u,
            } = r(4347);
            const {MockInterceptor: c} = r(410);
            const g = r(2785);
            const {InvalidArgumentError: m} = r(8045);
            class MockPool extends i {
                constructor(e, t) {
                    super(e, t);
                    if (!t || !t.agent || typeof t.agent.dispatch !== 'function') {
                        throw new m('Argument opts.agent must implement Agent');
                    }
                    this[o] = t.agent;
                    this[d] = e;
                    this[a] = [];
                    this[u] = 1;
                    this[l] = this.dispatch;
                    this[p] = this.close.bind(this);
                    this.dispatch = s.call(this);
                    this.close = this[n];
                }
                get [g.kConnected]() {
                    return this[u];
                }
                intercept(e) {
                    return new c(e, this[a]);
                }
                async [n]() {
                    await A(this[p])();
                    this[u] = 0;
                    this[o][g.kClients].delete(this[d]);
                }
            }
            e.exports = MockPool;
        },
        4347: (e) => {
            'use strict';
            e.exports = {
                kAgent: Symbol('agent'),
                kOptions: Symbol('options'),
                kFactory: Symbol('factory'),
                kDispatches: Symbol('dispatches'),
                kDispatchKey: Symbol('dispatch key'),
                kDefaultHeaders: Symbol('default headers'),
                kDefaultTrailers: Symbol('default trailers'),
                kContentLength: Symbol('content length'),
                kMockAgent: Symbol('mock agent'),
                kMockAgentSet: Symbol('mock agent set'),
                kMockAgentGet: Symbol('mock agent get'),
                kMockDispatch: Symbol('mock dispatch'),
                kClose: Symbol('close'),
                kOriginalClose: Symbol('original agent close'),
                kOrigin: Symbol('origin'),
                kIsMockActive: Symbol('is mock active'),
                kNetConnect: Symbol('net connect'),
                kGetNetConnect: Symbol('get net connect'),
                kConnected: Symbol('connected'),
            };
        },
        9323: (e, t, r) => {
            'use strict';
            const {MockNotMatchedError: A} = r(888);
            const {kDispatches: i, kMockAgent: s, kOriginalDispatch: a, kOrigin: o, kGetNetConnect: n} = r(4347);
            const {buildURL: p, nop: d} = r(3983);
            const {STATUS_CODES: l} = r(3685);
            const {
                types: {isPromise: u},
            } = r(3837);
            function matchValue(e, t) {
                if (typeof e === 'string') {
                    return e === t;
                }
                if (e instanceof RegExp) {
                    return e.test(t);
                }
                if (typeof e === 'function') {
                    return e(t) === true;
                }
                return false;
            }
            function lowerCaseEntries(e) {
                return Object.fromEntries(Object.entries(e).map(([e, t]) => [e.toLocaleLowerCase(), t]));
            }
            function getHeaderByName(e, t) {
                if (Array.isArray(e)) {
                    for (let r = 0; r < e.length; r += 2) {
                        if (e[r].toLocaleLowerCase() === t.toLocaleLowerCase()) {
                            return e[r + 1];
                        }
                    }
                    return undefined;
                } else if (typeof e.get === 'function') {
                    return e.get(t);
                } else {
                    return lowerCaseEntries(e)[t.toLocaleLowerCase()];
                }
            }
            function buildHeadersFromArray(e) {
                const t = e.slice();
                const r = [];
                for (let e = 0; e < t.length; e += 2) {
                    r.push([t[e], t[e + 1]]);
                }
                return Object.fromEntries(r);
            }
            function matchHeaders(e, t) {
                if (typeof e.headers === 'function') {
                    if (Array.isArray(t)) {
                        t = buildHeadersFromArray(t);
                    }
                    return e.headers(t ? lowerCaseEntries(t) : {});
                }
                if (typeof e.headers === 'undefined') {
                    return true;
                }
                if (typeof t !== 'object' || typeof e.headers !== 'object') {
                    return false;
                }
                for (const [r, A] of Object.entries(e.headers)) {
                    const e = getHeaderByName(t, r);
                    if (!matchValue(A, e)) {
                        return false;
                    }
                }
                return true;
            }
            function safeUrl(e) {
                if (typeof e !== 'string') {
                    return e;
                }
                const t = e.split('?');
                if (t.length !== 2) {
                    return e;
                }
                const r = new URLSearchParams(t.pop());
                r.sort();
                return [...t, r.toString()].join('?');
            }
            function matchKey(e, {path: t, method: r, body: A, headers: i}) {
                const s = matchValue(e.path, t);
                const a = matchValue(e.method, r);
                const o = typeof e.body !== 'undefined' ? matchValue(e.body, A) : true;
                const n = matchHeaders(e, i);
                return s && a && o && n;
            }
            function getResponseData(e) {
                if (Buffer.isBuffer(e)) {
                    return e;
                } else if (typeof e === 'object') {
                    return JSON.stringify(e);
                } else {
                    return e.toString();
                }
            }
            function getMockDispatch(e, t) {
                const r = t.query ? p(t.path, t.query) : t.path;
                const i = typeof r === 'string' ? safeUrl(r) : r;
                let s = e.filter(({consumed: e}) => !e).filter(({path: e}) => matchValue(safeUrl(e), i));
                if (s.length === 0) {
                    throw new A(`Mock dispatch not matched for path '${i}'`);
                }
                s = s.filter(({method: e}) => matchValue(e, t.method));
                if (s.length === 0) {
                    throw new A(`Mock dispatch not matched for method '${t.method}'`);
                }
                s = s.filter(({body: e}) => (typeof e !== 'undefined' ? matchValue(e, t.body) : true));
                if (s.length === 0) {
                    throw new A(`Mock dispatch not matched for body '${t.body}'`);
                }
                s = s.filter((e) => matchHeaders(e, t.headers));
                if (s.length === 0) {
                    throw new A(
                        `Mock dispatch not matched for headers '${
                            typeof t.headers === 'object' ? JSON.stringify(t.headers) : t.headers
                        }'`,
                    );
                }
                return s[0];
            }
            function addMockDispatch(e, t, r) {
                const A = {timesInvoked: 0, times: 1, persist: false, consumed: false};
                const i = typeof r === 'function' ? {callback: r} : {...r};
                const s = {...A, ...t, pending: true, data: {error: null, ...i}};
                e.push(s);
                return s;
            }
            function deleteMockDispatch(e, t) {
                const r = e.findIndex((e) => {
                    if (!e.consumed) {
                        return false;
                    }
                    return matchKey(e, t);
                });
                if (r !== -1) {
                    e.splice(r, 1);
                }
            }
            function buildKey(e) {
                const {path: t, method: r, body: A, headers: i, query: s} = e;
                return {path: t, method: r, body: A, headers: i, query: s};
            }
            function generateKeyValues(e) {
                return Object.entries(e).reduce(
                    (e, [t, r]) => [
                        ...e,
                        Buffer.from(`${t}`),
                        Array.isArray(r) ? r.map((e) => Buffer.from(`${e}`)) : Buffer.from(`${r}`),
                    ],
                    [],
                );
            }
            function getStatusText(e) {
                return l[e] || 'unknown';
            }
            async function getResponse(e) {
                const t = [];
                for await (const r of e) {
                    t.push(r);
                }
                return Buffer.concat(t).toString('utf8');
            }
            function mockDispatch(e, t) {
                const r = buildKey(e);
                const A = getMockDispatch(this[i], r);
                A.timesInvoked++;
                if (A.data.callback) {
                    A.data = {...A.data, ...A.data.callback(e)};
                }
                const {
                    data: {statusCode: s, data: a, headers: o, trailers: n, error: p},
                    delay: l,
                    persist: c,
                } = A;
                const {timesInvoked: g, times: m} = A;
                A.consumed = !c && g >= m;
                A.pending = g < m;
                if (p !== null) {
                    deleteMockDispatch(this[i], r);
                    t.onError(p);
                    return true;
                }
                if (typeof l === 'number' && l > 0) {
                    setTimeout(() => {
                        handleReply(this[i]);
                    }, l);
                } else {
                    handleReply(this[i]);
                }
                function handleReply(A, i = a) {
                    const p = Array.isArray(e.headers) ? buildHeadersFromArray(e.headers) : e.headers;
                    const l = typeof i === 'function' ? i({...e, headers: p}) : i;
                    if (u(l)) {
                        l.then((e) => handleReply(A, e));
                        return;
                    }
                    const c = getResponseData(l);
                    const g = generateKeyValues(o);
                    const m = generateKeyValues(n);
                    t.abort = d;
                    t.onHeaders(s, g, resume, getStatusText(s));
                    t.onData(Buffer.from(c));
                    t.onComplete(m);
                    deleteMockDispatch(A, r);
                }
                function resume() {}
                return true;
            }
            function buildMockDispatch() {
                const e = this[s];
                const t = this[o];
                const r = this[a];
                return function dispatch(i, s) {
                    if (e.isMockActive) {
                        try {
                            mockDispatch.call(this, i, s);
                        } catch (a) {
                            if (a instanceof A) {
                                const o = e[n]();
                                if (o === false) {
                                    throw new A(
                                        `${a.message}: subsequent request to origin ${t} was not allowed (net.connect disabled)`,
                                    );
                                }
                                if (checkNetConnect(o, t)) {
                                    r.call(this, i, s);
                                } else {
                                    throw new A(
                                        `${a.message}: subsequent request to origin ${t} was not allowed (net.connect is not enabled for this origin)`,
                                    );
                                }
                            } else {
                                throw a;
                            }
                        }
                    } else {
                        r.call(this, i, s);
                    }
                };
            }
            function checkNetConnect(e, t) {
                const r = new URL(t);
                if (e === true) {
                    return true;
                } else if (Array.isArray(e) && e.some((e) => matchValue(e, r.host))) {
                    return true;
                }
                return false;
            }
            function buildMockOptions(e) {
                if (e) {
                    const {agent: t, ...r} = e;
                    return r;
                }
            }
            e.exports = {
                getResponseData: getResponseData,
                getMockDispatch: getMockDispatch,
                addMockDispatch: addMockDispatch,
                deleteMockDispatch: deleteMockDispatch,
                buildKey: buildKey,
                generateKeyValues: generateKeyValues,
                matchValue: matchValue,
                getResponse: getResponse,
                getStatusText: getStatusText,
                mockDispatch: mockDispatch,
                buildMockDispatch: buildMockDispatch,
                checkNetConnect: checkNetConnect,
                buildMockOptions: buildMockOptions,
                getHeaderByName: getHeaderByName,
            };
        },
        6823: (e, t, r) => {
            'use strict';
            const {Transform: A} = r(2781);
            const {Console: i} = r(6206);
            e.exports = class PendingInterceptorsFormatter {
                constructor({disableColors: e} = {}) {
                    this.transform = new A({
                        transform(e, t, r) {
                            r(null, e);
                        },
                    });
                    this.logger = new i({stdout: this.transform, inspectOptions: {colors: !e && !process.env.CI}});
                }
                format(e) {
                    const t = e.map(
                        ({
                            method: e,
                            path: t,
                            data: {statusCode: r},
                            persist: A,
                            times: i,
                            timesInvoked: s,
                            origin: a,
                        }) => ({
                            Method: e,
                            Origin: a,
                            Path: t,
                            'Status code': r,
                            Persistent: A ? '✅' : '❌',
                            Invocations: s,
                            Remaining: A ? Infinity : i - s,
                        }),
                    );
                    this.logger.table(t);
                    return this.transform.read().toString();
                }
            };
        },
        8891: (e) => {
            'use strict';
            const t = {pronoun: 'it', is: 'is', was: 'was', this: 'this'};
            const r = {pronoun: 'they', is: 'are', was: 'were', this: 'these'};
            e.exports = class Pluralizer {
                constructor(e, t) {
                    this.singular = e;
                    this.plural = t;
                }
                pluralize(e) {
                    const A = e === 1;
                    const i = A ? t : r;
                    const s = A ? this.singular : this.plural;
                    return {...i, count: e, noun: s};
                }
            };
        },
        8266: (e) => {
            'use strict';
            const t = 2048;
            const r = t - 1;
            class FixedCircularBuffer {
                constructor() {
                    this.bottom = 0;
                    this.top = 0;
                    this.list = new Array(t);
                    this.next = null;
                }
                isEmpty() {
                    return this.top === this.bottom;
                }
                isFull() {
                    return ((this.top + 1) & r) === this.bottom;
                }
                push(e) {
                    this.list[this.top] = e;
                    this.top = (this.top + 1) & r;
                }
                shift() {
                    const e = this.list[this.bottom];
                    if (e === undefined) return null;
                    this.list[this.bottom] = undefined;
                    this.bottom = (this.bottom + 1) & r;
                    return e;
                }
            }
            e.exports = class FixedQueue {
                constructor() {
                    this.head = this.tail = new FixedCircularBuffer();
                }
                isEmpty() {
                    return this.head.isEmpty();
                }
                push(e) {
                    if (this.head.isFull()) {
                        this.head = this.head.next = new FixedCircularBuffer();
                    }
                    this.head.push(e);
                }
                shift() {
                    const e = this.tail;
                    const t = e.shift();
                    if (e.isEmpty() && e.next !== null) {
                        this.tail = e.next;
                    }
                    return t;
                }
            };
        },
        3198: (e, t, r) => {
            'use strict';
            const A = r(4839);
            const i = r(8266);
            const {
                kConnected: s,
                kSize: a,
                kRunning: o,
                kPending: n,
                kQueued: p,
                kBusy: d,
                kFree: l,
                kUrl: u,
                kClose: c,
                kDestroy: g,
                kDispatch: m,
            } = r(2785);
            const h = r(9689);
            const C = Symbol('clients');
            const Q = Symbol('needDrain');
            const B = Symbol('queue');
            const I = Symbol('closed resolve');
            const y = Symbol('onDrain');
            const w = Symbol('onConnect');
            const b = Symbol('onDisconnect');
            const v = Symbol('onConnectionError');
            const D = Symbol('get dispatcher');
            const R = Symbol('add client');
            const k = Symbol('remove client');
            const S = Symbol('stats');
            class PoolBase extends A {
                constructor() {
                    super();
                    this[B] = new i();
                    this[C] = [];
                    this[p] = 0;
                    const e = this;
                    this[y] = function onDrain(t, r) {
                        const A = e[B];
                        let i = false;
                        while (!i) {
                            const t = A.shift();
                            if (!t) {
                                break;
                            }
                            e[p]--;
                            i = !this.dispatch(t.opts, t.handler);
                        }
                        this[Q] = i;
                        if (!this[Q] && e[Q]) {
                            e[Q] = false;
                            e.emit('drain', t, [e, ...r]);
                        }
                        if (e[I] && A.isEmpty()) {
                            Promise.all(e[C].map((e) => e.close())).then(e[I]);
                        }
                    };
                    this[w] = (t, r) => {
                        e.emit('connect', t, [e, ...r]);
                    };
                    this[b] = (t, r, A) => {
                        e.emit('disconnect', t, [e, ...r], A);
                    };
                    this[v] = (t, r, A) => {
                        e.emit('connectionError', t, [e, ...r], A);
                    };
                    this[S] = new h(this);
                }
                get [d]() {
                    return this[Q];
                }
                get [s]() {
                    return this[C].filter((e) => e[s]).length;
                }
                get [l]() {
                    return this[C].filter((e) => e[s] && !e[Q]).length;
                }
                get [n]() {
                    let e = this[p];
                    for (const {[n]: t} of this[C]) {
                        e += t;
                    }
                    return e;
                }
                get [o]() {
                    let e = 0;
                    for (const {[o]: t} of this[C]) {
                        e += t;
                    }
                    return e;
                }
                get [a]() {
                    let e = this[p];
                    for (const {[a]: t} of this[C]) {
                        e += t;
                    }
                    return e;
                }
                get stats() {
                    return this[S];
                }
                async [c]() {
                    if (this[B].isEmpty()) {
                        return Promise.all(this[C].map((e) => e.close()));
                    } else {
                        return new Promise((e) => {
                            this[I] = e;
                        });
                    }
                }
                async [g](e) {
                    while (true) {
                        const t = this[B].shift();
                        if (!t) {
                            break;
                        }
                        t.handler.onError(e);
                    }
                    return Promise.all(this[C].map((t) => t.destroy(e)));
                }
                [m](e, t) {
                    const r = this[D]();
                    if (!r) {
                        this[Q] = true;
                        this[B].push({opts: e, handler: t});
                        this[p]++;
                    } else if (!r.dispatch(e, t)) {
                        r[Q] = true;
                        this[Q] = !this[D]();
                    }
                    return !this[Q];
                }
                [R](e) {
                    e.on('drain', this[y])
                        .on('connect', this[w])
                        .on('disconnect', this[b])
                        .on('connectionError', this[v]);
                    this[C].push(e);
                    if (this[Q]) {
                        process.nextTick(() => {
                            if (this[Q]) {
                                this[y](e[u], [this, e]);
                            }
                        });
                    }
                    return this;
                }
                [k](e) {
                    e.close(() => {
                        const t = this[C].indexOf(e);
                        if (t !== -1) {
                            this[C].splice(t, 1);
                        }
                    });
                    this[Q] = this[C].some((e) => !e[Q] && e.closed !== true && e.destroyed !== true);
                }
            }
            e.exports = {
                PoolBase: PoolBase,
                kClients: C,
                kNeedDrain: Q,
                kAddClient: R,
                kRemoveClient: k,
                kGetDispatcher: D,
            };
        },
        9689: (e, t, r) => {
            const {kFree: A, kConnected: i, kPending: s, kQueued: a, kRunning: o, kSize: n} = r(2785);
            const p = Symbol('pool');
            class PoolStats {
                constructor(e) {
                    this[p] = e;
                }
                get connected() {
                    return this[p][i];
                }
                get free() {
                    return this[p][A];
                }
                get pending() {
                    return this[p][s];
                }
                get queued() {
                    return this[p][a];
                }
                get running() {
                    return this[p][o];
                }
                get size() {
                    return this[p][n];
                }
            }
            e.exports = PoolStats;
        },
        4634: (e, t, r) => {
            'use strict';
            const {PoolBase: A, kClients: i, kNeedDrain: s, kAddClient: a, kGetDispatcher: o} = r(3198);
            const n = r(3598);
            const {InvalidArgumentError: p} = r(8045);
            const d = r(3983);
            const {kUrl: l, kInterceptors: u} = r(2785);
            const c = r(2067);
            const g = Symbol('options');
            const m = Symbol('connections');
            const h = Symbol('factory');
            function defaultFactory(e, t) {
                return new n(e, t);
            }
            class Pool extends A {
                constructor(
                    e,
                    {
                        connections: t,
                        factory: r = defaultFactory,
                        connect: A,
                        connectTimeout: i,
                        tls: s,
                        maxCachedSessions: a,
                        socketPath: o,
                        autoSelectFamily: n,
                        autoSelectFamilyAttemptTimeout: C,
                        allowH2: Q,
                        ...B
                    } = {},
                ) {
                    super();
                    if (t != null && (!Number.isFinite(t) || t < 0)) {
                        throw new p('invalid connections');
                    }
                    if (typeof r !== 'function') {
                        throw new p('factory must be a function.');
                    }
                    if (A != null && typeof A !== 'function' && typeof A !== 'object') {
                        throw new p('connect must be a function or an object');
                    }
                    if (typeof A !== 'function') {
                        A = c({
                            ...s,
                            maxCachedSessions: a,
                            allowH2: Q,
                            socketPath: o,
                            timeout: i,
                            ...(d.nodeHasAutoSelectFamily && n
                                ? {autoSelectFamily: n, autoSelectFamilyAttemptTimeout: C}
                                : undefined),
                            ...A,
                        });
                    }
                    this[u] =
                        B.interceptors && B.interceptors.Pool && Array.isArray(B.interceptors.Pool)
                            ? B.interceptors.Pool
                            : [];
                    this[m] = t || null;
                    this[l] = d.parseOrigin(e);
                    this[g] = {...d.deepClone(B), connect: A, allowH2: Q};
                    this[g].interceptors = B.interceptors ? {...B.interceptors} : undefined;
                    this[h] = r;
                }
                [o]() {
                    let e = this[i].find((e) => !e[s]);
                    if (e) {
                        return e;
                    }
                    if (!this[m] || this[i].length < this[m]) {
                        e = this[h](this[l], this[g]);
                        this[a](e);
                    }
                    return e;
                }
            }
            e.exports = Pool;
        },
        7858: (e, t, r) => {
            'use strict';
            const {kProxy: A, kClose: i, kDestroy: s, kInterceptors: a} = r(2785);
            const {URL: o} = r(7310);
            const n = r(7890);
            const p = r(4634);
            const d = r(4839);
            const {InvalidArgumentError: l, RequestAbortedError: u} = r(8045);
            const c = r(2067);
            const g = Symbol('proxy agent');
            const m = Symbol('proxy client');
            const h = Symbol('proxy headers');
            const C = Symbol('request tls settings');
            const Q = Symbol('proxy tls settings');
            const B = Symbol('connect endpoint function');
            function defaultProtocolPort(e) {
                return e === 'https:' ? 443 : 80;
            }
            function buildProxyOptions(e) {
                if (typeof e === 'string') {
                    e = {uri: e};
                }
                if (!e || !e.uri) {
                    throw new l('Proxy opts.uri is mandatory');
                }
                return {uri: e.uri, protocol: e.protocol || 'https'};
            }
            function defaultFactory(e, t) {
                return new p(e, t);
            }
            class ProxyAgent extends d {
                constructor(e) {
                    super(e);
                    this[A] = buildProxyOptions(e);
                    this[g] = new n(e);
                    this[a] =
                        e.interceptors && e.interceptors.ProxyAgent && Array.isArray(e.interceptors.ProxyAgent)
                            ? e.interceptors.ProxyAgent
                            : [];
                    if (typeof e === 'string') {
                        e = {uri: e};
                    }
                    if (!e || !e.uri) {
                        throw new l('Proxy opts.uri is mandatory');
                    }
                    const {clientFactory: t = defaultFactory} = e;
                    if (typeof t !== 'function') {
                        throw new l('Proxy opts.clientFactory must be a function.');
                    }
                    this[C] = e.requestTls;
                    this[Q] = e.proxyTls;
                    this[h] = e.headers || {};
                    const r = new o(e.uri);
                    const {origin: i, port: s, host: p, username: d, password: I} = r;
                    if (e.auth && e.token) {
                        throw new l('opts.auth cannot be used in combination with opts.token');
                    } else if (e.auth) {
                        this[h]['proxy-authorization'] = `Basic ${e.auth}`;
                    } else if (e.token) {
                        this[h]['proxy-authorization'] = e.token;
                    } else if (d && I) {
                        this[h]['proxy-authorization'] = `Basic ${Buffer.from(
                            `${decodeURIComponent(d)}:${decodeURIComponent(I)}`,
                        ).toString('base64')}`;
                    }
                    const y = c({...e.proxyTls});
                    this[B] = c({...e.requestTls});
                    this[m] = t(r, {connect: y});
                    this[g] = new n({
                        ...e,
                        connect: async (e, t) => {
                            let r = e.host;
                            if (!e.port) {
                                r += `:${defaultProtocolPort(e.protocol)}`;
                            }
                            try {
                                const {socket: A, statusCode: a} = await this[m].connect({
                                    origin: i,
                                    port: s,
                                    path: r,
                                    signal: e.signal,
                                    headers: {...this[h], host: p},
                                });
                                if (a !== 200) {
                                    A.on('error', () => {}).destroy();
                                    t(new u(`Proxy response (${a}) !== 200 when HTTP Tunneling`));
                                }
                                if (e.protocol !== 'https:') {
                                    t(null, A);
                                    return;
                                }
                                let o;
                                if (this[C]) {
                                    o = this[C].servername;
                                } else {
                                    o = e.servername;
                                }
                                this[B]({...e, servername: o, httpSocket: A}, t);
                            } catch (e) {
                                t(e);
                            }
                        },
                    });
                }
                dispatch(e, t) {
                    const {host: r} = new o(e.origin);
                    const A = buildHeaders(e.headers);
                    throwIfProxyAuthIsSent(A);
                    return this[g].dispatch({...e, headers: {...A, host: r}}, t);
                }
                async [i]() {
                    await this[g].close();
                    await this[m].close();
                }
                async [s]() {
                    await this[g].destroy();
                    await this[m].destroy();
                }
            }
            function buildHeaders(e) {
                if (Array.isArray(e)) {
                    const t = {};
                    for (let r = 0; r < e.length; r += 2) {
                        t[e[r]] = e[r + 1];
                    }
                    return t;
                }
                return e;
            }
            function throwIfProxyAuthIsSent(e) {
                const t = e && Object.keys(e).find((e) => e.toLowerCase() === 'proxy-authorization');
                if (t) {
                    throw new l('Proxy-Authorization should be sent in ProxyAgent constructor');
                }
            }
            e.exports = ProxyAgent;
        },
        9459: (e) => {
            'use strict';
            let t = Date.now();
            let r;
            const A = [];
            function onTimeout() {
                t = Date.now();
                let e = A.length;
                let r = 0;
                while (r < e) {
                    const i = A[r];
                    if (i.state === 0) {
                        i.state = t + i.delay;
                    } else if (i.state > 0 && t >= i.state) {
                        i.state = -1;
                        i.callback(i.opaque);
                    }
                    if (i.state === -1) {
                        i.state = -2;
                        if (r !== e - 1) {
                            A[r] = A.pop();
                        } else {
                            A.pop();
                        }
                        e -= 1;
                    } else {
                        r += 1;
                    }
                }
                if (A.length > 0) {
                    refreshTimeout();
                }
            }
            function refreshTimeout() {
                if (r && r.refresh) {
                    r.refresh();
                } else {
                    clearTimeout(r);
                    r = setTimeout(onTimeout, 1e3);
                    if (r.unref) {
                        r.unref();
                    }
                }
            }
            class Timeout {
                constructor(e, t, r) {
                    this.callback = e;
                    this.delay = t;
                    this.opaque = r;
                    this.state = -2;
                    this.refresh();
                }
                refresh() {
                    if (this.state === -2) {
                        A.push(this);
                        if (!r || A.length === 1) {
                            refreshTimeout();
                        }
                    }
                    this.state = 0;
                }
                clear() {
                    this.state = -1;
                }
            }
            e.exports = {
                setTimeout(e, t, r) {
                    return t < 1e3 ? setTimeout(e, t, r) : new Timeout(e, t, r);
                },
                clearTimeout(e) {
                    if (e instanceof Timeout) {
                        e.clear();
                    } else {
                        clearTimeout(e);
                    }
                },
            };
        },
        5354: (e, t, r) => {
            'use strict';
            const A = r(7643);
            const {uid: i, states: s} = r(9188);
            const {kReadyState: a, kSentClose: o, kByteParser: n, kReceivedClose: p} = r(7578);
            const {fireEvent: d, failWebsocketConnection: l} = r(5515);
            const {CloseEvent: u} = r(2611);
            const {makeRequest: c} = r(8359);
            const {fetching: g} = r(4881);
            const {Headers: m} = r(554);
            const {getGlobalDispatcher: h} = r(1892);
            const {kHeadersList: C} = r(2785);
            const Q = {};
            Q.open = A.channel('undici:websocket:open');
            Q.close = A.channel('undici:websocket:close');
            Q.socketError = A.channel('undici:websocket:socket_error');
            let B;
            try {
                B = r(6113);
            } catch {}
            function establishWebSocketConnection(e, t, r, A, s) {
                const a = e;
                a.protocol = e.protocol === 'ws:' ? 'http:' : 'https:';
                const o = c({
                    urlList: [a],
                    serviceWorkers: 'none',
                    referrer: 'no-referrer',
                    mode: 'websocket',
                    credentials: 'include',
                    cache: 'no-store',
                    redirect: 'error',
                });
                if (s.headers) {
                    const e = new m(s.headers)[C];
                    o.headersList = e;
                }
                const n = B.randomBytes(16).toString('base64');
                o.headersList.append('sec-websocket-key', n);
                o.headersList.append('sec-websocket-version', '13');
                for (const e of t) {
                    o.headersList.append('sec-websocket-protocol', e);
                }
                const p = '';
                const d = g({
                    request: o,
                    useParallelQueue: true,
                    dispatcher: s.dispatcher ?? h(),
                    processResponse(e) {
                        if (e.type === 'error' || e.status !== 101) {
                            l(r, 'Received network error or non-101 status code.');
                            return;
                        }
                        if (t.length !== 0 && !e.headersList.get('Sec-WebSocket-Protocol')) {
                            l(r, 'Server did not respond with sent protocols.');
                            return;
                        }
                        if (e.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
                            l(r, 'Server did not set Upgrade header to "websocket".');
                            return;
                        }
                        if (e.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
                            l(r, 'Server did not set Connection header to "upgrade".');
                            return;
                        }
                        const s = e.headersList.get('Sec-WebSocket-Accept');
                        const a = B.createHash('sha1')
                            .update(n + i)
                            .digest('base64');
                        if (s !== a) {
                            l(r, 'Incorrect hash received in Sec-WebSocket-Accept header.');
                            return;
                        }
                        const d = e.headersList.get('Sec-WebSocket-Extensions');
                        if (d !== null && d !== p) {
                            l(r, 'Received different permessage-deflate than the one set.');
                            return;
                        }
                        const u = e.headersList.get('Sec-WebSocket-Protocol');
                        if (u !== null && u !== o.headersList.get('Sec-WebSocket-Protocol')) {
                            l(r, 'Protocol was not set in the opening handshake.');
                            return;
                        }
                        e.socket.on('data', onSocketData);
                        e.socket.on('close', onSocketClose);
                        e.socket.on('error', onSocketError);
                        if (Q.open.hasSubscribers) {
                            Q.open.publish({address: e.socket.address(), protocol: u, extensions: d});
                        }
                        A(e);
                    },
                });
                return d;
            }
            function onSocketData(e) {
                if (!this.ws[n].write(e)) {
                    this.pause();
                }
            }
            function onSocketClose() {
                const {ws: e} = this;
                const t = e[o] && e[p];
                let r = 1005;
                let A = '';
                const i = e[n].closingInfo;
                if (i) {
                    r = i.code ?? 1005;
                    A = i.reason;
                } else if (!e[o]) {
                    r = 1006;
                }
                e[a] = s.CLOSED;
                d('close', e, u, {wasClean: t, code: r, reason: A});
                if (Q.close.hasSubscribers) {
                    Q.close.publish({websocket: e, code: r, reason: A});
                }
            }
            function onSocketError(e) {
                const {ws: t} = this;
                t[a] = s.CLOSING;
                if (Q.socketError.hasSubscribers) {
                    Q.socketError.publish(e);
                }
                this.destroy();
            }
            e.exports = {establishWebSocketConnection: establishWebSocketConnection};
        },
        9188: (e) => {
            'use strict';
            const t = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
            const r = {enumerable: true, writable: false, configurable: false};
            const A = {CONNECTING: 0, OPEN: 1, CLOSING: 2, CLOSED: 3};
            const i = {CONTINUATION: 0, TEXT: 1, BINARY: 2, CLOSE: 8, PING: 9, PONG: 10};
            const s = 2 ** 16 - 1;
            const a = {INFO: 0, PAYLOADLENGTH_16: 2, PAYLOADLENGTH_64: 3, READ_DATA: 4};
            const o = Buffer.allocUnsafe(0);
            e.exports = {
                uid: t,
                staticPropertyDescriptors: r,
                states: A,
                opcodes: i,
                maxUnsigned16Bit: s,
                parserStates: a,
                emptyBuffer: o,
            };
        },
        2611: (e, t, r) => {
            'use strict';
            const {webidl: A} = r(1744);
            const {kEnumerableProperty: i} = r(3983);
            const {MessagePort: s} = r(1267);
            class MessageEvent extends Event {
                #s;
                constructor(e, t = {}) {
                    A.argumentLengthCheck(arguments, 1, {header: 'MessageEvent constructor'});
                    e = A.converters.DOMString(e);
                    t = A.converters.MessageEventInit(t);
                    super(e, t);
                    this.#s = t;
                }
                get data() {
                    A.brandCheck(this, MessageEvent);
                    return this.#s.data;
                }
                get origin() {
                    A.brandCheck(this, MessageEvent);
                    return this.#s.origin;
                }
                get lastEventId() {
                    A.brandCheck(this, MessageEvent);
                    return this.#s.lastEventId;
                }
                get source() {
                    A.brandCheck(this, MessageEvent);
                    return this.#s.source;
                }
                get ports() {
                    A.brandCheck(this, MessageEvent);
                    if (!Object.isFrozen(this.#s.ports)) {
                        Object.freeze(this.#s.ports);
                    }
                    return this.#s.ports;
                }
                initMessageEvent(e, t = false, r = false, i = null, s = '', a = '', o = null, n = []) {
                    A.brandCheck(this, MessageEvent);
                    A.argumentLengthCheck(arguments, 1, {header: 'MessageEvent.initMessageEvent'});
                    return new MessageEvent(e, {
                        bubbles: t,
                        cancelable: r,
                        data: i,
                        origin: s,
                        lastEventId: a,
                        source: o,
                        ports: n,
                    });
                }
            }
            class CloseEvent extends Event {
                #s;
                constructor(e, t = {}) {
                    A.argumentLengthCheck(arguments, 1, {header: 'CloseEvent constructor'});
                    e = A.converters.DOMString(e);
                    t = A.converters.CloseEventInit(t);
                    super(e, t);
                    this.#s = t;
                }
                get wasClean() {
                    A.brandCheck(this, CloseEvent);
                    return this.#s.wasClean;
                }
                get code() {
                    A.brandCheck(this, CloseEvent);
                    return this.#s.code;
                }
                get reason() {
                    A.brandCheck(this, CloseEvent);
                    return this.#s.reason;
                }
            }
            class ErrorEvent extends Event {
                #s;
                constructor(e, t) {
                    A.argumentLengthCheck(arguments, 1, {header: 'ErrorEvent constructor'});
                    super(e, t);
                    e = A.converters.DOMString(e);
                    t = A.converters.ErrorEventInit(t ?? {});
                    this.#s = t;
                }
                get message() {
                    A.brandCheck(this, ErrorEvent);
                    return this.#s.message;
                }
                get filename() {
                    A.brandCheck(this, ErrorEvent);
                    return this.#s.filename;
                }
                get lineno() {
                    A.brandCheck(this, ErrorEvent);
                    return this.#s.lineno;
                }
                get colno() {
                    A.brandCheck(this, ErrorEvent);
                    return this.#s.colno;
                }
                get error() {
                    A.brandCheck(this, ErrorEvent);
                    return this.#s.error;
                }
            }
            Object.defineProperties(MessageEvent.prototype, {
                [Symbol.toStringTag]: {value: 'MessageEvent', configurable: true},
                data: i,
                origin: i,
                lastEventId: i,
                source: i,
                ports: i,
                initMessageEvent: i,
            });
            Object.defineProperties(CloseEvent.prototype, {
                [Symbol.toStringTag]: {value: 'CloseEvent', configurable: true},
                reason: i,
                code: i,
                wasClean: i,
            });
            Object.defineProperties(ErrorEvent.prototype, {
                [Symbol.toStringTag]: {value: 'ErrorEvent', configurable: true},
                message: i,
                filename: i,
                lineno: i,
                colno: i,
                error: i,
            });
            A.converters.MessagePort = A.interfaceConverter(s);
            A.converters['sequence<MessagePort>'] = A.sequenceConverter(A.converters.MessagePort);
            const a = [
                {key: 'bubbles', converter: A.converters.boolean, defaultValue: false},
                {key: 'cancelable', converter: A.converters.boolean, defaultValue: false},
                {key: 'composed', converter: A.converters.boolean, defaultValue: false},
            ];
            A.converters.MessageEventInit = A.dictionaryConverter([
                ...a,
                {key: 'data', converter: A.converters.any, defaultValue: null},
                {key: 'origin', converter: A.converters.USVString, defaultValue: ''},
                {key: 'lastEventId', converter: A.converters.DOMString, defaultValue: ''},
                {key: 'source', converter: A.nullableConverter(A.converters.MessagePort), defaultValue: null},
                {
                    key: 'ports',
                    converter: A.converters['sequence<MessagePort>'],
                    get defaultValue() {
                        return [];
                    },
                },
            ]);
            A.converters.CloseEventInit = A.dictionaryConverter([
                ...a,
                {key: 'wasClean', converter: A.converters.boolean, defaultValue: false},
                {key: 'code', converter: A.converters['unsigned short'], defaultValue: 0},
                {key: 'reason', converter: A.converters.USVString, defaultValue: ''},
            ]);
            A.converters.ErrorEventInit = A.dictionaryConverter([
                ...a,
                {key: 'message', converter: A.converters.DOMString, defaultValue: ''},
                {key: 'filename', converter: A.converters.USVString, defaultValue: ''},
                {key: 'lineno', converter: A.converters['unsigned long'], defaultValue: 0},
                {key: 'colno', converter: A.converters['unsigned long'], defaultValue: 0},
                {key: 'error', converter: A.converters.any},
            ]);
            e.exports = {MessageEvent: MessageEvent, CloseEvent: CloseEvent, ErrorEvent: ErrorEvent};
        },
        5444: (e, t, r) => {
            'use strict';
            const {maxUnsigned16Bit: A} = r(9188);
            let i;
            try {
                i = r(6113);
            } catch {}
            class WebsocketFrameSend {
                constructor(e) {
                    this.frameData = e;
                    this.maskKey = i.randomBytes(4);
                }
                createFrame(e) {
                    const t = this.frameData?.byteLength ?? 0;
                    let r = t;
                    let i = 6;
                    if (t > A) {
                        i += 8;
                        r = 127;
                    } else if (t > 125) {
                        i += 2;
                        r = 126;
                    }
                    const s = Buffer.allocUnsafe(t + i);
                    s[0] = s[1] = 0;
                    s[0] |= 128;
                    s[0] = (s[0] & 240) + e;
                    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */ s[i - 4] = this.maskKey[0];
                    s[i - 3] = this.maskKey[1];
                    s[i - 2] = this.maskKey[2];
                    s[i - 1] = this.maskKey[3];
                    s[1] = r;
                    if (r === 126) {
                        s.writeUInt16BE(t, 2);
                    } else if (r === 127) {
                        s[2] = s[3] = 0;
                        s.writeUIntBE(t, 4, 6);
                    }
                    s[1] |= 128;
                    for (let e = 0; e < t; e++) {
                        s[i + e] = this.frameData[e] ^ this.maskKey[e % 4];
                    }
                    return s;
                }
            }
            e.exports = {WebsocketFrameSend: WebsocketFrameSend};
        },
        1688: (e, t, r) => {
            'use strict';
            const {Writable: A} = r(2781);
            const i = r(7643);
            const {parserStates: s, opcodes: a, states: o, emptyBuffer: n} = r(9188);
            const {kReadyState: p, kSentClose: d, kResponse: l, kReceivedClose: u} = r(7578);
            const {isValidStatusCode: c, failWebsocketConnection: g, websocketMessageReceived: m} = r(5515);
            const {WebsocketFrameSend: h} = r(5444);
            const C = {};
            C.ping = i.channel('undici:websocket:ping');
            C.pong = i.channel('undici:websocket:pong');
            class ByteParser extends A {
                #a = [];
                #o = 0;
                #n = s.INFO;
                #p = {};
                #d = [];
                constructor(e) {
                    super();
                    this.ws = e;
                }
                _write(e, t, r) {
                    this.#a.push(e);
                    this.#o += e.length;
                    this.run(r);
                }
                run(e) {
                    while (true) {
                        if (this.#n === s.INFO) {
                            if (this.#o < 2) {
                                return e();
                            }
                            const t = this.consume(2);
                            this.#p.fin = (t[0] & 128) !== 0;
                            this.#p.opcode = t[0] & 15;
                            this.#p.originalOpcode ??= this.#p.opcode;
                            this.#p.fragmented = !this.#p.fin && this.#p.opcode !== a.CONTINUATION;
                            if (this.#p.fragmented && this.#p.opcode !== a.BINARY && this.#p.opcode !== a.TEXT) {
                                g(this.ws, 'Invalid frame type was fragmented.');
                                return;
                            }
                            const r = t[1] & 127;
                            if (r <= 125) {
                                this.#p.payloadLength = r;
                                this.#n = s.READ_DATA;
                            } else if (r === 126) {
                                this.#n = s.PAYLOADLENGTH_16;
                            } else if (r === 127) {
                                this.#n = s.PAYLOADLENGTH_64;
                            }
                            if (this.#p.fragmented && r > 125) {
                                g(this.ws, 'Fragmented frame exceeded 125 bytes.');
                                return;
                            } else if (
                                (this.#p.opcode === a.PING ||
                                    this.#p.opcode === a.PONG ||
                                    this.#p.opcode === a.CLOSE) &&
                                r > 125
                            ) {
                                g(this.ws, 'Payload length for control frame exceeded 125 bytes.');
                                return;
                            } else if (this.#p.opcode === a.CLOSE) {
                                if (r === 1) {
                                    g(this.ws, 'Received close frame with a 1-byte body.');
                                    return;
                                }
                                const e = this.consume(r);
                                this.#p.closeInfo = this.parseCloseBody(false, e);
                                if (!this.ws[d]) {
                                    const e = Buffer.allocUnsafe(2);
                                    e.writeUInt16BE(this.#p.closeInfo.code, 0);
                                    const t = new h(e);
                                    this.ws[l].socket.write(t.createFrame(a.CLOSE), (e) => {
                                        if (!e) {
                                            this.ws[d] = true;
                                        }
                                    });
                                }
                                this.ws[p] = o.CLOSING;
                                this.ws[u] = true;
                                this.end();
                                return;
                            } else if (this.#p.opcode === a.PING) {
                                const t = this.consume(r);
                                if (!this.ws[u]) {
                                    const e = new h(t);
                                    this.ws[l].socket.write(e.createFrame(a.PONG));
                                    if (C.ping.hasSubscribers) {
                                        C.ping.publish({payload: t});
                                    }
                                }
                                this.#n = s.INFO;
                                if (this.#o > 0) {
                                    continue;
                                } else {
                                    e();
                                    return;
                                }
                            } else if (this.#p.opcode === a.PONG) {
                                const t = this.consume(r);
                                if (C.pong.hasSubscribers) {
                                    C.pong.publish({payload: t});
                                }
                                if (this.#o > 0) {
                                    continue;
                                } else {
                                    e();
                                    return;
                                }
                            }
                        } else if (this.#n === s.PAYLOADLENGTH_16) {
                            if (this.#o < 2) {
                                return e();
                            }
                            const t = this.consume(2);
                            this.#p.payloadLength = t.readUInt16BE(0);
                            this.#n = s.READ_DATA;
                        } else if (this.#n === s.PAYLOADLENGTH_64) {
                            if (this.#o < 8) {
                                return e();
                            }
                            const t = this.consume(8);
                            const r = t.readUInt32BE(0);
                            if (r > 2 ** 31 - 1) {
                                g(this.ws, 'Received payload length > 2^31 bytes.');
                                return;
                            }
                            const A = t.readUInt32BE(4);
                            this.#p.payloadLength = (r << 8) + A;
                            this.#n = s.READ_DATA;
                        } else if (this.#n === s.READ_DATA) {
                            if (this.#o < this.#p.payloadLength) {
                                return e();
                            } else if (this.#o >= this.#p.payloadLength) {
                                const e = this.consume(this.#p.payloadLength);
                                this.#d.push(e);
                                if (!this.#p.fragmented || (this.#p.fin && this.#p.opcode === a.CONTINUATION)) {
                                    const e = Buffer.concat(this.#d);
                                    m(this.ws, this.#p.originalOpcode, e);
                                    this.#p = {};
                                    this.#d.length = 0;
                                }
                                this.#n = s.INFO;
                            }
                        }
                        if (this.#o > 0) {
                            continue;
                        } else {
                            e();
                            break;
                        }
                    }
                }
                consume(e) {
                    if (e > this.#o) {
                        return null;
                    } else if (e === 0) {
                        return n;
                    }
                    if (this.#a[0].length === e) {
                        this.#o -= this.#a[0].length;
                        return this.#a.shift();
                    }
                    const t = Buffer.allocUnsafe(e);
                    let r = 0;
                    while (r !== e) {
                        const A = this.#a[0];
                        const {length: i} = A;
                        if (i + r === e) {
                            t.set(this.#a.shift(), r);
                            break;
                        } else if (i + r > e) {
                            t.set(A.subarray(0, e - r), r);
                            this.#a[0] = A.subarray(e - r);
                            break;
                        } else {
                            t.set(this.#a.shift(), r);
                            r += A.length;
                        }
                    }
                    this.#o -= e;
                    return t;
                }
                parseCloseBody(e, t) {
                    let r;
                    if (t.length >= 2) {
                        r = t.readUInt16BE(0);
                    }
                    if (e) {
                        if (!c(r)) {
                            return null;
                        }
                        return {code: r};
                    }
                    let A = t.subarray(2);
                    if (A[0] === 239 && A[1] === 187 && A[2] === 191) {
                        A = A.subarray(3);
                    }
                    if (r !== undefined && !c(r)) {
                        return null;
                    }
                    try {
                        A = new TextDecoder('utf-8', {fatal: true}).decode(A);
                    } catch {
                        return null;
                    }
                    return {code: r, reason: A};
                }
                get closingInfo() {
                    return this.#p.closeInfo;
                }
            }
            e.exports = {ByteParser: ByteParser};
        },
        7578: (e) => {
            'use strict';
            e.exports = {
                kWebSocketURL: Symbol('url'),
                kReadyState: Symbol('ready state'),
                kController: Symbol('controller'),
                kResponse: Symbol('response'),
                kBinaryType: Symbol('binary type'),
                kSentClose: Symbol('sent close'),
                kReceivedClose: Symbol('received close'),
                kByteParser: Symbol('byte parser'),
            };
        },
        5515: (e, t, r) => {
            'use strict';
            const {kReadyState: A, kController: i, kResponse: s, kBinaryType: a, kWebSocketURL: o} = r(7578);
            const {states: n, opcodes: p} = r(9188);
            const {MessageEvent: d, ErrorEvent: l} = r(2611);
            function isEstablished(e) {
                return e[A] === n.OPEN;
            }
            function isClosing(e) {
                return e[A] === n.CLOSING;
            }
            function isClosed(e) {
                return e[A] === n.CLOSED;
            }
            function fireEvent(e, t, r = Event, A) {
                const i = new r(e, A);
                t.dispatchEvent(i);
            }
            function websocketMessageReceived(e, t, r) {
                if (e[A] !== n.OPEN) {
                    return;
                }
                let i;
                if (t === p.TEXT) {
                    try {
                        i = new TextDecoder('utf-8', {fatal: true}).decode(r);
                    } catch {
                        failWebsocketConnection(e, 'Received invalid UTF-8 in text frame.');
                        return;
                    }
                } else if (t === p.BINARY) {
                    if (e[a] === 'blob') {
                        i = new Blob([r]);
                    } else {
                        i = new Uint8Array(r).buffer;
                    }
                }
                fireEvent('message', e, d, {origin: e[o].origin, data: i});
            }
            function isValidSubprotocol(e) {
                if (e.length === 0) {
                    return false;
                }
                for (const t of e) {
                    const e = t.charCodeAt(0);
                    if (
                        e < 33 ||
                        e > 126 ||
                        t === '(' ||
                        t === ')' ||
                        t === '<' ||
                        t === '>' ||
                        t === '@' ||
                        t === ',' ||
                        t === ';' ||
                        t === ':' ||
                        t === '\\' ||
                        t === '"' ||
                        t === '/' ||
                        t === '[' ||
                        t === ']' ||
                        t === '?' ||
                        t === '=' ||
                        t === '{' ||
                        t === '}' ||
                        e === 32 ||
                        e === 9
                    ) {
                        return false;
                    }
                }
                return true;
            }
            function isValidStatusCode(e) {
                if (e >= 1e3 && e < 1015) {
                    return e !== 1004 && e !== 1005 && e !== 1006;
                }
                return e >= 3e3 && e <= 4999;
            }
            function failWebsocketConnection(e, t) {
                const {[i]: r, [s]: A} = e;
                r.abort();
                if (A?.socket && !A.socket.destroyed) {
                    A.socket.destroy();
                }
                if (t) {
                    fireEvent('error', e, l, {error: new Error(t)});
                }
            }
            e.exports = {
                isEstablished: isEstablished,
                isClosing: isClosing,
                isClosed: isClosed,
                fireEvent: fireEvent,
                isValidSubprotocol: isValidSubprotocol,
                isValidStatusCode: isValidStatusCode,
                failWebsocketConnection: failWebsocketConnection,
                websocketMessageReceived: websocketMessageReceived,
            };
        },
        4284: (e, t, r) => {
            'use strict';
            const {webidl: A} = r(1744);
            const {DOMException: i} = r(1037);
            const {URLSerializer: s} = r(685);
            const {getGlobalOrigin: a} = r(1246);
            const {staticPropertyDescriptors: o, states: n, opcodes: p, emptyBuffer: d} = r(9188);
            const {
                kWebSocketURL: l,
                kReadyState: u,
                kController: c,
                kBinaryType: g,
                kResponse: m,
                kSentClose: h,
                kByteParser: C,
            } = r(7578);
            const {isEstablished: Q, isClosing: B, isValidSubprotocol: I, failWebsocketConnection: y, fireEvent: w} = r(
                5515,
            );
            const {establishWebSocketConnection: b} = r(5354);
            const {WebsocketFrameSend: v} = r(5444);
            const {ByteParser: D} = r(1688);
            const {kEnumerableProperty: R, isBlobLike: k} = r(3983);
            const {getGlobalDispatcher: S} = r(1892);
            const {types: N} = r(3837);
            let _ = false;
            class WebSocket extends EventTarget {
                #l = {open: null, error: null, close: null, message: null};
                #u = 0;
                #c = '';
                #g = '';
                constructor(e, t = []) {
                    super();
                    A.argumentLengthCheck(arguments, 1, {header: 'WebSocket constructor'});
                    if (!_) {
                        _ = true;
                        process.emitWarning('WebSockets are experimental, expect them to change at any time.', {
                            code: 'UNDICI-WS',
                        });
                    }
                    const r = A.converters['DOMString or sequence<DOMString> or WebSocketInit'](t);
                    e = A.converters.USVString(e);
                    t = r.protocols;
                    const s = a();
                    let o;
                    try {
                        o = new URL(e, s);
                    } catch (e) {
                        throw new i(e, 'SyntaxError');
                    }
                    if (o.protocol === 'http:') {
                        o.protocol = 'ws:';
                    } else if (o.protocol === 'https:') {
                        o.protocol = 'wss:';
                    }
                    if (o.protocol !== 'ws:' && o.protocol !== 'wss:') {
                        throw new i(`Expected a ws: or wss: protocol, got ${o.protocol}`, 'SyntaxError');
                    }
                    if (o.hash || o.href.endsWith('#')) {
                        throw new i('Got fragment', 'SyntaxError');
                    }
                    if (typeof t === 'string') {
                        t = [t];
                    }
                    if (t.length !== new Set(t.map((e) => e.toLowerCase())).size) {
                        throw new i('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');
                    }
                    if (t.length > 0 && !t.every((e) => I(e))) {
                        throw new i('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');
                    }
                    this[l] = new URL(o.href);
                    this[c] = b(o, t, this, (e) => this.#m(e), r);
                    this[u] = WebSocket.CONNECTING;
                    this[g] = 'blob';
                }
                close(e = undefined, t = undefined) {
                    A.brandCheck(this, WebSocket);
                    if (e !== undefined) {
                        e = A.converters['unsigned short'](e, {clamp: true});
                    }
                    if (t !== undefined) {
                        t = A.converters.USVString(t);
                    }
                    if (e !== undefined) {
                        if (e !== 1e3 && (e < 3e3 || e > 4999)) {
                            throw new i('invalid code', 'InvalidAccessError');
                        }
                    }
                    let r = 0;
                    if (t !== undefined) {
                        r = Buffer.byteLength(t);
                        if (r > 123) {
                            throw new i(`Reason must be less than 123 bytes; received ${r}`, 'SyntaxError');
                        }
                    }
                    if (this[u] === WebSocket.CLOSING || this[u] === WebSocket.CLOSED) {
                    } else if (!Q(this)) {
                        y(this, 'Connection was closed before it was established.');
                        this[u] = WebSocket.CLOSING;
                    } else if (!B(this)) {
                        const A = new v();
                        if (e !== undefined && t === undefined) {
                            A.frameData = Buffer.allocUnsafe(2);
                            A.frameData.writeUInt16BE(e, 0);
                        } else if (e !== undefined && t !== undefined) {
                            A.frameData = Buffer.allocUnsafe(2 + r);
                            A.frameData.writeUInt16BE(e, 0);
                            A.frameData.write(t, 2, 'utf-8');
                        } else {
                            A.frameData = d;
                        }
                        const i = this[m].socket;
                        i.write(A.createFrame(p.CLOSE), (e) => {
                            if (!e) {
                                this[h] = true;
                            }
                        });
                        this[u] = n.CLOSING;
                    } else {
                        this[u] = WebSocket.CLOSING;
                    }
                }
                send(e) {
                    A.brandCheck(this, WebSocket);
                    A.argumentLengthCheck(arguments, 1, {header: 'WebSocket.send'});
                    e = A.converters.WebSocketSendData(e);
                    if (this[u] === WebSocket.CONNECTING) {
                        throw new i('Sent before connected.', 'InvalidStateError');
                    }
                    if (!Q(this) || B(this)) {
                        return;
                    }
                    const t = this[m].socket;
                    if (typeof e === 'string') {
                        const r = Buffer.from(e);
                        const A = new v(r);
                        const i = A.createFrame(p.TEXT);
                        this.#u += r.byteLength;
                        t.write(i, () => {
                            this.#u -= r.byteLength;
                        });
                    } else if (N.isArrayBuffer(e)) {
                        const r = Buffer.from(e);
                        const A = new v(r);
                        const i = A.createFrame(p.BINARY);
                        this.#u += r.byteLength;
                        t.write(i, () => {
                            this.#u -= r.byteLength;
                        });
                    } else if (ArrayBuffer.isView(e)) {
                        const r = Buffer.from(e, e.byteOffset, e.byteLength);
                        const A = new v(r);
                        const i = A.createFrame(p.BINARY);
                        this.#u += r.byteLength;
                        t.write(i, () => {
                            this.#u -= r.byteLength;
                        });
                    } else if (k(e)) {
                        const r = new v();
                        e.arrayBuffer().then((e) => {
                            const A = Buffer.from(e);
                            r.frameData = A;
                            const i = r.createFrame(p.BINARY);
                            this.#u += A.byteLength;
                            t.write(i, () => {
                                this.#u -= A.byteLength;
                            });
                        });
                    }
                }
                get readyState() {
                    A.brandCheck(this, WebSocket);
                    return this[u];
                }
                get bufferedAmount() {
                    A.brandCheck(this, WebSocket);
                    return this.#u;
                }
                get url() {
                    A.brandCheck(this, WebSocket);
                    return s(this[l]);
                }
                get extensions() {
                    A.brandCheck(this, WebSocket);
                    return this.#g;
                }
                get protocol() {
                    A.brandCheck(this, WebSocket);
                    return this.#c;
                }
                get onopen() {
                    A.brandCheck(this, WebSocket);
                    return this.#l.open;
                }
                set onopen(e) {
                    A.brandCheck(this, WebSocket);
                    if (this.#l.open) {
                        this.removeEventListener('open', this.#l.open);
                    }
                    if (typeof e === 'function') {
                        this.#l.open = e;
                        this.addEventListener('open', e);
                    } else {
                        this.#l.open = null;
                    }
                }
                get onerror() {
                    A.brandCheck(this, WebSocket);
                    return this.#l.error;
                }
                set onerror(e) {
                    A.brandCheck(this, WebSocket);
                    if (this.#l.error) {
                        this.removeEventListener('error', this.#l.error);
                    }
                    if (typeof e === 'function') {
                        this.#l.error = e;
                        this.addEventListener('error', e);
                    } else {
                        this.#l.error = null;
                    }
                }
                get onclose() {
                    A.brandCheck(this, WebSocket);
                    return this.#l.close;
                }
                set onclose(e) {
                    A.brandCheck(this, WebSocket);
                    if (this.#l.close) {
                        this.removeEventListener('close', this.#l.close);
                    }
                    if (typeof e === 'function') {
                        this.#l.close = e;
                        this.addEventListener('close', e);
                    } else {
                        this.#l.close = null;
                    }
                }
                get onmessage() {
                    A.brandCheck(this, WebSocket);
                    return this.#l.message;
                }
                set onmessage(e) {
                    A.brandCheck(this, WebSocket);
                    if (this.#l.message) {
                        this.removeEventListener('message', this.#l.message);
                    }
                    if (typeof e === 'function') {
                        this.#l.message = e;
                        this.addEventListener('message', e);
                    } else {
                        this.#l.message = null;
                    }
                }
                get binaryType() {
                    A.brandCheck(this, WebSocket);
                    return this[g];
                }
                set binaryType(e) {
                    A.brandCheck(this, WebSocket);
                    if (e !== 'blob' && e !== 'arraybuffer') {
                        this[g] = 'blob';
                    } else {
                        this[g] = e;
                    }
                }
                #m(e) {
                    this[m] = e;
                    const t = new D(this);
                    t.on('drain', function onParserDrain() {
                        this.ws[m].socket.resume();
                    });
                    e.socket.ws = this;
                    this[C] = t;
                    this[u] = n.OPEN;
                    const r = e.headersList.get('sec-websocket-extensions');
                    if (r !== null) {
                        this.#g = r;
                    }
                    const A = e.headersList.get('sec-websocket-protocol');
                    if (A !== null) {
                        this.#c = A;
                    }
                    w('open', this);
                }
            }
            WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = n.CONNECTING;
            WebSocket.OPEN = WebSocket.prototype.OPEN = n.OPEN;
            WebSocket.CLOSING = WebSocket.prototype.CLOSING = n.CLOSING;
            WebSocket.CLOSED = WebSocket.prototype.CLOSED = n.CLOSED;
            Object.defineProperties(WebSocket.prototype, {
                CONNECTING: o,
                OPEN: o,
                CLOSING: o,
                CLOSED: o,
                url: R,
                readyState: R,
                bufferedAmount: R,
                onopen: R,
                onerror: R,
                onclose: R,
                close: R,
                onmessage: R,
                binaryType: R,
                send: R,
                extensions: R,
                protocol: R,
                [Symbol.toStringTag]: {value: 'WebSocket', writable: false, enumerable: false, configurable: true},
            });
            Object.defineProperties(WebSocket, {CONNECTING: o, OPEN: o, CLOSING: o, CLOSED: o});
            A.converters['sequence<DOMString>'] = A.sequenceConverter(A.converters.DOMString);
            A.converters['DOMString or sequence<DOMString>'] = function (e) {
                if (A.util.Type(e) === 'Object' && Symbol.iterator in e) {
                    return A.converters['sequence<DOMString>'](e);
                }
                return A.converters.DOMString(e);
            };
            A.converters.WebSocketInit = A.dictionaryConverter([
                {
                    key: 'protocols',
                    converter: A.converters['DOMString or sequence<DOMString>'],
                    get defaultValue() {
                        return [];
                    },
                },
                {
                    key: 'dispatcher',
                    converter: (e) => e,
                    get defaultValue() {
                        return S();
                    },
                },
                {key: 'headers', converter: A.nullableConverter(A.converters.HeadersInit)},
            ]);
            A.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (e) {
                if (A.util.Type(e) === 'Object' && !(Symbol.iterator in e)) {
                    return A.converters.WebSocketInit(e);
                }
                return {protocols: A.converters['DOMString or sequence<DOMString>'](e)};
            };
            A.converters.WebSocketSendData = function (e) {
                if (A.util.Type(e) === 'Object') {
                    if (k(e)) {
                        return A.converters.Blob(e, {strict: false});
                    }
                    if (ArrayBuffer.isView(e) || N.isAnyArrayBuffer(e)) {
                        return A.converters.BufferSource(e);
                    }
                }
                return A.converters.USVString(e);
            };
            e.exports = {WebSocket: WebSocket};
        },
        5030: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            function _interopDefault(e) {
                return e && typeof e === 'object' && 'default' in e ? e['default'] : e;
            }
            var A = _interopDefault(r(4824));
            function getUserAgent() {
                try {
                    return `Node.js/${process.version.substr(1)} (${A()}; ${process.arch})`;
                } catch (e) {
                    if (/wmic os get Caption/.test(e.message)) {
                        return 'Windows <version undetectable>';
                    }
                    return '<environment undetectable>';
                }
            }
            t.getUserAgent = getUserAgent;
        },
        5840: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            Object.defineProperty(t, 'v1', {
                enumerable: true,
                get: function () {
                    return A.default;
                },
            });
            Object.defineProperty(t, 'v3', {
                enumerable: true,
                get: function () {
                    return i.default;
                },
            });
            Object.defineProperty(t, 'v4', {
                enumerable: true,
                get: function () {
                    return s.default;
                },
            });
            Object.defineProperty(t, 'v5', {
                enumerable: true,
                get: function () {
                    return a.default;
                },
            });
            Object.defineProperty(t, 'NIL', {
                enumerable: true,
                get: function () {
                    return o.default;
                },
            });
            Object.defineProperty(t, 'version', {
                enumerable: true,
                get: function () {
                    return n.default;
                },
            });
            Object.defineProperty(t, 'validate', {
                enumerable: true,
                get: function () {
                    return p.default;
                },
            });
            Object.defineProperty(t, 'stringify', {
                enumerable: true,
                get: function () {
                    return d.default;
                },
            });
            Object.defineProperty(t, 'parse', {
                enumerable: true,
                get: function () {
                    return l.default;
                },
            });
            var A = _interopRequireDefault(r(8628));
            var i = _interopRequireDefault(r(6409));
            var s = _interopRequireDefault(r(5122));
            var a = _interopRequireDefault(r(9120));
            var o = _interopRequireDefault(r(5332));
            var n = _interopRequireDefault(r(1595));
            var p = _interopRequireDefault(r(6900));
            var d = _interopRequireDefault(r(8950));
            var l = _interopRequireDefault(r(2746));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
        },
        4569: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(6113));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function md5(e) {
                if (Array.isArray(e)) {
                    e = Buffer.from(e);
                } else if (typeof e === 'string') {
                    e = Buffer.from(e, 'utf8');
                }
                return A.default.createHash('md5').update(e).digest();
            }
            var i = md5;
            t['default'] = i;
        },
        5332: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var r = '00000000-0000-0000-0000-000000000000';
            t['default'] = r;
        },
        2746: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(6900));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function parse(e) {
                if (!(0, A.default)(e)) {
                    throw TypeError('Invalid UUID');
                }
                let t;
                const r = new Uint8Array(16);
                r[0] = (t = parseInt(e.slice(0, 8), 16)) >>> 24;
                r[1] = (t >>> 16) & 255;
                r[2] = (t >>> 8) & 255;
                r[3] = t & 255;
                r[4] = (t = parseInt(e.slice(9, 13), 16)) >>> 8;
                r[5] = t & 255;
                r[6] = (t = parseInt(e.slice(14, 18), 16)) >>> 8;
                r[7] = t & 255;
                r[8] = (t = parseInt(e.slice(19, 23), 16)) >>> 8;
                r[9] = t & 255;
                r[10] = ((t = parseInt(e.slice(24, 36), 16)) / 1099511627776) & 255;
                r[11] = (t / 4294967296) & 255;
                r[12] = (t >>> 24) & 255;
                r[13] = (t >>> 16) & 255;
                r[14] = (t >>> 8) & 255;
                r[15] = t & 255;
                return r;
            }
            var i = parse;
            t['default'] = i;
        },
        814: (e, t) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var r = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
            t['default'] = r;
        },
        807: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = rng;
            var A = _interopRequireDefault(r(6113));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            const i = new Uint8Array(256);
            let s = i.length;
            function rng() {
                if (s > i.length - 16) {
                    A.default.randomFillSync(i);
                    s = 0;
                }
                return i.slice(s, (s += 16));
            }
        },
        5274: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(6113));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function sha1(e) {
                if (Array.isArray(e)) {
                    e = Buffer.from(e);
                } else if (typeof e === 'string') {
                    e = Buffer.from(e, 'utf8');
                }
                return A.default.createHash('sha1').update(e).digest();
            }
            var i = sha1;
            t['default'] = i;
        },
        8950: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(6900));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            const i = [];
            for (let e = 0; e < 256; ++e) {
                i.push((e + 256).toString(16).substr(1));
            }
            function stringify(e, t = 0) {
                const r = (
                    i[e[t + 0]] +
                    i[e[t + 1]] +
                    i[e[t + 2]] +
                    i[e[t + 3]] +
                    '-' +
                    i[e[t + 4]] +
                    i[e[t + 5]] +
                    '-' +
                    i[e[t + 6]] +
                    i[e[t + 7]] +
                    '-' +
                    i[e[t + 8]] +
                    i[e[t + 9]] +
                    '-' +
                    i[e[t + 10]] +
                    i[e[t + 11]] +
                    i[e[t + 12]] +
                    i[e[t + 13]] +
                    i[e[t + 14]] +
                    i[e[t + 15]]
                ).toLowerCase();
                if (!(0, A.default)(r)) {
                    throw TypeError('Stringified UUID is invalid');
                }
                return r;
            }
            var s = stringify;
            t['default'] = s;
        },
        8628: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(807));
            var i = _interopRequireDefault(r(8950));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            let s;
            let a;
            let o = 0;
            let n = 0;
            function v1(e, t, r) {
                let p = (t && r) || 0;
                const d = t || new Array(16);
                e = e || {};
                let l = e.node || s;
                let u = e.clockseq !== undefined ? e.clockseq : a;
                if (l == null || u == null) {
                    const t = e.random || (e.rng || A.default)();
                    if (l == null) {
                        l = s = [t[0] | 1, t[1], t[2], t[3], t[4], t[5]];
                    }
                    if (u == null) {
                        u = a = ((t[6] << 8) | t[7]) & 16383;
                    }
                }
                let c = e.msecs !== undefined ? e.msecs : Date.now();
                let g = e.nsecs !== undefined ? e.nsecs : n + 1;
                const m = c - o + (g - n) / 1e4;
                if (m < 0 && e.clockseq === undefined) {
                    u = (u + 1) & 16383;
                }
                if ((m < 0 || c > o) && e.nsecs === undefined) {
                    g = 0;
                }
                if (g >= 1e4) {
                    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                }
                o = c;
                n = g;
                a = u;
                c += 122192928e5;
                const h = ((c & 268435455) * 1e4 + g) % 4294967296;
                d[p++] = (h >>> 24) & 255;
                d[p++] = (h >>> 16) & 255;
                d[p++] = (h >>> 8) & 255;
                d[p++] = h & 255;
                const C = ((c / 4294967296) * 1e4) & 268435455;
                d[p++] = (C >>> 8) & 255;
                d[p++] = C & 255;
                d[p++] = ((C >>> 24) & 15) | 16;
                d[p++] = (C >>> 16) & 255;
                d[p++] = (u >>> 8) | 128;
                d[p++] = u & 255;
                for (let e = 0; e < 6; ++e) {
                    d[p + e] = l[e];
                }
                return t || (0, i.default)(d);
            }
            var p = v1;
            t['default'] = p;
        },
        6409: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(5998));
            var i = _interopRequireDefault(r(4569));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            const s = (0, A.default)('v3', 48, i.default);
            var a = s;
            t['default'] = a;
        },
        5998: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = _default;
            t.URL = t.DNS = void 0;
            var A = _interopRequireDefault(r(8950));
            var i = _interopRequireDefault(r(2746));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function stringToBytes(e) {
                e = unescape(encodeURIComponent(e));
                const t = [];
                for (let r = 0; r < e.length; ++r) {
                    t.push(e.charCodeAt(r));
                }
                return t;
            }
            const s = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
            t.DNS = s;
            const a = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
            t.URL = a;
            function _default(e, t, r) {
                function generateUUID(e, s, a, o) {
                    if (typeof e === 'string') {
                        e = stringToBytes(e);
                    }
                    if (typeof s === 'string') {
                        s = (0, i.default)(s);
                    }
                    if (s.length !== 16) {
                        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
                    }
                    let n = new Uint8Array(16 + e.length);
                    n.set(s);
                    n.set(e, s.length);
                    n = r(n);
                    n[6] = (n[6] & 15) | t;
                    n[8] = (n[8] & 63) | 128;
                    if (a) {
                        o = o || 0;
                        for (let e = 0; e < 16; ++e) {
                            a[o + e] = n[e];
                        }
                        return a;
                    }
                    return (0, A.default)(n);
                }
                try {
                    generateUUID.name = e;
                } catch (e) {}
                generateUUID.DNS = s;
                generateUUID.URL = a;
                return generateUUID;
            }
        },
        5122: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(807));
            var i = _interopRequireDefault(r(8950));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function v4(e, t, r) {
                e = e || {};
                const s = e.random || (e.rng || A.default)();
                s[6] = (s[6] & 15) | 64;
                s[8] = (s[8] & 63) | 128;
                if (t) {
                    r = r || 0;
                    for (let e = 0; e < 16; ++e) {
                        t[r + e] = s[e];
                    }
                    return t;
                }
                return (0, i.default)(s);
            }
            var s = v4;
            t['default'] = s;
        },
        9120: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(5998));
            var i = _interopRequireDefault(r(5274));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            const s = (0, A.default)('v5', 80, i.default);
            var a = s;
            t['default'] = a;
        },
        6900: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(814));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function validate(e) {
                return typeof e === 'string' && A.default.test(e);
            }
            var i = validate;
            t['default'] = i;
        },
        1595: (e, t, r) => {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: true});
            t['default'] = void 0;
            var A = _interopRequireDefault(r(6900));
            function _interopRequireDefault(e) {
                return e && e.__esModule ? e : {default: e};
            }
            function version(e) {
                if (!(0, A.default)(e)) {
                    throw TypeError('Invalid UUID');
                }
                return parseInt(e.substr(14, 1), 16);
            }
            var i = version;
            t['default'] = i;
        },
        7537: (e, t, r) => {
            'use strict';
            const A = r(2158);
            t.implementation = class URLImpl {
                constructor(e) {
                    const t = e[0];
                    const r = e[1];
                    let i = null;
                    if (r !== undefined) {
                        i = A.basicURLParse(r);
                        if (i === 'failure') {
                            throw new TypeError('Invalid base URL');
                        }
                    }
                    const s = A.basicURLParse(t, {baseURL: i});
                    if (s === 'failure') {
                        throw new TypeError('Invalid URL');
                    }
                    this._url = s;
                }
                get href() {
                    return A.serializeURL(this._url);
                }
                set href(e) {
                    const t = A.basicURLParse(e);
                    if (t === 'failure') {
                        throw new TypeError('Invalid URL');
                    }
                    this._url = t;
                }
                get origin() {
                    return A.serializeURLOrigin(this._url);
                }
                get protocol() {
                    return this._url.scheme + ':';
                }
                set protocol(e) {
                    A.basicURLParse(e + ':', {url: this._url, stateOverride: 'scheme start'});
                }
                get username() {
                    return this._url.username;
                }
                set username(e) {
                    if (A.cannotHaveAUsernamePasswordPort(this._url)) {
                        return;
                    }
                    A.setTheUsername(this._url, e);
                }
                get password() {
                    return this._url.password;
                }
                set password(e) {
                    if (A.cannotHaveAUsernamePasswordPort(this._url)) {
                        return;
                    }
                    A.setThePassword(this._url, e);
                }
                get host() {
                    const e = this._url;
                    if (e.host === null) {
                        return '';
                    }
                    if (e.port === null) {
                        return A.serializeHost(e.host);
                    }
                    return A.serializeHost(e.host) + ':' + A.serializeInteger(e.port);
                }
                set host(e) {
                    if (this._url.cannotBeABaseURL) {
                        return;
                    }
                    A.basicURLParse(e, {url: this._url, stateOverride: 'host'});
                }
                get hostname() {
                    if (this._url.host === null) {
                        return '';
                    }
                    return A.serializeHost(this._url.host);
                }
                set hostname(e) {
                    if (this._url.cannotBeABaseURL) {
                        return;
                    }
                    A.basicURLParse(e, {url: this._url, stateOverride: 'hostname'});
                }
                get port() {
                    if (this._url.port === null) {
                        return '';
                    }
                    return A.serializeInteger(this._url.port);
                }
                set port(e) {
                    if (A.cannotHaveAUsernamePasswordPort(this._url)) {
                        return;
                    }
                    if (e === '') {
                        this._url.port = null;
                    } else {
                        A.basicURLParse(e, {url: this._url, stateOverride: 'port'});
                    }
                }
                get pathname() {
                    if (this._url.cannotBeABaseURL) {
                        return this._url.path[0];
                    }
                    if (this._url.path.length === 0) {
                        return '';
                    }
                    return '/' + this._url.path.join('/');
                }
                set pathname(e) {
                    if (this._url.cannotBeABaseURL) {
                        return;
                    }
                    this._url.path = [];
                    A.basicURLParse(e, {url: this._url, stateOverride: 'path start'});
                }
                get search() {
                    if (this._url.query === null || this._url.query === '') {
                        return '';
                    }
                    return '?' + this._url.query;
                }
                set search(e) {
                    const t = this._url;
                    if (e === '') {
                        t.query = null;
                        return;
                    }
                    const r = e[0] === '?' ? e.substring(1) : e;
                    t.query = '';
                    A.basicURLParse(r, {url: t, stateOverride: 'query'});
                }
                get hash() {
                    if (this._url.fragment === null || this._url.fragment === '') {
                        return '';
                    }
                    return '#' + this._url.fragment;
                }
                set hash(e) {
                    if (e === '') {
                        this._url.fragment = null;
                        return;
                    }
                    const t = e[0] === '#' ? e.substring(1) : e;
                    this._url.fragment = '';
                    A.basicURLParse(t, {url: this._url, stateOverride: 'fragment'});
                }
                toJSON() {
                    return this.href;
                }
            };
        },
        3394: (e, t, r) => {
            'use strict';
            const A = r(6059);
            const i = r(3185);
            const s = r(7537);
            const a = i.implSymbol;
            function URL(t) {
                if (!this || this[a] || !(this instanceof URL)) {
                    throw new TypeError(
                        "Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.",
                    );
                }
                if (arguments.length < 1) {
                    throw new TypeError(
                        "Failed to construct 'URL': 1 argument required, but only " + arguments.length + ' present.',
                    );
                }
                const r = [];
                for (let e = 0; e < arguments.length && e < 2; ++e) {
                    r[e] = arguments[e];
                }
                r[0] = A['USVString'](r[0]);
                if (r[1] !== undefined) {
                    r[1] = A['USVString'](r[1]);
                }
                e.exports.setup(this, r);
            }
            URL.prototype.toJSON = function toJSON() {
                if (!this || !e.exports.is(this)) {
                    throw new TypeError('Illegal invocation');
                }
                const t = [];
                for (let e = 0; e < arguments.length && e < 0; ++e) {
                    t[e] = arguments[e];
                }
                return this[a].toJSON.apply(this[a], t);
            };
            Object.defineProperty(URL.prototype, 'href', {
                get() {
                    return this[a].href;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].href = e;
                },
                enumerable: true,
                configurable: true,
            });
            URL.prototype.toString = function () {
                if (!this || !e.exports.is(this)) {
                    throw new TypeError('Illegal invocation');
                }
                return this.href;
            };
            Object.defineProperty(URL.prototype, 'origin', {
                get() {
                    return this[a].origin;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'protocol', {
                get() {
                    return this[a].protocol;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].protocol = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'username', {
                get() {
                    return this[a].username;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].username = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'password', {
                get() {
                    return this[a].password;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].password = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'host', {
                get() {
                    return this[a].host;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].host = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'hostname', {
                get() {
                    return this[a].hostname;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].hostname = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'port', {
                get() {
                    return this[a].port;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].port = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'pathname', {
                get() {
                    return this[a].pathname;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].pathname = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'search', {
                get() {
                    return this[a].search;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].search = e;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(URL.prototype, 'hash', {
                get() {
                    return this[a].hash;
                },
                set(e) {
                    e = A['USVString'](e);
                    this[a].hash = e;
                },
                enumerable: true,
                configurable: true,
            });
            e.exports = {
                is(e) {
                    return !!e && e[a] instanceof s.implementation;
                },
                create(e, t) {
                    let r = Object.create(URL.prototype);
                    this.setup(r, e, t);
                    return r;
                },
                setup(e, t, r) {
                    if (!r) r = {};
                    r.wrapper = e;
                    e[a] = new s.implementation(t, r);
                    e[a][i.wrapperSymbol] = e;
                },
                interface: URL,
                expose: {Window: {URL: URL}, Worker: {URL: URL}},
            };
        },
        8665: (e, t, r) => {
            'use strict';
            t.URL = r(3394)['interface'];
            t.serializeURL = r(2158).serializeURL;
            t.serializeURLOrigin = r(2158).serializeURLOrigin;
            t.basicURLParse = r(2158).basicURLParse;
            t.setTheUsername = r(2158).setTheUsername;
            t.setThePassword = r(2158).setThePassword;
            t.serializeHost = r(2158).serializeHost;
            t.serializeInteger = r(2158).serializeInteger;
            t.parseURL = r(2158).parseURL;
        },
        2158: (e, t, r) => {
            'use strict';
            const A = r(5477);
            const i = r(4256);
            const s = {ftp: 21, file: null, gopher: 70, http: 80, https: 443, ws: 80, wss: 443};
            const a = Symbol('failure');
            function countSymbols(e) {
                return A.ucs2.decode(e).length;
            }
            function at(e, t) {
                const r = e[t];
                return isNaN(r) ? undefined : String.fromCodePoint(r);
            }
            function isASCIIDigit(e) {
                return e >= 48 && e <= 57;
            }
            function isASCIIAlpha(e) {
                return (e >= 65 && e <= 90) || (e >= 97 && e <= 122);
            }
            function isASCIIAlphanumeric(e) {
                return isASCIIAlpha(e) || isASCIIDigit(e);
            }
            function isASCIIHex(e) {
                return isASCIIDigit(e) || (e >= 65 && e <= 70) || (e >= 97 && e <= 102);
            }
            function isSingleDot(e) {
                return e === '.' || e.toLowerCase() === '%2e';
            }
            function isDoubleDot(e) {
                e = e.toLowerCase();
                return e === '..' || e === '%2e.' || e === '.%2e' || e === '%2e%2e';
            }
            function isWindowsDriveLetterCodePoints(e, t) {
                return isASCIIAlpha(e) && (t === 58 || t === 124);
            }
            function isWindowsDriveLetterString(e) {
                return e.length === 2 && isASCIIAlpha(e.codePointAt(0)) && (e[1] === ':' || e[1] === '|');
            }
            function isNormalizedWindowsDriveLetterString(e) {
                return e.length === 2 && isASCIIAlpha(e.codePointAt(0)) && e[1] === ':';
            }
            function containsForbiddenHostCodePoint(e) {
                return e.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
            }
            function containsForbiddenHostCodePointExcludingPercent(e) {
                return e.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
            }
            function isSpecialScheme(e) {
                return s[e] !== undefined;
            }
            function isSpecial(e) {
                return isSpecialScheme(e.scheme);
            }
            function defaultPort(e) {
                return s[e];
            }
            function percentEncode(e) {
                let t = e.toString(16).toUpperCase();
                if (t.length === 1) {
                    t = '0' + t;
                }
                return '%' + t;
            }
            function utf8PercentEncode(e) {
                const t = new Buffer(e);
                let r = '';
                for (let e = 0; e < t.length; ++e) {
                    r += percentEncode(t[e]);
                }
                return r;
            }
            function utf8PercentDecode(e) {
                const t = new Buffer(e);
                const r = [];
                for (let e = 0; e < t.length; ++e) {
                    if (t[e] !== 37) {
                        r.push(t[e]);
                    } else if (t[e] === 37 && isASCIIHex(t[e + 1]) && isASCIIHex(t[e + 2])) {
                        r.push(parseInt(t.slice(e + 1, e + 3).toString(), 16));
                        e += 2;
                    } else {
                        r.push(t[e]);
                    }
                }
                return new Buffer(r).toString();
            }
            function isC0ControlPercentEncode(e) {
                return e <= 31 || e > 126;
            }
            const o = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
            function isPathPercentEncode(e) {
                return isC0ControlPercentEncode(e) || o.has(e);
            }
            const n = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
            function isUserinfoPercentEncode(e) {
                return isPathPercentEncode(e) || n.has(e);
            }
            function percentEncodeChar(e, t) {
                const r = String.fromCodePoint(e);
                if (t(e)) {
                    return utf8PercentEncode(r);
                }
                return r;
            }
            function parseIPv4Number(e) {
                let t = 10;
                if (e.length >= 2 && e.charAt(0) === '0' && e.charAt(1).toLowerCase() === 'x') {
                    e = e.substring(2);
                    t = 16;
                } else if (e.length >= 2 && e.charAt(0) === '0') {
                    e = e.substring(1);
                    t = 8;
                }
                if (e === '') {
                    return 0;
                }
                const r = t === 10 ? /[^0-9]/ : t === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
                if (r.test(e)) {
                    return a;
                }
                return parseInt(e, t);
            }
            function parseIPv4(e) {
                const t = e.split('.');
                if (t[t.length - 1] === '') {
                    if (t.length > 1) {
                        t.pop();
                    }
                }
                if (t.length > 4) {
                    return e;
                }
                const r = [];
                for (const A of t) {
                    if (A === '') {
                        return e;
                    }
                    const t = parseIPv4Number(A);
                    if (t === a) {
                        return e;
                    }
                    r.push(t);
                }
                for (let e = 0; e < r.length - 1; ++e) {
                    if (r[e] > 255) {
                        return a;
                    }
                }
                if (r[r.length - 1] >= Math.pow(256, 5 - r.length)) {
                    return a;
                }
                let A = r.pop();
                let i = 0;
                for (const e of r) {
                    A += e * Math.pow(256, 3 - i);
                    ++i;
                }
                return A;
            }
            function serializeIPv4(e) {
                let t = '';
                let r = e;
                for (let e = 1; e <= 4; ++e) {
                    t = String(r % 256) + t;
                    if (e !== 4) {
                        t = '.' + t;
                    }
                    r = Math.floor(r / 256);
                }
                return t;
            }
            function parseIPv6(e) {
                const t = [0, 0, 0, 0, 0, 0, 0, 0];
                let r = 0;
                let i = null;
                let s = 0;
                e = A.ucs2.decode(e);
                if (e[s] === 58) {
                    if (e[s + 1] !== 58) {
                        return a;
                    }
                    s += 2;
                    ++r;
                    i = r;
                }
                while (s < e.length) {
                    if (r === 8) {
                        return a;
                    }
                    if (e[s] === 58) {
                        if (i !== null) {
                            return a;
                        }
                        ++s;
                        ++r;
                        i = r;
                        continue;
                    }
                    let A = 0;
                    let o = 0;
                    while (o < 4 && isASCIIHex(e[s])) {
                        A = A * 16 + parseInt(at(e, s), 16);
                        ++s;
                        ++o;
                    }
                    if (e[s] === 46) {
                        if (o === 0) {
                            return a;
                        }
                        s -= o;
                        if (r > 6) {
                            return a;
                        }
                        let A = 0;
                        while (e[s] !== undefined) {
                            let i = null;
                            if (A > 0) {
                                if (e[s] === 46 && A < 4) {
                                    ++s;
                                } else {
                                    return a;
                                }
                            }
                            if (!isASCIIDigit(e[s])) {
                                return a;
                            }
                            while (isASCIIDigit(e[s])) {
                                const t = parseInt(at(e, s));
                                if (i === null) {
                                    i = t;
                                } else if (i === 0) {
                                    return a;
                                } else {
                                    i = i * 10 + t;
                                }
                                if (i > 255) {
                                    return a;
                                }
                                ++s;
                            }
                            t[r] = t[r] * 256 + i;
                            ++A;
                            if (A === 2 || A === 4) {
                                ++r;
                            }
                        }
                        if (A !== 4) {
                            return a;
                        }
                        break;
                    } else if (e[s] === 58) {
                        ++s;
                        if (e[s] === undefined) {
                            return a;
                        }
                    } else if (e[s] !== undefined) {
                        return a;
                    }
                    t[r] = A;
                    ++r;
                }
                if (i !== null) {
                    let e = r - i;
                    r = 7;
                    while (r !== 0 && e > 0) {
                        const A = t[i + e - 1];
                        t[i + e - 1] = t[r];
                        t[r] = A;
                        --r;
                        --e;
                    }
                } else if (i === null && r !== 8) {
                    return a;
                }
                return t;
            }
            function serializeIPv6(e) {
                let t = '';
                const r = findLongestZeroSequence(e);
                const A = r.idx;
                let i = false;
                for (let r = 0; r <= 7; ++r) {
                    if (i && e[r] === 0) {
                        continue;
                    } else if (i) {
                        i = false;
                    }
                    if (A === r) {
                        const e = r === 0 ? '::' : ':';
                        t += e;
                        i = true;
                        continue;
                    }
                    t += e[r].toString(16);
                    if (r !== 7) {
                        t += ':';
                    }
                }
                return t;
            }
            function parseHost(e, t) {
                if (e[0] === '[') {
                    if (e[e.length - 1] !== ']') {
                        return a;
                    }
                    return parseIPv6(e.substring(1, e.length - 1));
                }
                if (!t) {
                    return parseOpaqueHost(e);
                }
                const r = utf8PercentDecode(e);
                const A = i.toASCII(r, false, i.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
                if (A === null) {
                    return a;
                }
                if (containsForbiddenHostCodePoint(A)) {
                    return a;
                }
                const s = parseIPv4(A);
                if (typeof s === 'number' || s === a) {
                    return s;
                }
                return A;
            }
            function parseOpaqueHost(e) {
                if (containsForbiddenHostCodePointExcludingPercent(e)) {
                    return a;
                }
                let t = '';
                const r = A.ucs2.decode(e);
                for (let e = 0; e < r.length; ++e) {
                    t += percentEncodeChar(r[e], isC0ControlPercentEncode);
                }
                return t;
            }
            function findLongestZeroSequence(e) {
                let t = null;
                let r = 1;
                let A = null;
                let i = 0;
                for (let s = 0; s < e.length; ++s) {
                    if (e[s] !== 0) {
                        if (i > r) {
                            t = A;
                            r = i;
                        }
                        A = null;
                        i = 0;
                    } else {
                        if (A === null) {
                            A = s;
                        }
                        ++i;
                    }
                }
                if (i > r) {
                    t = A;
                    r = i;
                }
                return {idx: t, len: r};
            }
            function serializeHost(e) {
                if (typeof e === 'number') {
                    return serializeIPv4(e);
                }
                if (e instanceof Array) {
                    return '[' + serializeIPv6(e) + ']';
                }
                return e;
            }
            function trimControlChars(e) {
                return e.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, '');
            }
            function trimTabAndNewline(e) {
                return e.replace(/\u0009|\u000A|\u000D/g, '');
            }
            function shortenPath(e) {
                const t = e.path;
                if (t.length === 0) {
                    return;
                }
                if (e.scheme === 'file' && t.length === 1 && isNormalizedWindowsDriveLetter(t[0])) {
                    return;
                }
                t.pop();
            }
            function includesCredentials(e) {
                return e.username !== '' || e.password !== '';
            }
            function cannotHaveAUsernamePasswordPort(e) {
                return e.host === null || e.host === '' || e.cannotBeABaseURL || e.scheme === 'file';
            }
            function isNormalizedWindowsDriveLetter(e) {
                return /^[A-Za-z]:$/.test(e);
            }
            function URLStateMachine(e, t, r, i, s) {
                this.pointer = 0;
                this.input = e;
                this.base = t || null;
                this.encodingOverride = r || 'utf-8';
                this.stateOverride = s;
                this.url = i;
                this.failure = false;
                this.parseError = false;
                if (!this.url) {
                    this.url = {
                        scheme: '',
                        username: '',
                        password: '',
                        host: null,
                        port: null,
                        path: [],
                        query: null,
                        fragment: null,
                        cannotBeABaseURL: false,
                    };
                    const e = trimControlChars(this.input);
                    if (e !== this.input) {
                        this.parseError = true;
                    }
                    this.input = e;
                }
                const o = trimTabAndNewline(this.input);
                if (o !== this.input) {
                    this.parseError = true;
                }
                this.input = o;
                this.state = s || 'scheme start';
                this.buffer = '';
                this.atFlag = false;
                this.arrFlag = false;
                this.passwordTokenSeenFlag = false;
                this.input = A.ucs2.decode(this.input);
                for (; this.pointer <= this.input.length; ++this.pointer) {
                    const e = this.input[this.pointer];
                    const t = isNaN(e) ? undefined : String.fromCodePoint(e);
                    const r = this['parse ' + this.state](e, t);
                    if (!r) {
                        break;
                    } else if (r === a) {
                        this.failure = true;
                        break;
                    }
                }
            }
            URLStateMachine.prototype['parse scheme start'] = function parseSchemeStart(e, t) {
                if (isASCIIAlpha(e)) {
                    this.buffer += t.toLowerCase();
                    this.state = 'scheme';
                } else if (!this.stateOverride) {
                    this.state = 'no scheme';
                    --this.pointer;
                } else {
                    this.parseError = true;
                    return a;
                }
                return true;
            };
            URLStateMachine.prototype['parse scheme'] = function parseScheme(e, t) {
                if (isASCIIAlphanumeric(e) || e === 43 || e === 45 || e === 46) {
                    this.buffer += t.toLowerCase();
                } else if (e === 58) {
                    if (this.stateOverride) {
                        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
                            return false;
                        }
                        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
                            return false;
                        }
                        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === 'file') {
                            return false;
                        }
                        if (this.url.scheme === 'file' && (this.url.host === '' || this.url.host === null)) {
                            return false;
                        }
                    }
                    this.url.scheme = this.buffer;
                    this.buffer = '';
                    if (this.stateOverride) {
                        return false;
                    }
                    if (this.url.scheme === 'file') {
                        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
                            this.parseError = true;
                        }
                        this.state = 'file';
                    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
                        this.state = 'special relative or authority';
                    } else if (isSpecial(this.url)) {
                        this.state = 'special authority slashes';
                    } else if (this.input[this.pointer + 1] === 47) {
                        this.state = 'path or authority';
                        ++this.pointer;
                    } else {
                        this.url.cannotBeABaseURL = true;
                        this.url.path.push('');
                        this.state = 'cannot-be-a-base-URL path';
                    }
                } else if (!this.stateOverride) {
                    this.buffer = '';
                    this.state = 'no scheme';
                    this.pointer = -1;
                } else {
                    this.parseError = true;
                    return a;
                }
                return true;
            };
            URLStateMachine.prototype['parse no scheme'] = function parseNoScheme(e) {
                if (this.base === null || (this.base.cannotBeABaseURL && e !== 35)) {
                    return a;
                } else if (this.base.cannotBeABaseURL && e === 35) {
                    this.url.scheme = this.base.scheme;
                    this.url.path = this.base.path.slice();
                    this.url.query = this.base.query;
                    this.url.fragment = '';
                    this.url.cannotBeABaseURL = true;
                    this.state = 'fragment';
                } else if (this.base.scheme === 'file') {
                    this.state = 'file';
                    --this.pointer;
                } else {
                    this.state = 'relative';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse special relative or authority'] = function parseSpecialRelativeOrAuthority(
                e,
            ) {
                if (e === 47 && this.input[this.pointer + 1] === 47) {
                    this.state = 'special authority ignore slashes';
                    ++this.pointer;
                } else {
                    this.parseError = true;
                    this.state = 'relative';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse path or authority'] = function parsePathOrAuthority(e) {
                if (e === 47) {
                    this.state = 'authority';
                } else {
                    this.state = 'path';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse relative'] = function parseRelative(e) {
                this.url.scheme = this.base.scheme;
                if (isNaN(e)) {
                    this.url.username = this.base.username;
                    this.url.password = this.base.password;
                    this.url.host = this.base.host;
                    this.url.port = this.base.port;
                    this.url.path = this.base.path.slice();
                    this.url.query = this.base.query;
                } else if (e === 47) {
                    this.state = 'relative slash';
                } else if (e === 63) {
                    this.url.username = this.base.username;
                    this.url.password = this.base.password;
                    this.url.host = this.base.host;
                    this.url.port = this.base.port;
                    this.url.path = this.base.path.slice();
                    this.url.query = '';
                    this.state = 'query';
                } else if (e === 35) {
                    this.url.username = this.base.username;
                    this.url.password = this.base.password;
                    this.url.host = this.base.host;
                    this.url.port = this.base.port;
                    this.url.path = this.base.path.slice();
                    this.url.query = this.base.query;
                    this.url.fragment = '';
                    this.state = 'fragment';
                } else if (isSpecial(this.url) && e === 92) {
                    this.parseError = true;
                    this.state = 'relative slash';
                } else {
                    this.url.username = this.base.username;
                    this.url.password = this.base.password;
                    this.url.host = this.base.host;
                    this.url.port = this.base.port;
                    this.url.path = this.base.path.slice(0, this.base.path.length - 1);
                    this.state = 'path';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse relative slash'] = function parseRelativeSlash(e) {
                if (isSpecial(this.url) && (e === 47 || e === 92)) {
                    if (e === 92) {
                        this.parseError = true;
                    }
                    this.state = 'special authority ignore slashes';
                } else if (e === 47) {
                    this.state = 'authority';
                } else {
                    this.url.username = this.base.username;
                    this.url.password = this.base.password;
                    this.url.host = this.base.host;
                    this.url.port = this.base.port;
                    this.state = 'path';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse special authority slashes'] = function parseSpecialAuthoritySlashes(e) {
                if (e === 47 && this.input[this.pointer + 1] === 47) {
                    this.state = 'special authority ignore slashes';
                    ++this.pointer;
                } else {
                    this.parseError = true;
                    this.state = 'special authority ignore slashes';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype[
                'parse special authority ignore slashes'
            ] = function parseSpecialAuthorityIgnoreSlashes(e) {
                if (e !== 47 && e !== 92) {
                    this.state = 'authority';
                    --this.pointer;
                } else {
                    this.parseError = true;
                }
                return true;
            };
            URLStateMachine.prototype['parse authority'] = function parseAuthority(e, t) {
                if (e === 64) {
                    this.parseError = true;
                    if (this.atFlag) {
                        this.buffer = '%40' + this.buffer;
                    }
                    this.atFlag = true;
                    const e = countSymbols(this.buffer);
                    for (let t = 0; t < e; ++t) {
                        const e = this.buffer.codePointAt(t);
                        if (e === 58 && !this.passwordTokenSeenFlag) {
                            this.passwordTokenSeenFlag = true;
                            continue;
                        }
                        const r = percentEncodeChar(e, isUserinfoPercentEncode);
                        if (this.passwordTokenSeenFlag) {
                            this.url.password += r;
                        } else {
                            this.url.username += r;
                        }
                    }
                    this.buffer = '';
                } else if (isNaN(e) || e === 47 || e === 63 || e === 35 || (isSpecial(this.url) && e === 92)) {
                    if (this.atFlag && this.buffer === '') {
                        this.parseError = true;
                        return a;
                    }
                    this.pointer -= countSymbols(this.buffer) + 1;
                    this.buffer = '';
                    this.state = 'host';
                } else {
                    this.buffer += t;
                }
                return true;
            };
            URLStateMachine.prototype['parse hostname'] = URLStateMachine.prototype[
                'parse host'
            ] = function parseHostName(e, t) {
                if (this.stateOverride && this.url.scheme === 'file') {
                    --this.pointer;
                    this.state = 'file host';
                } else if (e === 58 && !this.arrFlag) {
                    if (this.buffer === '') {
                        this.parseError = true;
                        return a;
                    }
                    const e = parseHost(this.buffer, isSpecial(this.url));
                    if (e === a) {
                        return a;
                    }
                    this.url.host = e;
                    this.buffer = '';
                    this.state = 'port';
                    if (this.stateOverride === 'hostname') {
                        return false;
                    }
                } else if (isNaN(e) || e === 47 || e === 63 || e === 35 || (isSpecial(this.url) && e === 92)) {
                    --this.pointer;
                    if (isSpecial(this.url) && this.buffer === '') {
                        this.parseError = true;
                        return a;
                    } else if (
                        this.stateOverride &&
                        this.buffer === '' &&
                        (includesCredentials(this.url) || this.url.port !== null)
                    ) {
                        this.parseError = true;
                        return false;
                    }
                    const e = parseHost(this.buffer, isSpecial(this.url));
                    if (e === a) {
                        return a;
                    }
                    this.url.host = e;
                    this.buffer = '';
                    this.state = 'path start';
                    if (this.stateOverride) {
                        return false;
                    }
                } else {
                    if (e === 91) {
                        this.arrFlag = true;
                    } else if (e === 93) {
                        this.arrFlag = false;
                    }
                    this.buffer += t;
                }
                return true;
            };
            URLStateMachine.prototype['parse port'] = function parsePort(e, t) {
                if (isASCIIDigit(e)) {
                    this.buffer += t;
                } else if (
                    isNaN(e) ||
                    e === 47 ||
                    e === 63 ||
                    e === 35 ||
                    (isSpecial(this.url) && e === 92) ||
                    this.stateOverride
                ) {
                    if (this.buffer !== '') {
                        const e = parseInt(this.buffer);
                        if (e > Math.pow(2, 16) - 1) {
                            this.parseError = true;
                            return a;
                        }
                        this.url.port = e === defaultPort(this.url.scheme) ? null : e;
                        this.buffer = '';
                    }
                    if (this.stateOverride) {
                        return false;
                    }
                    this.state = 'path start';
                    --this.pointer;
                } else {
                    this.parseError = true;
                    return a;
                }
                return true;
            };
            const p = new Set([47, 92, 63, 35]);
            URLStateMachine.prototype['parse file'] = function parseFile(e) {
                this.url.scheme = 'file';
                if (e === 47 || e === 92) {
                    if (e === 92) {
                        this.parseError = true;
                    }
                    this.state = 'file slash';
                } else if (this.base !== null && this.base.scheme === 'file') {
                    if (isNaN(e)) {
                        this.url.host = this.base.host;
                        this.url.path = this.base.path.slice();
                        this.url.query = this.base.query;
                    } else if (e === 63) {
                        this.url.host = this.base.host;
                        this.url.path = this.base.path.slice();
                        this.url.query = '';
                        this.state = 'query';
                    } else if (e === 35) {
                        this.url.host = this.base.host;
                        this.url.path = this.base.path.slice();
                        this.url.query = this.base.query;
                        this.url.fragment = '';
                        this.state = 'fragment';
                    } else {
                        if (
                            this.input.length - this.pointer - 1 === 0 ||
                            !isWindowsDriveLetterCodePoints(e, this.input[this.pointer + 1]) ||
                            (this.input.length - this.pointer - 1 >= 2 && !p.has(this.input[this.pointer + 2]))
                        ) {
                            this.url.host = this.base.host;
                            this.url.path = this.base.path.slice();
                            shortenPath(this.url);
                        } else {
                            this.parseError = true;
                        }
                        this.state = 'path';
                        --this.pointer;
                    }
                } else {
                    this.state = 'path';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse file slash'] = function parseFileSlash(e) {
                if (e === 47 || e === 92) {
                    if (e === 92) {
                        this.parseError = true;
                    }
                    this.state = 'file host';
                } else {
                    if (this.base !== null && this.base.scheme === 'file') {
                        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
                            this.url.path.push(this.base.path[0]);
                        } else {
                            this.url.host = this.base.host;
                        }
                    }
                    this.state = 'path';
                    --this.pointer;
                }
                return true;
            };
            URLStateMachine.prototype['parse file host'] = function parseFileHost(e, t) {
                if (isNaN(e) || e === 47 || e === 92 || e === 63 || e === 35) {
                    --this.pointer;
                    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
                        this.parseError = true;
                        this.state = 'path';
                    } else if (this.buffer === '') {
                        this.url.host = '';
                        if (this.stateOverride) {
                            return false;
                        }
                        this.state = 'path start';
                    } else {
                        let e = parseHost(this.buffer, isSpecial(this.url));
                        if (e === a) {
                            return a;
                        }
                        if (e === 'localhost') {
                            e = '';
                        }
                        this.url.host = e;
                        if (this.stateOverride) {
                            return false;
                        }
                        this.buffer = '';
                        this.state = 'path start';
                    }
                } else {
                    this.buffer += t;
                }
                return true;
            };
            URLStateMachine.prototype['parse path start'] = function parsePathStart(e) {
                if (isSpecial(this.url)) {
                    if (e === 92) {
                        this.parseError = true;
                    }
                    this.state = 'path';
                    if (e !== 47 && e !== 92) {
                        --this.pointer;
                    }
                } else if (!this.stateOverride && e === 63) {
                    this.url.query = '';
                    this.state = 'query';
                } else if (!this.stateOverride && e === 35) {
                    this.url.fragment = '';
                    this.state = 'fragment';
                } else if (e !== undefined) {
                    this.state = 'path';
                    if (e !== 47) {
                        --this.pointer;
                    }
                }
                return true;
            };
            URLStateMachine.prototype['parse path'] = function parsePath(e) {
                if (
                    isNaN(e) ||
                    e === 47 ||
                    (isSpecial(this.url) && e === 92) ||
                    (!this.stateOverride && (e === 63 || e === 35))
                ) {
                    if (isSpecial(this.url) && e === 92) {
                        this.parseError = true;
                    }
                    if (isDoubleDot(this.buffer)) {
                        shortenPath(this.url);
                        if (e !== 47 && !(isSpecial(this.url) && e === 92)) {
                            this.url.path.push('');
                        }
                    } else if (isSingleDot(this.buffer) && e !== 47 && !(isSpecial(this.url) && e === 92)) {
                        this.url.path.push('');
                    } else if (!isSingleDot(this.buffer)) {
                        if (
                            this.url.scheme === 'file' &&
                            this.url.path.length === 0 &&
                            isWindowsDriveLetterString(this.buffer)
                        ) {
                            if (this.url.host !== '' && this.url.host !== null) {
                                this.parseError = true;
                                this.url.host = '';
                            }
                            this.buffer = this.buffer[0] + ':';
                        }
                        this.url.path.push(this.buffer);
                    }
                    this.buffer = '';
                    if (this.url.scheme === 'file' && (e === undefined || e === 63 || e === 35)) {
                        while (this.url.path.length > 1 && this.url.path[0] === '') {
                            this.parseError = true;
                            this.url.path.shift();
                        }
                    }
                    if (e === 63) {
                        this.url.query = '';
                        this.state = 'query';
                    }
                    if (e === 35) {
                        this.url.fragment = '';
                        this.state = 'fragment';
                    }
                } else {
                    if (
                        e === 37 &&
                        (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
                    ) {
                        this.parseError = true;
                    }
                    this.buffer += percentEncodeChar(e, isPathPercentEncode);
                }
                return true;
            };
            URLStateMachine.prototype['parse cannot-be-a-base-URL path'] = function parseCannotBeABaseURLPath(e) {
                if (e === 63) {
                    this.url.query = '';
                    this.state = 'query';
                } else if (e === 35) {
                    this.url.fragment = '';
                    this.state = 'fragment';
                } else {
                    if (!isNaN(e) && e !== 37) {
                        this.parseError = true;
                    }
                    if (
                        e === 37 &&
                        (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
                    ) {
                        this.parseError = true;
                    }
                    if (!isNaN(e)) {
                        this.url.path[0] = this.url.path[0] + percentEncodeChar(e, isC0ControlPercentEncode);
                    }
                }
                return true;
            };
            URLStateMachine.prototype['parse query'] = function parseQuery(e, t) {
                if (isNaN(e) || (!this.stateOverride && e === 35)) {
                    if (!isSpecial(this.url) || this.url.scheme === 'ws' || this.url.scheme === 'wss') {
                        this.encodingOverride = 'utf-8';
                    }
                    const t = new Buffer(this.buffer);
                    for (let e = 0; e < t.length; ++e) {
                        if (t[e] < 33 || t[e] > 126 || t[e] === 34 || t[e] === 35 || t[e] === 60 || t[e] === 62) {
                            this.url.query += percentEncode(t[e]);
                        } else {
                            this.url.query += String.fromCodePoint(t[e]);
                        }
                    }
                    this.buffer = '';
                    if (e === 35) {
                        this.url.fragment = '';
                        this.state = 'fragment';
                    }
                } else {
                    if (
                        e === 37 &&
                        (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
                    ) {
                        this.parseError = true;
                    }
                    this.buffer += t;
                }
                return true;
            };
            URLStateMachine.prototype['parse fragment'] = function parseFragment(e) {
                if (isNaN(e)) {
                } else if (e === 0) {
                    this.parseError = true;
                } else {
                    if (
                        e === 37 &&
                        (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
                    ) {
                        this.parseError = true;
                    }
                    this.url.fragment += percentEncodeChar(e, isC0ControlPercentEncode);
                }
                return true;
            };
            function serializeURL(e, t) {
                let r = e.scheme + ':';
                if (e.host !== null) {
                    r += '//';
                    if (e.username !== '' || e.password !== '') {
                        r += e.username;
                        if (e.password !== '') {
                            r += ':' + e.password;
                        }
                        r += '@';
                    }
                    r += serializeHost(e.host);
                    if (e.port !== null) {
                        r += ':' + e.port;
                    }
                } else if (e.host === null && e.scheme === 'file') {
                    r += '//';
                }
                if (e.cannotBeABaseURL) {
                    r += e.path[0];
                } else {
                    for (const t of e.path) {
                        r += '/' + t;
                    }
                }
                if (e.query !== null) {
                    r += '?' + e.query;
                }
                if (!t && e.fragment !== null) {
                    r += '#' + e.fragment;
                }
                return r;
            }
            function serializeOrigin(e) {
                let t = e.scheme + '://';
                t += serializeHost(e.host);
                if (e.port !== null) {
                    t += ':' + e.port;
                }
                return t;
            }
            e.exports.serializeURL = serializeURL;
            e.exports.serializeURLOrigin = function (t) {
                switch (t.scheme) {
                    case 'blob':
                        try {
                            return e.exports.serializeURLOrigin(e.exports.parseURL(t.path[0]));
                        } catch (e) {
                            return 'null';
                        }
                    case 'ftp':
                    case 'gopher':
                    case 'http':
                    case 'https':
                    case 'ws':
                    case 'wss':
                        return serializeOrigin({scheme: t.scheme, host: t.host, port: t.port});
                    case 'file':
                        return 'file://';
                    default:
                        return 'null';
                }
            };
            e.exports.basicURLParse = function (e, t) {
                if (t === undefined) {
                    t = {};
                }
                const r = new URLStateMachine(e, t.baseURL, t.encodingOverride, t.url, t.stateOverride);
                if (r.failure) {
                    return 'failure';
                }
                return r.url;
            };
            e.exports.setTheUsername = function (e, t) {
                e.username = '';
                const r = A.ucs2.decode(t);
                for (let t = 0; t < r.length; ++t) {
                    e.username += percentEncodeChar(r[t], isUserinfoPercentEncode);
                }
            };
            e.exports.setThePassword = function (e, t) {
                e.password = '';
                const r = A.ucs2.decode(t);
                for (let t = 0; t < r.length; ++t) {
                    e.password += percentEncodeChar(r[t], isUserinfoPercentEncode);
                }
            };
            e.exports.serializeHost = serializeHost;
            e.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
            e.exports.serializeInteger = function (e) {
                return String(e);
            };
            e.exports.parseURL = function (t, r) {
                if (r === undefined) {
                    r = {};
                }
                return e.exports.basicURLParse(t, {baseURL: r.baseURL, encodingOverride: r.encodingOverride});
            };
        },
        3185: (e) => {
            'use strict';
            e.exports.mixin = function mixin(e, t) {
                const r = Object.getOwnPropertyNames(t);
                for (let A = 0; A < r.length; ++A) {
                    Object.defineProperty(e, r[A], Object.getOwnPropertyDescriptor(t, r[A]));
                }
            };
            e.exports.wrapperSymbol = Symbol('wrapper');
            e.exports.implSymbol = Symbol('impl');
            e.exports.wrapperForImpl = function (t) {
                return t[e.exports.wrapperSymbol];
            };
            e.exports.implForWrapper = function (t) {
                return t[e.exports.implSymbol];
            };
        },
        6059: (e) => {
            'use strict';
            var t = {};
            e.exports = t;
            function sign(e) {
                return e < 0 ? -1 : 1;
            }
            function evenRound(e) {
                if (e % 1 === 0.5 && (e & 1) === 0) {
                    return Math.floor(e);
                } else {
                    return Math.round(e);
                }
            }
            function createNumberConversion(e, t) {
                if (!t.unsigned) {
                    --e;
                }
                const r = t.unsigned ? 0 : -Math.pow(2, e);
                const A = Math.pow(2, e) - 1;
                const i = t.moduloBitLength ? Math.pow(2, t.moduloBitLength) : Math.pow(2, e);
                const s = t.moduloBitLength ? Math.pow(2, t.moduloBitLength - 1) : Math.pow(2, e - 1);
                return function (e, a) {
                    if (!a) a = {};
                    let o = +e;
                    if (a.enforceRange) {
                        if (!Number.isFinite(o)) {
                            throw new TypeError('Argument is not a finite number');
                        }
                        o = sign(o) * Math.floor(Math.abs(o));
                        if (o < r || o > A) {
                            throw new TypeError('Argument is not in byte range');
                        }
                        return o;
                    }
                    if (!isNaN(o) && a.clamp) {
                        o = evenRound(o);
                        if (o < r) o = r;
                        if (o > A) o = A;
                        return o;
                    }
                    if (!Number.isFinite(o) || o === 0) {
                        return 0;
                    }
                    o = sign(o) * Math.floor(Math.abs(o));
                    o = o % i;
                    if (!t.unsigned && o >= s) {
                        return o - i;
                    } else if (t.unsigned) {
                        if (o < 0) {
                            o += i;
                        } else if (o === -0) {
                            return 0;
                        }
                    }
                    return o;
                };
            }
            t['void'] = function () {
                return undefined;
            };
            t['boolean'] = function (e) {
                return !!e;
            };
            t['byte'] = createNumberConversion(8, {unsigned: false});
            t['octet'] = createNumberConversion(8, {unsigned: true});
            t['short'] = createNumberConversion(16, {unsigned: false});
            t['unsigned short'] = createNumberConversion(16, {unsigned: true});
            t['long'] = createNumberConversion(32, {unsigned: false});
            t['unsigned long'] = createNumberConversion(32, {unsigned: true});
            t['long long'] = createNumberConversion(32, {unsigned: false, moduloBitLength: 64});
            t['unsigned long long'] = createNumberConversion(32, {unsigned: true, moduloBitLength: 64});
            t['double'] = function (e) {
                const t = +e;
                if (!Number.isFinite(t)) {
                    throw new TypeError('Argument is not a finite floating-point value');
                }
                return t;
            };
            t['unrestricted double'] = function (e) {
                const t = +e;
                if (isNaN(t)) {
                    throw new TypeError('Argument is NaN');
                }
                return t;
            };
            t['float'] = t['double'];
            t['unrestricted float'] = t['unrestricted double'];
            t['DOMString'] = function (e, t) {
                if (!t) t = {};
                if (t.treatNullAsEmptyString && e === null) {
                    return '';
                }
                return String(e);
            };
            t['ByteString'] = function (e, t) {
                const r = String(e);
                let A = undefined;
                for (let e = 0; (A = r.codePointAt(e)) !== undefined; ++e) {
                    if (A > 255) {
                        throw new TypeError('Argument is not a valid bytestring');
                    }
                }
                return r;
            };
            t['USVString'] = function (e) {
                const t = String(e);
                const r = t.length;
                const A = [];
                for (let e = 0; e < r; ++e) {
                    const i = t.charCodeAt(e);
                    if (i < 55296 || i > 57343) {
                        A.push(String.fromCodePoint(i));
                    } else if (56320 <= i && i <= 57343) {
                        A.push(String.fromCodePoint(65533));
                    } else {
                        if (e === r - 1) {
                            A.push(String.fromCodePoint(65533));
                        } else {
                            const r = t.charCodeAt(e + 1);
                            if (56320 <= r && r <= 57343) {
                                const t = i & 1023;
                                const s = r & 1023;
                                A.push(String.fromCodePoint((2 << 15) + (2 << 9) * t + s));
                                ++e;
                            } else {
                                A.push(String.fromCodePoint(65533));
                            }
                        }
                    }
                }
                return A.join('');
            };
            t['Date'] = function (e, t) {
                if (!(e instanceof Date)) {
                    throw new TypeError('Argument is not a Date object');
                }
                if (isNaN(e)) {
                    return undefined;
                }
                return e;
            };
            t['RegExp'] = function (e, t) {
                if (!(e instanceof RegExp)) {
                    e = new RegExp(e);
                }
                return e;
            };
        },
        3515: (e, t, r) => {
            'use strict';
            const A = r(2037);
            const i = r(5447);
            const s = new Map([
                ['10.0', '10'],
                ['6.3', '8.1'],
                ['6.2', '8'],
                ['6.1', '7'],
                ['6.0', 'Vista'],
                ['5.2', 'Server 2003'],
                ['5.1', 'XP'],
                ['5.0', '2000'],
                ['4.9', 'ME'],
                ['4.1', '98'],
                ['4.0', '95'],
            ]);
            const windowsRelease = (e) => {
                const t = /\d+\.\d/.exec(e || A.release());
                if (e && !t) {
                    throw new Error("`release` argument doesn't match `n.n`");
                }
                const r = (t || [])[0];
                if ((!e || e === A.release()) && ['6.1', '6.2', '6.3', '10.0'].includes(r)) {
                    let e;
                    try {
                        e =
                            i.sync('powershell', ['(Get-CimInstance -ClassName Win32_OperatingSystem).caption'])
                                .stdout || '';
                    } catch (t) {
                        e = i.sync('wmic', ['os', 'get', 'Caption']).stdout || '';
                    }
                    const t = (e.match(/2008|2012|2016|2019/) || [])[0];
                    if (t) {
                        return `Server ${t}`;
                    }
                }
                return s.get(r);
            };
            e.exports = windowsRelease;
        },
        2940: (e) => {
            e.exports = wrappy;
            function wrappy(e, t) {
                if (e && t) return wrappy(e)(t);
                if (typeof e !== 'function') throw new TypeError('need wrapper function');
                Object.keys(e).forEach(function (t) {
                    wrapper[t] = e[t];
                });
                return wrapper;
                function wrapper() {
                    var t = new Array(arguments.length);
                    for (var r = 0; r < t.length; r++) {
                        t[r] = arguments[r];
                    }
                    var A = e.apply(this, t);
                    var i = t[t.length - 1];
                    if (typeof A === 'function' && A !== i) {
                        Object.keys(i).forEach(function (e) {
                            A[e] = i[e];
                        });
                    }
                    return A;
                }
            }
        },
        2877: (module) => {
            module.exports = eval('require')('encoding');
        },
        9491: (e) => {
            'use strict';
            e.exports = require('assert');
        },
        852: (e) => {
            'use strict';
            e.exports = require('async_hooks');
        },
        4300: (e) => {
            'use strict';
            e.exports = require('buffer');
        },
        2081: (e) => {
            'use strict';
            e.exports = require('child_process');
        },
        6206: (e) => {
            'use strict';
            e.exports = require('console');
        },
        6113: (e) => {
            'use strict';
            e.exports = require('crypto');
        },
        7643: (e) => {
            'use strict';
            e.exports = require('diagnostics_channel');
        },
        2361: (e) => {
            'use strict';
            e.exports = require('events');
        },
        7147: (e) => {
            'use strict';
            e.exports = require('fs');
        },
        3685: (e) => {
            'use strict';
            e.exports = require('http');
        },
        5158: (e) => {
            'use strict';
            e.exports = require('http2');
        },
        5687: (e) => {
            'use strict';
            e.exports = require('https');
        },
        1808: (e) => {
            'use strict';
            e.exports = require('net');
        },
        5673: (e) => {
            'use strict';
            e.exports = require('node:events');
        },
        4492: (e) => {
            'use strict';
            e.exports = require('node:stream');
        },
        7261: (e) => {
            'use strict';
            e.exports = require('node:util');
        },
        2037: (e) => {
            'use strict';
            e.exports = require('os');
        },
        1017: (e) => {
            'use strict';
            e.exports = require('path');
        },
        4074: (e) => {
            'use strict';
            e.exports = require('perf_hooks');
        },
        5477: (e) => {
            'use strict';
            e.exports = require('punycode');
        },
        3477: (e) => {
            'use strict';
            e.exports = require('querystring');
        },
        2781: (e) => {
            'use strict';
            e.exports = require('stream');
        },
        5356: (e) => {
            'use strict';
            e.exports = require('stream/web');
        },
        1576: (e) => {
            'use strict';
            e.exports = require('string_decoder');
        },
        4404: (e) => {
            'use strict';
            e.exports = require('tls');
        },
        6224: (e) => {
            'use strict';
            e.exports = require('tty');
        },
        7310: (e) => {
            'use strict';
            e.exports = require('url');
        },
        3837: (e) => {
            'use strict';
            e.exports = require('util');
        },
        9830: (e) => {
            'use strict';
            e.exports = require('util/types');
        },
        1267: (e) => {
            'use strict';
            e.exports = require('worker_threads');
        },
        9796: (e) => {
            'use strict';
            e.exports = require('zlib');
        },
        2960: (e, t, r) => {
            'use strict';
            const A = r(4492).Writable;
            const i = r(7261).inherits;
            const s = r(1142);
            const a = r(1620);
            const o = r(2032);
            const n = 45;
            const p = Buffer.from('-');
            const d = Buffer.from('\r\n');
            const EMPTY_FN = function () {};
            function Dicer(e) {
                if (!(this instanceof Dicer)) {
                    return new Dicer(e);
                }
                A.call(this, e);
                if (!e || (!e.headerFirst && typeof e.boundary !== 'string')) {
                    throw new TypeError('Boundary required');
                }
                if (typeof e.boundary === 'string') {
                    this.setBoundary(e.boundary);
                } else {
                    this._bparser = undefined;
                }
                this._headerFirst = e.headerFirst;
                this._dashes = 0;
                this._parts = 0;
                this._finished = false;
                this._realFinish = false;
                this._isPreamble = true;
                this._justMatched = false;
                this._firstWrite = true;
                this._inHeader = true;
                this._part = undefined;
                this._cb = undefined;
                this._ignoreData = false;
                this._partOpts = {highWaterMark: e.partHwm};
                this._pause = false;
                const t = this;
                this._hparser = new o(e);
                this._hparser.on('header', function (e) {
                    t._inHeader = false;
                    t._part.emit('header', e);
                });
            }
            i(Dicer, A);
            Dicer.prototype.emit = function (e) {
                if (e === 'finish' && !this._realFinish) {
                    if (!this._finished) {
                        const e = this;
                        process.nextTick(function () {
                            e.emit('error', new Error('Unexpected end of multipart data'));
                            if (e._part && !e._ignoreData) {
                                const t = e._isPreamble ? 'Preamble' : 'Part';
                                e._part.emit(
                                    'error',
                                    new Error(t + ' terminated early due to unexpected end of multipart data'),
                                );
                                e._part.push(null);
                                process.nextTick(function () {
                                    e._realFinish = true;
                                    e.emit('finish');
                                    e._realFinish = false;
                                });
                                return;
                            }
                            e._realFinish = true;
                            e.emit('finish');
                            e._realFinish = false;
                        });
                    }
                } else {
                    A.prototype.emit.apply(this, arguments);
                }
            };
            Dicer.prototype._write = function (e, t, r) {
                if (!this._hparser && !this._bparser) {
                    return r();
                }
                if (this._headerFirst && this._isPreamble) {
                    if (!this._part) {
                        this._part = new a(this._partOpts);
                        if (this._events.preamble) {
                            this.emit('preamble', this._part);
                        } else {
                            this._ignore();
                        }
                    }
                    const t = this._hparser.push(e);
                    if (!this._inHeader && t !== undefined && t < e.length) {
                        e = e.slice(t);
                    } else {
                        return r();
                    }
                }
                if (this._firstWrite) {
                    this._bparser.push(d);
                    this._firstWrite = false;
                }
                this._bparser.push(e);
                if (this._pause) {
                    this._cb = r;
                } else {
                    r();
                }
            };
            Dicer.prototype.reset = function () {
                this._part = undefined;
                this._bparser = undefined;
                this._hparser = undefined;
            };
            Dicer.prototype.setBoundary = function (e) {
                const t = this;
                this._bparser = new s('\r\n--' + e);
                this._bparser.on('info', function (e, r, A, i) {
                    t._oninfo(e, r, A, i);
                });
            };
            Dicer.prototype._ignore = function () {
                if (this._part && !this._ignoreData) {
                    this._ignoreData = true;
                    this._part.on('error', EMPTY_FN);
                    this._part.resume();
                }
            };
            Dicer.prototype._oninfo = function (e, t, r, A) {
                let i;
                const s = this;
                let o = 0;
                let d;
                let l = true;
                if (!this._part && this._justMatched && t) {
                    while (this._dashes < 2 && r + o < A) {
                        if (t[r + o] === n) {
                            ++o;
                            ++this._dashes;
                        } else {
                            if (this._dashes) {
                                i = p;
                            }
                            this._dashes = 0;
                            break;
                        }
                    }
                    if (this._dashes === 2) {
                        if (r + o < A && this._events.trailer) {
                            this.emit('trailer', t.slice(r + o, A));
                        }
                        this.reset();
                        this._finished = true;
                        if (s._parts === 0) {
                            s._realFinish = true;
                            s.emit('finish');
                            s._realFinish = false;
                        }
                    }
                    if (this._dashes) {
                        return;
                    }
                }
                if (this._justMatched) {
                    this._justMatched = false;
                }
                if (!this._part) {
                    this._part = new a(this._partOpts);
                    this._part._read = function (e) {
                        s._unpause();
                    };
                    if (this._isPreamble && this._events.preamble) {
                        this.emit('preamble', this._part);
                    } else if (this._isPreamble !== true && this._events.part) {
                        this.emit('part', this._part);
                    } else {
                        this._ignore();
                    }
                    if (!this._isPreamble) {
                        this._inHeader = true;
                    }
                }
                if (t && r < A && !this._ignoreData) {
                    if (this._isPreamble || !this._inHeader) {
                        if (i) {
                            l = this._part.push(i);
                        }
                        l = this._part.push(t.slice(r, A));
                        if (!l) {
                            this._pause = true;
                        }
                    } else if (!this._isPreamble && this._inHeader) {
                        if (i) {
                            this._hparser.push(i);
                        }
                        d = this._hparser.push(t.slice(r, A));
                        if (!this._inHeader && d !== undefined && d < A) {
                            this._oninfo(false, t, r + d, A);
                        }
                    }
                }
                if (e) {
                    this._hparser.reset();
                    if (this._isPreamble) {
                        this._isPreamble = false;
                    } else {
                        if (r !== A) {
                            ++this._parts;
                            this._part.on('end', function () {
                                if (--s._parts === 0) {
                                    if (s._finished) {
                                        s._realFinish = true;
                                        s.emit('finish');
                                        s._realFinish = false;
                                    } else {
                                        s._unpause();
                                    }
                                }
                            });
                        }
                    }
                    this._part.push(null);
                    this._part = undefined;
                    this._ignoreData = false;
                    this._justMatched = true;
                    this._dashes = 0;
                }
            };
            Dicer.prototype._unpause = function () {
                if (!this._pause) {
                    return;
                }
                this._pause = false;
                if (this._cb) {
                    const e = this._cb;
                    this._cb = undefined;
                    e();
                }
            };
            e.exports = Dicer;
        },
        2032: (e, t, r) => {
            'use strict';
            const A = r(5673).EventEmitter;
            const i = r(7261).inherits;
            const s = r(1467);
            const a = r(1142);
            const o = Buffer.from('\r\n\r\n');
            const n = /\r\n/g;
            const p = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
            function HeaderParser(e) {
                A.call(this);
                e = e || {};
                const t = this;
                this.nread = 0;
                this.maxed = false;
                this.npairs = 0;
                this.maxHeaderPairs = s(e, 'maxHeaderPairs', 2e3);
                this.maxHeaderSize = s(e, 'maxHeaderSize', 80 * 1024);
                this.buffer = '';
                this.header = {};
                this.finished = false;
                this.ss = new a(o);
                this.ss.on('info', function (e, r, A, i) {
                    if (r && !t.maxed) {
                        if (t.nread + i - A >= t.maxHeaderSize) {
                            i = t.maxHeaderSize - t.nread + A;
                            t.nread = t.maxHeaderSize;
                            t.maxed = true;
                        } else {
                            t.nread += i - A;
                        }
                        t.buffer += r.toString('binary', A, i);
                    }
                    if (e) {
                        t._finish();
                    }
                });
            }
            i(HeaderParser, A);
            HeaderParser.prototype.push = function (e) {
                const t = this.ss.push(e);
                if (this.finished) {
                    return t;
                }
            };
            HeaderParser.prototype.reset = function () {
                this.finished = false;
                this.buffer = '';
                this.header = {};
                this.ss.reset();
            };
            HeaderParser.prototype._finish = function () {
                if (this.buffer) {
                    this._parseHeader();
                }
                this.ss.matches = this.ss.maxMatches;
                const e = this.header;
                this.header = {};
                this.buffer = '';
                this.finished = true;
                this.nread = this.npairs = 0;
                this.maxed = false;
                this.emit('header', e);
            };
            HeaderParser.prototype._parseHeader = function () {
                if (this.npairs === this.maxHeaderPairs) {
                    return;
                }
                const e = this.buffer.split(n);
                const t = e.length;
                let r, A;
                for (var i = 0; i < t; ++i) {
                    if (e[i].length === 0) {
                        continue;
                    }
                    if (e[i][0] === '\t' || e[i][0] === ' ') {
                        if (A) {
                            this.header[A][this.header[A].length - 1] += e[i];
                            continue;
                        }
                    }
                    const t = e[i].indexOf(':');
                    if (t === -1 || t === 0) {
                        return;
                    }
                    r = p.exec(e[i]);
                    A = r[1].toLowerCase();
                    this.header[A] = this.header[A] || [];
                    this.header[A].push(r[2] || '');
                    if (++this.npairs === this.maxHeaderPairs) {
                        break;
                    }
                }
            };
            e.exports = HeaderParser;
        },
        1620: (e, t, r) => {
            'use strict';
            const A = r(7261).inherits;
            const i = r(4492).Readable;
            function PartStream(e) {
                i.call(this, e);
            }
            A(PartStream, i);
            PartStream.prototype._read = function (e) {};
            e.exports = PartStream;
        },
        1142: (e, t, r) => {
            'use strict';
            const A = r(5673).EventEmitter;
            const i = r(7261).inherits;
            function SBMH(e) {
                if (typeof e === 'string') {
                    e = Buffer.from(e);
                }
                if (!Buffer.isBuffer(e)) {
                    throw new TypeError('The needle has to be a String or a Buffer.');
                }
                const t = e.length;
                if (t === 0) {
                    throw new Error('The needle cannot be an empty String/Buffer.');
                }
                if (t > 256) {
                    throw new Error('The needle cannot have a length bigger than 256.');
                }
                this.maxMatches = Infinity;
                this.matches = 0;
                this._occ = new Array(256).fill(t);
                this._lookbehind_size = 0;
                this._needle = e;
                this._bufpos = 0;
                this._lookbehind = Buffer.alloc(t);
                for (var r = 0; r < t - 1; ++r) {
                    this._occ[e[r]] = t - 1 - r;
                }
            }
            i(SBMH, A);
            SBMH.prototype.reset = function () {
                this._lookbehind_size = 0;
                this.matches = 0;
                this._bufpos = 0;
            };
            SBMH.prototype.push = function (e, t) {
                if (!Buffer.isBuffer(e)) {
                    e = Buffer.from(e, 'binary');
                }
                const r = e.length;
                this._bufpos = t || 0;
                let A;
                while (A !== r && this.matches < this.maxMatches) {
                    A = this._sbmh_feed(e);
                }
                return A;
            };
            SBMH.prototype._sbmh_feed = function (e) {
                const t = e.length;
                const r = this._needle;
                const A = r.length;
                const i = r[A - 1];
                let s = -this._lookbehind_size;
                let a;
                if (s < 0) {
                    while (s < 0 && s <= t - A) {
                        a = this._sbmh_lookup_char(e, s + A - 1);
                        if (a === i && this._sbmh_memcmp(e, s, A - 1)) {
                            this._lookbehind_size = 0;
                            ++this.matches;
                            this.emit('info', true);
                            return (this._bufpos = s + A);
                        }
                        s += this._occ[a];
                    }
                    if (s < 0) {
                        while (s < 0 && !this._sbmh_memcmp(e, s, t - s)) {
                            ++s;
                        }
                    }
                    if (s >= 0) {
                        this.emit('info', false, this._lookbehind, 0, this._lookbehind_size);
                        this._lookbehind_size = 0;
                    } else {
                        const r = this._lookbehind_size + s;
                        if (r > 0) {
                            this.emit('info', false, this._lookbehind, 0, r);
                        }
                        this._lookbehind.copy(this._lookbehind, 0, r, this._lookbehind_size - r);
                        this._lookbehind_size -= r;
                        e.copy(this._lookbehind, this._lookbehind_size);
                        this._lookbehind_size += t;
                        this._bufpos = t;
                        return t;
                    }
                }
                s += (s >= 0) * this._bufpos;
                if (e.indexOf(r, s) !== -1) {
                    s = e.indexOf(r, s);
                    ++this.matches;
                    if (s > 0) {
                        this.emit('info', true, e, this._bufpos, s);
                    } else {
                        this.emit('info', true);
                    }
                    return (this._bufpos = s + A);
                } else {
                    s = t - A;
                }
                while (
                    s < t &&
                    (e[s] !== r[0] || Buffer.compare(e.subarray(s, s + t - s), r.subarray(0, t - s)) !== 0)
                ) {
                    ++s;
                }
                if (s < t) {
                    e.copy(this._lookbehind, 0, s, s + (t - s));
                    this._lookbehind_size = t - s;
                }
                if (s > 0) {
                    this.emit('info', false, e, this._bufpos, s < t ? s : t);
                }
                this._bufpos = t;
                return t;
            };
            SBMH.prototype._sbmh_lookup_char = function (e, t) {
                return t < 0 ? this._lookbehind[this._lookbehind_size + t] : e[t];
            };
            SBMH.prototype._sbmh_memcmp = function (e, t, r) {
                for (var A = 0; A < r; ++A) {
                    if (this._sbmh_lookup_char(e, t + A) !== this._needle[A]) {
                        return false;
                    }
                }
                return true;
            };
            e.exports = SBMH;
        },
        727: (e, t, r) => {
            'use strict';
            const A = r(4492).Writable;
            const {inherits: i} = r(7261);
            const s = r(2960);
            const a = r(2183);
            const o = r(8306);
            const n = r(1854);
            function Busboy(e) {
                if (!(this instanceof Busboy)) {
                    return new Busboy(e);
                }
                if (typeof e !== 'object') {
                    throw new TypeError('Busboy expected an options-Object.');
                }
                if (typeof e.headers !== 'object') {
                    throw new TypeError('Busboy expected an options-Object with headers-attribute.');
                }
                if (typeof e.headers['content-type'] !== 'string') {
                    throw new TypeError('Missing Content-Type-header.');
                }
                const {headers: t, ...r} = e;
                this.opts = {autoDestroy: false, ...r};
                A.call(this, this.opts);
                this._done = false;
                this._parser = this.getParserByHeaders(t);
                this._finished = false;
            }
            i(Busboy, A);
            Busboy.prototype.emit = function (e) {
                if (e === 'finish') {
                    if (!this._done) {
                        this._parser?.end();
                        return;
                    } else if (this._finished) {
                        return;
                    }
                    this._finished = true;
                }
                A.prototype.emit.apply(this, arguments);
            };
            Busboy.prototype.getParserByHeaders = function (e) {
                const t = n(e['content-type']);
                const r = {
                    defCharset: this.opts.defCharset,
                    fileHwm: this.opts.fileHwm,
                    headers: e,
                    highWaterMark: this.opts.highWaterMark,
                    isPartAFile: this.opts.isPartAFile,
                    limits: this.opts.limits,
                    parsedConType: t,
                    preservePath: this.opts.preservePath,
                };
                if (a.detect.test(t[0])) {
                    return new a(this, r);
                }
                if (o.detect.test(t[0])) {
                    return new o(this, r);
                }
                throw new Error('Unsupported Content-Type.');
            };
            Busboy.prototype._write = function (e, t, r) {
                this._parser.write(e, r);
            };
            e.exports = Busboy;
            e.exports['default'] = Busboy;
            e.exports.Busboy = Busboy;
            e.exports.Dicer = s;
        },
        2183: (e, t, r) => {
            'use strict';
            const {Readable: A} = r(4492);
            const {inherits: i} = r(7261);
            const s = r(2960);
            const a = r(1854);
            const o = r(4619);
            const n = r(8647);
            const p = r(1467);
            const d = /^boundary$/i;
            const l = /^form-data$/i;
            const u = /^charset$/i;
            const c = /^filename$/i;
            const g = /^name$/i;
            Multipart.detect = /^multipart\/form-data/i;
            function Multipart(e, t) {
                let r;
                let A;
                const i = this;
                let m;
                const h = t.limits;
                const C = t.isPartAFile || ((e, t, r) => t === 'application/octet-stream' || r !== undefined);
                const Q = t.parsedConType || [];
                const B = t.defCharset || 'utf8';
                const I = t.preservePath;
                const y = {highWaterMark: t.fileHwm};
                for (r = 0, A = Q.length; r < A; ++r) {
                    if (Array.isArray(Q[r]) && d.test(Q[r][0])) {
                        m = Q[r][1];
                        break;
                    }
                }
                function checkFinished() {
                    if (T === 0 && L && !e._done) {
                        L = false;
                        i.end();
                    }
                }
                if (typeof m !== 'string') {
                    throw new Error('Multipart: Boundary not found');
                }
                const w = p(h, 'fieldSize', 1 * 1024 * 1024);
                const b = p(h, 'fileSize', Infinity);
                const v = p(h, 'files', Infinity);
                const D = p(h, 'fields', Infinity);
                const R = p(h, 'parts', Infinity);
                const k = p(h, 'headerPairs', 2e3);
                const S = p(h, 'headerSize', 80 * 1024);
                let N = 0;
                let _ = 0;
                let T = 0;
                let q;
                let U;
                let L = false;
                this._needDrain = false;
                this._pause = false;
                this._cb = undefined;
                this._nparts = 0;
                this._boy = e;
                const M = {
                    boundary: m,
                    maxHeaderPairs: k,
                    maxHeaderSize: S,
                    partHwm: y.highWaterMark,
                    highWaterMark: t.highWaterMark,
                };
                this.parser = new s(M);
                this.parser
                    .on('drain', function () {
                        i._needDrain = false;
                        if (i._cb && !i._pause) {
                            const e = i._cb;
                            i._cb = undefined;
                            e();
                        }
                    })
                    .on('part', function onPart(t) {
                        if (++i._nparts > R) {
                            i.parser.removeListener('part', onPart);
                            i.parser.on('part', skipPart);
                            e.hitPartsLimit = true;
                            e.emit('partsLimit');
                            return skipPart(t);
                        }
                        if (U) {
                            const e = U;
                            e.emit('end');
                            e.removeAllListeners('end');
                        }
                        t.on('header', function (s) {
                            let p;
                            let d;
                            let m;
                            let h;
                            let Q;
                            let R;
                            let k = 0;
                            if (s['content-type']) {
                                m = a(s['content-type'][0]);
                                if (m[0]) {
                                    p = m[0].toLowerCase();
                                    for (r = 0, A = m.length; r < A; ++r) {
                                        if (u.test(m[r][0])) {
                                            h = m[r][1].toLowerCase();
                                            break;
                                        }
                                    }
                                }
                            }
                            if (p === undefined) {
                                p = 'text/plain';
                            }
                            if (h === undefined) {
                                h = B;
                            }
                            if (s['content-disposition']) {
                                m = a(s['content-disposition'][0]);
                                if (!l.test(m[0])) {
                                    return skipPart(t);
                                }
                                for (r = 0, A = m.length; r < A; ++r) {
                                    if (g.test(m[r][0])) {
                                        d = m[r][1];
                                    } else if (c.test(m[r][0])) {
                                        R = m[r][1];
                                        if (!I) {
                                            R = n(R);
                                        }
                                    }
                                }
                            } else {
                                return skipPart(t);
                            }
                            if (s['content-transfer-encoding']) {
                                Q = s['content-transfer-encoding'][0].toLowerCase();
                            } else {
                                Q = '7bit';
                            }
                            let S, L;
                            if (C(d, p, R)) {
                                if (N === v) {
                                    if (!e.hitFilesLimit) {
                                        e.hitFilesLimit = true;
                                        e.emit('filesLimit');
                                    }
                                    return skipPart(t);
                                }
                                ++N;
                                if (!e._events.file) {
                                    i.parser._ignore();
                                    return;
                                }
                                ++T;
                                const r = new FileStream(y);
                                q = r;
                                r.on('end', function () {
                                    --T;
                                    i._pause = false;
                                    checkFinished();
                                    if (i._cb && !i._needDrain) {
                                        const e = i._cb;
                                        i._cb = undefined;
                                        e();
                                    }
                                });
                                r._read = function (e) {
                                    if (!i._pause) {
                                        return;
                                    }
                                    i._pause = false;
                                    if (i._cb && !i._needDrain) {
                                        const e = i._cb;
                                        i._cb = undefined;
                                        e();
                                    }
                                };
                                e.emit('file', d, r, R, Q, p);
                                S = function (e) {
                                    if ((k += e.length) > b) {
                                        const A = b - k + e.length;
                                        if (A > 0) {
                                            r.push(e.slice(0, A));
                                        }
                                        r.truncated = true;
                                        r.bytesRead = b;
                                        t.removeAllListeners('data');
                                        r.emit('limit');
                                        return;
                                    } else if (!r.push(e)) {
                                        i._pause = true;
                                    }
                                    r.bytesRead = k;
                                };
                                L = function () {
                                    q = undefined;
                                    r.push(null);
                                };
                            } else {
                                if (_ === D) {
                                    if (!e.hitFieldsLimit) {
                                        e.hitFieldsLimit = true;
                                        e.emit('fieldsLimit');
                                    }
                                    return skipPart(t);
                                }
                                ++_;
                                ++T;
                                let r = '';
                                let A = false;
                                U = t;
                                S = function (e) {
                                    if ((k += e.length) > w) {
                                        const i = w - (k - e.length);
                                        r += e.toString('binary', 0, i);
                                        A = true;
                                        t.removeAllListeners('data');
                                    } else {
                                        r += e.toString('binary');
                                    }
                                };
                                L = function () {
                                    U = undefined;
                                    if (r.length) {
                                        r = o(r, 'binary', h);
                                    }
                                    e.emit('field', d, r, false, A, Q, p);
                                    --T;
                                    checkFinished();
                                };
                            }
                            t._readableState.sync = false;
                            t.on('data', S);
                            t.on('end', L);
                        }).on('error', function (e) {
                            if (q) {
                                q.emit('error', e);
                            }
                        });
                    })
                    .on('error', function (t) {
                        e.emit('error', t);
                    })
                    .on('finish', function () {
                        L = true;
                        checkFinished();
                    });
            }
            Multipart.prototype.write = function (e, t) {
                const r = this.parser.write(e);
                if (r && !this._pause) {
                    t();
                } else {
                    this._needDrain = !r;
                    this._cb = t;
                }
            };
            Multipart.prototype.end = function () {
                const e = this;
                if (e.parser.writable) {
                    e.parser.end();
                } else if (!e._boy._done) {
                    process.nextTick(function () {
                        e._boy._done = true;
                        e._boy.emit('finish');
                    });
                }
            };
            function skipPart(e) {
                e.resume();
            }
            function FileStream(e) {
                A.call(this, e);
                this.bytesRead = 0;
                this.truncated = false;
            }
            i(FileStream, A);
            FileStream.prototype._read = function (e) {};
            e.exports = Multipart;
        },
        8306: (e, t, r) => {
            'use strict';
            const A = r(7100);
            const i = r(4619);
            const s = r(1467);
            const a = /^charset$/i;
            UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
            function UrlEncoded(e, t) {
                const r = t.limits;
                const i = t.parsedConType;
                this.boy = e;
                this.fieldSizeLimit = s(r, 'fieldSize', 1 * 1024 * 1024);
                this.fieldNameSizeLimit = s(r, 'fieldNameSize', 100);
                this.fieldsLimit = s(r, 'fields', Infinity);
                let o;
                for (var n = 0, p = i.length; n < p; ++n) {
                    if (Array.isArray(i[n]) && a.test(i[n][0])) {
                        o = i[n][1].toLowerCase();
                        break;
                    }
                }
                if (o === undefined) {
                    o = t.defCharset || 'utf8';
                }
                this.decoder = new A();
                this.charset = o;
                this._fields = 0;
                this._state = 'key';
                this._checkingBytes = true;
                this._bytesKey = 0;
                this._bytesVal = 0;
                this._key = '';
                this._val = '';
                this._keyTrunc = false;
                this._valTrunc = false;
                this._hitLimit = false;
            }
            UrlEncoded.prototype.write = function (e, t) {
                if (this._fields === this.fieldsLimit) {
                    if (!this.boy.hitFieldsLimit) {
                        this.boy.hitFieldsLimit = true;
                        this.boy.emit('fieldsLimit');
                    }
                    return t();
                }
                let r;
                let A;
                let s;
                let a = 0;
                const o = e.length;
                while (a < o) {
                    if (this._state === 'key') {
                        r = A = undefined;
                        for (s = a; s < o; ++s) {
                            if (!this._checkingBytes) {
                                ++a;
                            }
                            if (e[s] === 61) {
                                r = s;
                                break;
                            } else if (e[s] === 38) {
                                A = s;
                                break;
                            }
                            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
                                this._hitLimit = true;
                                break;
                            } else if (this._checkingBytes) {
                                ++this._bytesKey;
                            }
                        }
                        if (r !== undefined) {
                            if (r > a) {
                                this._key += this.decoder.write(e.toString('binary', a, r));
                            }
                            this._state = 'val';
                            this._hitLimit = false;
                            this._checkingBytes = true;
                            this._val = '';
                            this._bytesVal = 0;
                            this._valTrunc = false;
                            this.decoder.reset();
                            a = r + 1;
                        } else if (A !== undefined) {
                            ++this._fields;
                            let r;
                            const s = this._keyTrunc;
                            if (A > a) {
                                r = this._key += this.decoder.write(e.toString('binary', a, A));
                            } else {
                                r = this._key;
                            }
                            this._hitLimit = false;
                            this._checkingBytes = true;
                            this._key = '';
                            this._bytesKey = 0;
                            this._keyTrunc = false;
                            this.decoder.reset();
                            if (r.length) {
                                this.boy.emit('field', i(r, 'binary', this.charset), '', s, false);
                            }
                            a = A + 1;
                            if (this._fields === this.fieldsLimit) {
                                return t();
                            }
                        } else if (this._hitLimit) {
                            if (s > a) {
                                this._key += this.decoder.write(e.toString('binary', a, s));
                            }
                            a = s;
                            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
                                this._checkingBytes = false;
                                this._keyTrunc = true;
                            }
                        } else {
                            if (a < o) {
                                this._key += this.decoder.write(e.toString('binary', a));
                            }
                            a = o;
                        }
                    } else {
                        A = undefined;
                        for (s = a; s < o; ++s) {
                            if (!this._checkingBytes) {
                                ++a;
                            }
                            if (e[s] === 38) {
                                A = s;
                                break;
                            }
                            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
                                this._hitLimit = true;
                                break;
                            } else if (this._checkingBytes) {
                                ++this._bytesVal;
                            }
                        }
                        if (A !== undefined) {
                            ++this._fields;
                            if (A > a) {
                                this._val += this.decoder.write(e.toString('binary', a, A));
                            }
                            this.boy.emit(
                                'field',
                                i(this._key, 'binary', this.charset),
                                i(this._val, 'binary', this.charset),
                                this._keyTrunc,
                                this._valTrunc,
                            );
                            this._state = 'key';
                            this._hitLimit = false;
                            this._checkingBytes = true;
                            this._key = '';
                            this._bytesKey = 0;
                            this._keyTrunc = false;
                            this.decoder.reset();
                            a = A + 1;
                            if (this._fields === this.fieldsLimit) {
                                return t();
                            }
                        } else if (this._hitLimit) {
                            if (s > a) {
                                this._val += this.decoder.write(e.toString('binary', a, s));
                            }
                            a = s;
                            if (
                                (this._val === '' && this.fieldSizeLimit === 0) ||
                                (this._bytesVal = this._val.length) === this.fieldSizeLimit
                            ) {
                                this._checkingBytes = false;
                                this._valTrunc = true;
                            }
                        } else {
                            if (a < o) {
                                this._val += this.decoder.write(e.toString('binary', a));
                            }
                            a = o;
                        }
                    }
                }
                t();
            };
            UrlEncoded.prototype.end = function () {
                if (this.boy._done) {
                    return;
                }
                if (this._state === 'key' && this._key.length > 0) {
                    this.boy.emit('field', i(this._key, 'binary', this.charset), '', this._keyTrunc, false);
                } else if (this._state === 'val') {
                    this.boy.emit(
                        'field',
                        i(this._key, 'binary', this.charset),
                        i(this._val, 'binary', this.charset),
                        this._keyTrunc,
                        this._valTrunc,
                    );
                }
                this.boy._done = true;
                this.boy.emit('finish');
            };
            e.exports = UrlEncoded;
        },
        7100: (e) => {
            'use strict';
            const t = /\+/g;
            const r = [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ];
            function Decoder() {
                this.buffer = undefined;
            }
            Decoder.prototype.write = function (e) {
                e = e.replace(t, ' ');
                let A = '';
                let i = 0;
                let s = 0;
                const a = e.length;
                for (; i < a; ++i) {
                    if (this.buffer !== undefined) {
                        if (!r[e.charCodeAt(i)]) {
                            A += '%' + this.buffer;
                            this.buffer = undefined;
                            --i;
                        } else {
                            this.buffer += e[i];
                            ++s;
                            if (this.buffer.length === 2) {
                                A += String.fromCharCode(parseInt(this.buffer, 16));
                                this.buffer = undefined;
                            }
                        }
                    } else if (e[i] === '%') {
                        if (i > s) {
                            A += e.substring(s, i);
                            s = i;
                        }
                        this.buffer = '';
                        ++s;
                    }
                }
                if (s < a && this.buffer === undefined) {
                    A += e.substring(s);
                }
                return A;
            };
            Decoder.prototype.reset = function () {
                this.buffer = undefined;
            };
            e.exports = Decoder;
        },
        8647: (e) => {
            'use strict';
            e.exports = function basename(e) {
                if (typeof e !== 'string') {
                    return '';
                }
                for (var t = e.length - 1; t >= 0; --t) {
                    switch (e.charCodeAt(t)) {
                        case 47:
                        case 92:
                            e = e.slice(t + 1);
                            return e === '..' || e === '.' ? '' : e;
                    }
                }
                return e === '..' || e === '.' ? '' : e;
            };
        },
        4619: function (e) {
            'use strict';
            const t = new TextDecoder('utf-8');
            const r = new Map([
                ['utf-8', t],
                ['utf8', t],
            ]);
            function getDecoder(e) {
                let t;
                while (true) {
                    switch (e) {
                        case 'utf-8':
                        case 'utf8':
                            return A.utf8;
                        case 'latin1':
                        case 'ascii':
                        case 'us-ascii':
                        case 'iso-8859-1':
                        case 'iso8859-1':
                        case 'iso88591':
                        case 'iso_8859-1':
                        case 'windows-1252':
                        case 'iso_8859-1:1987':
                        case 'cp1252':
                        case 'x-cp1252':
                            return A.latin1;
                        case 'utf16le':
                        case 'utf-16le':
                        case 'ucs2':
                        case 'ucs-2':
                            return A.utf16le;
                        case 'base64':
                            return A.base64;
                        default:
                            if (t === undefined) {
                                t = true;
                                e = e.toLowerCase();
                                continue;
                            }
                            return A.other.bind(e);
                    }
                }
            }
            const A = {
                utf8: (e, t) => {
                    if (e.length === 0) {
                        return '';
                    }
                    if (typeof e === 'string') {
                        e = Buffer.from(e, t);
                    }
                    return e.utf8Slice(0, e.length);
                },
                latin1: (e, t) => {
                    if (e.length === 0) {
                        return '';
                    }
                    if (typeof e === 'string') {
                        return e;
                    }
                    return e.latin1Slice(0, e.length);
                },
                utf16le: (e, t) => {
                    if (e.length === 0) {
                        return '';
                    }
                    if (typeof e === 'string') {
                        e = Buffer.from(e, t);
                    }
                    return e.ucs2Slice(0, e.length);
                },
                base64: (e, t) => {
                    if (e.length === 0) {
                        return '';
                    }
                    if (typeof e === 'string') {
                        e = Buffer.from(e, t);
                    }
                    return e.base64Slice(0, e.length);
                },
                other: (e, t) => {
                    if (e.length === 0) {
                        return '';
                    }
                    if (typeof e === 'string') {
                        e = Buffer.from(e, t);
                    }
                    if (r.has(this.toString())) {
                        try {
                            return r.get(this).decode(e);
                        } catch (e) {}
                    }
                    return typeof e === 'string' ? e : e.toString();
                },
            };
            function decodeText(e, t, r) {
                if (e) {
                    return getDecoder(r)(e, t);
                }
                return e;
            }
            e.exports = decodeText;
        },
        1467: (e) => {
            'use strict';
            e.exports = function getLimit(e, t, r) {
                if (!e || e[t] === undefined || e[t] === null) {
                    return r;
                }
                if (typeof e[t] !== 'number' || isNaN(e[t])) {
                    throw new TypeError('Limit ' + t + ' is not a valid number');
                }
                return e[t];
            };
        },
        1854: (e, t, r) => {
            'use strict';
            const A = r(4619);
            const i = /%[a-fA-F0-9][a-fA-F0-9]/g;
            const s = {
                '%00': '\0',
                '%01': '',
                '%02': '',
                '%03': '',
                '%04': '',
                '%05': '',
                '%06': '',
                '%07': '',
                '%08': '\b',
                '%09': '\t',
                '%0a': '\n',
                '%0A': '\n',
                '%0b': '\v',
                '%0B': '\v',
                '%0c': '\f',
                '%0C': '\f',
                '%0d': '\r',
                '%0D': '\r',
                '%0e': '',
                '%0E': '',
                '%0f': '',
                '%0F': '',
                '%10': '',
                '%11': '',
                '%12': '',
                '%13': '',
                '%14': '',
                '%15': '',
                '%16': '',
                '%17': '',
                '%18': '',
                '%19': '',
                '%1a': '',
                '%1A': '',
                '%1b': '',
                '%1B': '',
                '%1c': '',
                '%1C': '',
                '%1d': '',
                '%1D': '',
                '%1e': '',
                '%1E': '',
                '%1f': '',
                '%1F': '',
                '%20': ' ',
                '%21': '!',
                '%22': '"',
                '%23': '#',
                '%24': '$',
                '%25': '%',
                '%26': '&',
                '%27': "'",
                '%28': '(',
                '%29': ')',
                '%2a': '*',
                '%2A': '*',
                '%2b': '+',
                '%2B': '+',
                '%2c': ',',
                '%2C': ',',
                '%2d': '-',
                '%2D': '-',
                '%2e': '.',
                '%2E': '.',
                '%2f': '/',
                '%2F': '/',
                '%30': '0',
                '%31': '1',
                '%32': '2',
                '%33': '3',
                '%34': '4',
                '%35': '5',
                '%36': '6',
                '%37': '7',
                '%38': '8',
                '%39': '9',
                '%3a': ':',
                '%3A': ':',
                '%3b': ';',
                '%3B': ';',
                '%3c': '<',
                '%3C': '<',
                '%3d': '=',
                '%3D': '=',
                '%3e': '>',
                '%3E': '>',
                '%3f': '?',
                '%3F': '?',
                '%40': '@',
                '%41': 'A',
                '%42': 'B',
                '%43': 'C',
                '%44': 'D',
                '%45': 'E',
                '%46': 'F',
                '%47': 'G',
                '%48': 'H',
                '%49': 'I',
                '%4a': 'J',
                '%4A': 'J',
                '%4b': 'K',
                '%4B': 'K',
                '%4c': 'L',
                '%4C': 'L',
                '%4d': 'M',
                '%4D': 'M',
                '%4e': 'N',
                '%4E': 'N',
                '%4f': 'O',
                '%4F': 'O',
                '%50': 'P',
                '%51': 'Q',
                '%52': 'R',
                '%53': 'S',
                '%54': 'T',
                '%55': 'U',
                '%56': 'V',
                '%57': 'W',
                '%58': 'X',
                '%59': 'Y',
                '%5a': 'Z',
                '%5A': 'Z',
                '%5b': '[',
                '%5B': '[',
                '%5c': '\\',
                '%5C': '\\',
                '%5d': ']',
                '%5D': ']',
                '%5e': '^',
                '%5E': '^',
                '%5f': '_',
                '%5F': '_',
                '%60': '`',
                '%61': 'a',
                '%62': 'b',
                '%63': 'c',
                '%64': 'd',
                '%65': 'e',
                '%66': 'f',
                '%67': 'g',
                '%68': 'h',
                '%69': 'i',
                '%6a': 'j',
                '%6A': 'j',
                '%6b': 'k',
                '%6B': 'k',
                '%6c': 'l',
                '%6C': 'l',
                '%6d': 'm',
                '%6D': 'm',
                '%6e': 'n',
                '%6E': 'n',
                '%6f': 'o',
                '%6F': 'o',
                '%70': 'p',
                '%71': 'q',
                '%72': 'r',
                '%73': 's',
                '%74': 't',
                '%75': 'u',
                '%76': 'v',
                '%77': 'w',
                '%78': 'x',
                '%79': 'y',
                '%7a': 'z',
                '%7A': 'z',
                '%7b': '{',
                '%7B': '{',
                '%7c': '|',
                '%7C': '|',
                '%7d': '}',
                '%7D': '}',
                '%7e': '~',
                '%7E': '~',
                '%7f': '',
                '%7F': '',
                '%80': '',
                '%81': '',
                '%82': '',
                '%83': '',
                '%84': '',
                '%85': '',
                '%86': '',
                '%87': '',
                '%88': '',
                '%89': '',
                '%8a': '',
                '%8A': '',
                '%8b': '',
                '%8B': '',
                '%8c': '',
                '%8C': '',
                '%8d': '',
                '%8D': '',
                '%8e': '',
                '%8E': '',
                '%8f': '',
                '%8F': '',
                '%90': '',
                '%91': '',
                '%92': '',
                '%93': '',
                '%94': '',
                '%95': '',
                '%96': '',
                '%97': '',
                '%98': '',
                '%99': '',
                '%9a': '',
                '%9A': '',
                '%9b': '',
                '%9B': '',
                '%9c': '',
                '%9C': '',
                '%9d': '',
                '%9D': '',
                '%9e': '',
                '%9E': '',
                '%9f': '',
                '%9F': '',
                '%a0': ' ',
                '%A0': ' ',
                '%a1': '¡',
                '%A1': '¡',
                '%a2': '¢',
                '%A2': '¢',
                '%a3': '£',
                '%A3': '£',
                '%a4': '¤',
                '%A4': '¤',
                '%a5': '¥',
                '%A5': '¥',
                '%a6': '¦',
                '%A6': '¦',
                '%a7': '§',
                '%A7': '§',
                '%a8': '¨',
                '%A8': '¨',
                '%a9': '©',
                '%A9': '©',
                '%aa': 'ª',
                '%Aa': 'ª',
                '%aA': 'ª',
                '%AA': 'ª',
                '%ab': '«',
                '%Ab': '«',
                '%aB': '«',
                '%AB': '«',
                '%ac': '¬',
                '%Ac': '¬',
                '%aC': '¬',
                '%AC': '¬',
                '%ad': '­',
                '%Ad': '­',
                '%aD': '­',
                '%AD': '­',
                '%ae': '®',
                '%Ae': '®',
                '%aE': '®',
                '%AE': '®',
                '%af': '¯',
                '%Af': '¯',
                '%aF': '¯',
                '%AF': '¯',
                '%b0': '°',
                '%B0': '°',
                '%b1': '±',
                '%B1': '±',
                '%b2': '²',
                '%B2': '²',
                '%b3': '³',
                '%B3': '³',
                '%b4': '´',
                '%B4': '´',
                '%b5': 'µ',
                '%B5': 'µ',
                '%b6': '¶',
                '%B6': '¶',
                '%b7': '·',
                '%B7': '·',
                '%b8': '¸',
                '%B8': '¸',
                '%b9': '¹',
                '%B9': '¹',
                '%ba': 'º',
                '%Ba': 'º',
                '%bA': 'º',
                '%BA': 'º',
                '%bb': '»',
                '%Bb': '»',
                '%bB': '»',
                '%BB': '»',
                '%bc': '¼',
                '%Bc': '¼',
                '%bC': '¼',
                '%BC': '¼',
                '%bd': '½',
                '%Bd': '½',
                '%bD': '½',
                '%BD': '½',
                '%be': '¾',
                '%Be': '¾',
                '%bE': '¾',
                '%BE': '¾',
                '%bf': '¿',
                '%Bf': '¿',
                '%bF': '¿',
                '%BF': '¿',
                '%c0': 'À',
                '%C0': 'À',
                '%c1': 'Á',
                '%C1': 'Á',
                '%c2': 'Â',
                '%C2': 'Â',
                '%c3': 'Ã',
                '%C3': 'Ã',
                '%c4': 'Ä',
                '%C4': 'Ä',
                '%c5': 'Å',
                '%C5': 'Å',
                '%c6': 'Æ',
                '%C6': 'Æ',
                '%c7': 'Ç',
                '%C7': 'Ç',
                '%c8': 'È',
                '%C8': 'È',
                '%c9': 'É',
                '%C9': 'É',
                '%ca': 'Ê',
                '%Ca': 'Ê',
                '%cA': 'Ê',
                '%CA': 'Ê',
                '%cb': 'Ë',
                '%Cb': 'Ë',
                '%cB': 'Ë',
                '%CB': 'Ë',
                '%cc': 'Ì',
                '%Cc': 'Ì',
                '%cC': 'Ì',
                '%CC': 'Ì',
                '%cd': 'Í',
                '%Cd': 'Í',
                '%cD': 'Í',
                '%CD': 'Í',
                '%ce': 'Î',
                '%Ce': 'Î',
                '%cE': 'Î',
                '%CE': 'Î',
                '%cf': 'Ï',
                '%Cf': 'Ï',
                '%cF': 'Ï',
                '%CF': 'Ï',
                '%d0': 'Ð',
                '%D0': 'Ð',
                '%d1': 'Ñ',
                '%D1': 'Ñ',
                '%d2': 'Ò',
                '%D2': 'Ò',
                '%d3': 'Ó',
                '%D3': 'Ó',
                '%d4': 'Ô',
                '%D4': 'Ô',
                '%d5': 'Õ',
                '%D5': 'Õ',
                '%d6': 'Ö',
                '%D6': 'Ö',
                '%d7': '×',
                '%D7': '×',
                '%d8': 'Ø',
                '%D8': 'Ø',
                '%d9': 'Ù',
                '%D9': 'Ù',
                '%da': 'Ú',
                '%Da': 'Ú',
                '%dA': 'Ú',
                '%DA': 'Ú',
                '%db': 'Û',
                '%Db': 'Û',
                '%dB': 'Û',
                '%DB': 'Û',
                '%dc': 'Ü',
                '%Dc': 'Ü',
                '%dC': 'Ü',
                '%DC': 'Ü',
                '%dd': 'Ý',
                '%Dd': 'Ý',
                '%dD': 'Ý',
                '%DD': 'Ý',
                '%de': 'Þ',
                '%De': 'Þ',
                '%dE': 'Þ',
                '%DE': 'Þ',
                '%df': 'ß',
                '%Df': 'ß',
                '%dF': 'ß',
                '%DF': 'ß',
                '%e0': 'à',
                '%E0': 'à',
                '%e1': 'á',
                '%E1': 'á',
                '%e2': 'â',
                '%E2': 'â',
                '%e3': 'ã',
                '%E3': 'ã',
                '%e4': 'ä',
                '%E4': 'ä',
                '%e5': 'å',
                '%E5': 'å',
                '%e6': 'æ',
                '%E6': 'æ',
                '%e7': 'ç',
                '%E7': 'ç',
                '%e8': 'è',
                '%E8': 'è',
                '%e9': 'é',
                '%E9': 'é',
                '%ea': 'ê',
                '%Ea': 'ê',
                '%eA': 'ê',
                '%EA': 'ê',
                '%eb': 'ë',
                '%Eb': 'ë',
                '%eB': 'ë',
                '%EB': 'ë',
                '%ec': 'ì',
                '%Ec': 'ì',
                '%eC': 'ì',
                '%EC': 'ì',
                '%ed': 'í',
                '%Ed': 'í',
                '%eD': 'í',
                '%ED': 'í',
                '%ee': 'î',
                '%Ee': 'î',
                '%eE': 'î',
                '%EE': 'î',
                '%ef': 'ï',
                '%Ef': 'ï',
                '%eF': 'ï',
                '%EF': 'ï',
                '%f0': 'ð',
                '%F0': 'ð',
                '%f1': 'ñ',
                '%F1': 'ñ',
                '%f2': 'ò',
                '%F2': 'ò',
                '%f3': 'ó',
                '%F3': 'ó',
                '%f4': 'ô',
                '%F4': 'ô',
                '%f5': 'õ',
                '%F5': 'õ',
                '%f6': 'ö',
                '%F6': 'ö',
                '%f7': '÷',
                '%F7': '÷',
                '%f8': 'ø',
                '%F8': 'ø',
                '%f9': 'ù',
                '%F9': 'ù',
                '%fa': 'ú',
                '%Fa': 'ú',
                '%fA': 'ú',
                '%FA': 'ú',
                '%fb': 'û',
                '%Fb': 'û',
                '%fB': 'û',
                '%FB': 'û',
                '%fc': 'ü',
                '%Fc': 'ü',
                '%fC': 'ü',
                '%FC': 'ü',
                '%fd': 'ý',
                '%Fd': 'ý',
                '%fD': 'ý',
                '%FD': 'ý',
                '%fe': 'þ',
                '%Fe': 'þ',
                '%fE': 'þ',
                '%FE': 'þ',
                '%ff': 'ÿ',
                '%Ff': 'ÿ',
                '%fF': 'ÿ',
                '%FF': 'ÿ',
            };
            function encodedReplacer(e) {
                return s[e];
            }
            const a = 0;
            const o = 1;
            const n = 2;
            const p = 3;
            function parseParams(e) {
                const t = [];
                let r = a;
                let s = '';
                let d = false;
                let l = false;
                let u = 0;
                let c = '';
                const g = e.length;
                for (var m = 0; m < g; ++m) {
                    const g = e[m];
                    if (g === '\\' && d) {
                        if (l) {
                            l = false;
                        } else {
                            l = true;
                            continue;
                        }
                    } else if (g === '"') {
                        if (!l) {
                            if (d) {
                                d = false;
                                r = a;
                            } else {
                                d = true;
                            }
                            continue;
                        } else {
                            l = false;
                        }
                    } else {
                        if (l && d) {
                            c += '\\';
                        }
                        l = false;
                        if ((r === n || r === p) && g === "'") {
                            if (r === n) {
                                r = p;
                                s = c.substring(1);
                            } else {
                                r = o;
                            }
                            c = '';
                            continue;
                        } else if (r === a && (g === '*' || g === '=') && t.length) {
                            r = g === '*' ? n : o;
                            t[u] = [c, undefined];
                            c = '';
                            continue;
                        } else if (!d && g === ';') {
                            r = a;
                            if (s) {
                                if (c.length) {
                                    c = A(c.replace(i, encodedReplacer), 'binary', s);
                                }
                                s = '';
                            } else if (c.length) {
                                c = A(c, 'binary', 'utf8');
                            }
                            if (t[u] === undefined) {
                                t[u] = c;
                            } else {
                                t[u][1] = c;
                            }
                            c = '';
                            ++u;
                            continue;
                        } else if (!d && (g === ' ' || g === '\t')) {
                            continue;
                        }
                    }
                    c += g;
                }
                if (s && c.length) {
                    c = A(c.replace(i, encodedReplacer), 'binary', s);
                } else if (c) {
                    c = A(c, 'binary', 'utf8');
                }
                if (t[u] === undefined) {
                    if (c) {
                        t[u] = c;
                    }
                } else {
                    t[u][1] = c;
                }
                return t;
            }
            e.exports = parseParams;
        },
        1322: (e) => {
            'use strict';
            e.exports = JSON.parse(
                '{"name":"@octokit/rest","version":"16.43.1","publishConfig":{"access":"public"},"description":"GitHub REST API client for Node.js","keywords":["octokit","github","rest","api-client"],"author":"Gregor Martynus (https://github.com/gr2m)","contributors":[{"name":"Mike de Boer","email":"info@mikedeboer.nl"},{"name":"Fabian Jakobs","email":"fabian@c9.io"},{"name":"Joe Gallo","email":"joe@brassafrax.com"},{"name":"Gregor Martynus","url":"https://github.com/gr2m"}],"repository":"https://github.com/octokit/rest.js","dependencies":{"@octokit/auth-token":"^2.4.0","@octokit/plugin-paginate-rest":"^1.1.1","@octokit/plugin-request-log":"^1.0.0","@octokit/plugin-rest-endpoint-methods":"2.4.0","@octokit/request":"^5.2.0","@octokit/request-error":"^1.0.2","atob-lite":"^2.0.0","before-after-hook":"^2.0.0","btoa-lite":"^1.0.0","deprecation":"^2.0.0","lodash.get":"^4.4.2","lodash.set":"^4.3.2","lodash.uniq":"^4.5.0","octokit-pagination-methods":"^1.1.0","once":"^1.4.0","universal-user-agent":"^4.0.0"},"devDependencies":{"@gimenete/type-writer":"^0.1.3","@octokit/auth":"^1.1.1","@octokit/fixtures-server":"^5.0.6","@octokit/graphql":"^4.2.0","@types/node":"^13.1.0","bundlesize":"^0.18.0","chai":"^4.1.2","compression-webpack-plugin":"^3.1.0","cypress":"^3.0.0","glob":"^7.1.2","http-proxy-agent":"^4.0.0","lodash.camelcase":"^4.3.0","lodash.merge":"^4.6.1","lodash.upperfirst":"^4.3.1","lolex":"^5.1.2","mkdirp":"^1.0.0","mocha":"^7.0.1","mustache":"^4.0.0","nock":"^11.3.3","npm-run-all":"^4.1.2","nyc":"^15.0.0","prettier":"^1.14.2","proxy":"^1.0.0","semantic-release":"^17.0.0","sinon":"^8.0.0","sinon-chai":"^3.0.0","sort-keys":"^4.0.0","string-to-arraybuffer":"^1.0.0","string-to-jsdoc-comment":"^1.0.0","typescript":"^3.3.1","webpack":"^4.0.0","webpack-bundle-analyzer":"^3.0.0","webpack-cli":"^3.0.0"},"types":"index.d.ts","scripts":{"coverage":"nyc report --reporter=html && open coverage/index.html","lint":"prettier --check \'{lib,plugins,scripts,test}/**/*.{js,json,ts}\' \'docs/*.{js,json}\' \'docs/src/**/*\' index.js README.md package.json","lint:fix":"prettier --write \'{lib,plugins,scripts,test}/**/*.{js,json,ts}\' \'docs/*.{js,json}\' \'docs/src/**/*\' index.js README.md package.json","pretest":"npm run -s lint","test":"nyc mocha test/mocha-node-setup.js \\"test/*/**/*-test.js\\"","test:browser":"cypress run --browser chrome","build":"npm-run-all build:*","build:ts":"npm run -s update-endpoints:typescript","prebuild:browser":"mkdirp dist/","build:browser":"npm-run-all build:browser:*","build:browser:development":"webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-rest.js --profile --json > dist/bundle-stats.json","build:browser:production":"webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-rest.min.js --devtool source-map","generate-bundle-report":"webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html","update-endpoints":"npm-run-all update-endpoints:*","update-endpoints:fetch-json":"node scripts/update-endpoints/fetch-json","update-endpoints:typescript":"node scripts/update-endpoints/typescript","prevalidate:ts":"npm run -s build:ts","validate:ts":"tsc --target es6 --noImplicitAny index.d.ts","postvalidate:ts":"tsc --noEmit --target es6 test/typescript-validate.ts","start-fixtures-server":"octokit-fixtures-server"},"license":"MIT","files":["index.js","index.d.ts","lib","plugins"],"nyc":{"ignore":["test"]},"release":{"publish":["@semantic-release/npm",{"path":"@semantic-release/github","assets":["dist/*","!dist/*.map.gz"]}]},"bundlesize":[{"path":"./dist/octokit-rest.min.js.gz","maxSize":"33 kB"}]}',
            );
        },
        2020: (e) => {
            'use strict';
            e.exports = JSON.parse(
                '[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]',
            );
        },
    };
    var __webpack_module_cache__ = {};
    function __webpack_require__(e) {
        var t = __webpack_module_cache__[e];
        if (t !== undefined) {
            return t.exports;
        }
        var r = (__webpack_module_cache__[e] = {exports: {}});
        var A = true;
        try {
            __webpack_modules__[e].call(r.exports, r, r.exports, __webpack_require__);
            A = false;
        } finally {
            if (A) delete __webpack_module_cache__[e];
        }
        return r.exports;
    }
    (() => {
        __webpack_require__.r = (e) => {
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                Object.defineProperty(e, Symbol.toStringTag, {value: 'Module'});
            }
            Object.defineProperty(e, '__esModule', {value: true});
        };
    })();
    if (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + '/';
    var __webpack_exports__ = {};
    (() => {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        var e = __webpack_require__(2186);
        var t = __webpack_require__(5438);
        const r = 'autorebase:opt-in';
        const A = 'autorebase:non-rebaseable';
        class TestableEligiblePullRequestsRetriever {
            constructor(e) {
                this.openPullRequestsProvider = e;
            }
            async findEligiblePullRequests(t, r) {
                const A = await this.openPullRequestsProvider.openPullRequests(t, r);
                (0, e.info)(`Found ${A.length} open pull requests.`);
                const i = A.filter((e) => TestableEligiblePullRequestsRetriever.isEligible(e));
                (0, e.info)(`${i.length} pull requests are eligible.`);
                return i;
            }
            static isEligible(t) {
                if (!t.labels.includes(r)) {
                    (0, e.info)(`PR #${t.number} does not have the '${r}' label.`);
                    return false;
                }
                if (t.draft) {
                    (0, e.info)(`PR #${t.number} is a draft PR.`);
                    return false;
                }
                if (t.mergeableState !== 'behind') {
                    (0, e.info)(`PR #${t.number} is not 'behind', but: '${t.mergeableState}'.`);
                    return false;
                }
                if (!t.rebaseable) {
                    (0, e.info)(`PR #${t.number} is not rebaseable.`);
                    return false;
                }
                return true;
            }
        }
        class GithubGetPullRequestService {
            constructor(e) {
                this.github = e;
            }
            async getPullRequest(e, t, r) {
                const A = await this.github.pulls.get({owner: e, repo: t, pull_number: r});
                return {
                    draft: A.data.draft,
                    rebaseable: A.data.rebaseable,
                    mergeableState: A.data.mergeable_state,
                    labels: A.data.labels.map((e) => e.name),
                };
            }
        }
        class GithubListPullRequestsService {
            constructor(e) {
                this.github = e;
            }
            async listOpenPullRequests(e, t) {
                const r = this.github.pulls.list.endpoint.merge({owner: e, repo: t, state: 'open'});
                const A = [];
                for await (const e of this.github.paginate.iterator(r)) {
                    const t = e.data;
                    A.push(...t.map((e) => ({number: e.number, labels: e.labels.map((e) => e.name)})));
                }
                return A;
            }
        }
        class GithubLabelPullRequestService {
            constructor(e) {
                this.github = e;
            }
            async listLabels(e, t) {
                const {data: r} = await this.github.issues.listLabelsForRepo({owner: e, repo: t});
                return r.map((e) => e.name);
            }
            async createLabel(e, t, r, A, i) {
                await this.github.issues.createLabel({owner: e, repo: t, name: r, color: A, description: i});
            }
            async addLabel(e, t, r, A) {
                await this.github.issues.addLabels({owner: e, repo: t, issue_number: r, labels: [A]});
            }
            async removeLabel(e, t, r, A) {
                await this.github.issues.removeLabel({owner: e, repo: t, issue_number: r, name: A});
            }
        }
        function mapAsync(e, t) {
            return Promise.all(e.map(t));
        }
        async function filterAsync(e, t) {
            const r = await mapAsync(e, t);
            return e.filter((e, t) => r[t]);
        }
        class GithubOpenPullRequestsProvider {
            constructor(e, t) {
                this.listPullRequestsService = e;
                this.mergeableStateProvider = t;
            }
            async openPullRequests(e, t) {
                const r = await this.listPullRequestsService.listOpenPullRequests(e, t);
                return await mapAsync(r, async (r) => this.pullRequestInfoFor(e, t, r));
            }
            async pullRequestInfoFor(e, t, r) {
                const A = await this.mergeableStateProvider.pullRequestInfoFor(e, t, r.number);
                return {
                    ownerName: e,
                    repoName: t,
                    number: A.number,
                    draft: A.draft,
                    rebaseable: A.rebaseable,
                    mergeableState: A.mergeableState,
                    labels: A.labels,
                };
            }
        }
        const i = ['behind', 'blocked', 'clean', 'dirty', 'unknown', 'unstable'];
        async function promiseRetry(e, t = {timeoutMs: 500}, r = 1) {
            try {
                return await e(r);
            } catch (A) {
                if (r === 10) {
                    throw A;
                }
                await timeout(t.timeoutMs);
                return promiseRetry(e, t, r + 1);
            }
        }
        function timeout(e) {
            return new Promise((t) => setTimeout(t, e));
        }
        class GithubPullRequestInfoProvider {
            constructor(e) {
                this.getPullRequestService = e;
            }
            pullRequestInfoFor(t, r, A) {
                return promiseRetry(async (s) => {
                    try {
                        const {
                            draft: a,
                            rebaseable: o,
                            mergeableState: n,
                            labels: p,
                        } = await this.getPullRequestService.getPullRequest(t, r, A);
                        if (s < 10 && !a) {
                            if (n === 'unknown' || !i.includes(n)) {
                                (0, e.debug)(`mergeableState for pull request #${A} is 'unknown', retrying.`);
                                throw Error("mergeableState is 'unknown'");
                            }
                        }
                        (0, e.debug)(`rebaseable value for pull request #${A}: ${String(o)}`);
                        (0, e.debug)(`mergeableState for pull request #${A}: ${n}`);
                        return {
                            ownerName: t,
                            repoName: r,
                            number: A,
                            draft: a,
                            rebaseable: o,
                            mergeableState: n,
                            labels: p,
                        };
                    } catch (t) {
                        (0, e.debug)(
                            `Fetching mergeableState for pull request #${A} failed: "${String(t)}", retrying.`,
                        );
                        throw t;
                    }
                });
            }
        }
        class Labeler {
            constructor(e, t) {
                this.openPullRequestsProvider = e;
                this.labelPullRequestService = t;
            }
            async createOptInLabel(e, t) {
                const A = await this.labelPullRequestService.listLabels(e, t);
                if (A.includes(r)) {
                    return;
                }
                await this.labelPullRequestService.createLabel(
                    e,
                    t,
                    r,
                    'c0f276',
                    'Apply this label to enable automatic rebasing',
                );
            }
            async labelNonRebaseablePullRequests(e, t) {
                const r = await this.openPullRequestsProvider.openPullRequests(e, t);
                await this.addLabels(r, e, t);
                await this.removeLabels(r, e, t);
            }
            async addLabels(t, i, s) {
                const a = t.filter((e) => !e.rebaseable && !e.labels.includes(A) && e.labels.includes(r));
                if (a.length > 0) {
                    await this.createNonRebaseableLabel(i, s);
                }
                await Promise.all(
                    a.map((t) => {
                        (0, e.info)(`Adding '${A}' label to PR #${t.number}.`);
                        return this.labelPullRequestService.addLabel(i, s, t.number, A);
                    }),
                );
            }
            async createNonRebaseableLabel(e, t) {
                const r = await this.labelPullRequestService.listLabels(e, t);
                if (r.includes(A)) {
                    return;
                }
                await this.labelPullRequestService.createLabel(
                    e,
                    t,
                    A,
                    'df1d42',
                    "AutoRebase applies this label when a pull request can't be rebased automatically",
                );
            }
            async removeLabels(t, r, i) {
                const s = t.filter((e) => e.rebaseable && e.labels.includes(A));
                await Promise.all(
                    s.map((t) => {
                        (0, e.info)(`Removing '${A}' label from PR #${t.number}.`);
                        return this.labelPullRequestService.removeLabel(r, i, t.number, A);
                    }),
                );
            }
        }
        var s = __webpack_require__(8911);
        class RealGithubRebase {
            constructor(e) {
                this.octokit = e;
            }
            async rebasePullRequest(e, t, r, A) {
                return (0, s.rebasePullRequest)({
                    octokit: this.octokit,
                    owner: e,
                    pullRequestNumber: t,
                    repo: r,
                    base: A,
                });
            }
        }
        class Rebaser {
            constructor(e) {
                this.githubRebase = e;
            }
            async rebasePullRequests(e, t) {
                for (const r of e) {
                    await this.rebase(r, t);
                }
            }
            async rebase(t, r) {
                (0, e.info)(`Rebasing pull request ${JSON.stringify(t)}`);
                try {
                    await this.githubRebase.rebasePullRequest(t.ownerName, t.number, t.repoName, r);
                    (0, e.info)(`${JSON.stringify(t)} was successfully rebased.`);
                } catch (r) {
                    if (String(r).includes('Rebase aborted because the head branch changed')) {
                        (0, e.warning)(`Rebase aborted because the head branch changed for ${JSON.stringify(t)}`);
                        return;
                    }
                    throw new Error(`Error while rebasing for ${JSON.stringify(t)}: ${String(r)}`);
                }
            }
        }
        async function run() {
            try {
                const r = new t.GitHub((0, e.getInput)('github_token'));
                const A = (0, e.getInput)('base_branch', {required: false});
                const i = (await r.rateLimit.get()).data.rate;
                (0, e.debug)(`Rate limit at start: ${JSON.stringify(i)}`);
                const s = new GithubOpenPullRequestsProvider(
                    new GithubListPullRequestsService(r),
                    new GithubPullRequestInfoProvider(new GithubGetPullRequestService(r)),
                );
                const a = new TestableEligiblePullRequestsRetriever(s);
                const o = new Rebaser(new RealGithubRebase(r));
                const n = new Labeler(s, new GithubLabelPullRequestService(r));
                const p = t.context.payload;
                const d = p.repository.owner.login;
                const l = p.repository.name;
                (0, e.info)(`Finding eligible pull requests..`);
                const u = await a.findEligiblePullRequests(d, l);
                (0, e.debug)(JSON.stringify((await r.rateLimit.get()).data.rate));
                (0, e.info)(`Rebasing ${u.length} pull requests..`);
                await o.rebasePullRequests(u, A);
                await n.createOptInLabel(d, l);
                await n.labelNonRebaseablePullRequests(d, l);
                const c = (await r.rateLimit.get()).data.rate;
                (0, e.debug)(`Rate limit at end: ${JSON.stringify(c)} (~${i.remaining - c.remaining} requests*)`);
            } catch (t) {
                (0, e.setFailed)(JSON.stringify(t));
            }
        }
        void run();
    })();
    module.exports = __webpack_exports__;
})();
